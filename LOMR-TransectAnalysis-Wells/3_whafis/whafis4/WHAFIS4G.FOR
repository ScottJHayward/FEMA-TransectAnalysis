C*******************************************************************
C*******************************************************************
C                        PROGRAM WHAFIS
C       ORIGINAL VERSION BY DAVID HARTY,DAMES AND MOORE, 10_80
C
C*******************************************************************
C     SUBSEQUENT MAJOR VERSION 3.0 WRITTEN BY GREENHORNE & O'MARA
C         That version is appended at the end of this update
C         to provide self-contained documentation of changes
C*******************************************************************
C
C                         THIS VERSION:
C
C           FEMA WHAFIS MODEL, VERSION 4.0G, August 2007
C
C                          David Divoky
C                        Watershed Concepts
C
C-------------------------------------------------------------------
C
C
C           UPDATED VERSION FOR 500-YEAR APPLICATIONS
C  Allows specification of non-default wind for IF, OF, and VH cards
C     Establishes default speeds for both 100 and 500 year cases
C       Implements both CM (comment) and PS (postscript) cards
C
C         Based partly on WHAFIS Version 3.1, 8_04 (PWHAFIS)
C     a special version prepared for Pacific Coast applications
C
C
C WINDIF, WINDOF, AND WINDVH are read from user input on the IE card
C If zero, default values are used. Defaults are 60, 80, and 60 mph
C
C          Adopted values are written to the output file.
C
C
C*******************************************************************
C*******************************************************************
C
      MODULE FIVEHUNDRED
        IMPLICIT NONE
        SAVE
        CHARACTER*78 :: CMSTRING
        CHARACTER*78 CMLINE(100), PSLINE(100)
        INTEGER CMCOUNT, PSCOUNT
        LOGICAL CASE500
        CHARACTER*5 :: CODE500
      END MODULE FIVEHUNDRED
C
C
      PROGRAM WHAFIS4
C
C
      USE FIVEHUNDRED
      USE DFPORT
      USE DFLIB

      LOGICAL TEST,AZONE,VZONE
      DIMENSION FFL(10),FFF(10),GFL(10),GFF(10),PARAM(10),
     1HBW(1000),EW(1000), TITLE(80), CODE5XX(5),
     1STVG(1000),VZNE(1000),STEG(1000),ELZ(1000),GS(1000),
     1NSE(1000),SELZ(1000),SAVE(1000),
     1SA(1000,5),AP(1000),SBP(1000),SEP(1000)
      DIMENSION HDN(8,8,7),PPSD(8,3),PLTYP(8)
      CHARACTER*128 XINNAME, XOUTNAME
      CHARACTER*24 DATESTAMP
      INTEGER*2 :: CHECKIFOK
      LOGICAL :: FILEEXISTS
      DIMENSION SPWP(1000)
      COMMON/ARRAY1/ SPWP
      COMMON /PPT/HDN,PPSD,PLTYP
      COMMON /FONLY/FFL,FFF,GFL,GFF
      COMMON /AONLY/NFOM1
      COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
     1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
      COMMON /BTSLOP/GSLB,GSLE
      COMMON /WINDXX/WINDIF,WINDOF,WINDVH
      COMMON /WINDDF/WWNDIF,WWNDOF,WWNDVH  ! 100 YR OR 500 YR DEFAULT VALUES
      DATA EI,DU,BU,VE,FI,FO,ET/ 'IE', 'DU','BU','VE','IF','OF','ET'/
      DATA CM,PS/ 'CM', 'PS'/
      DATA WIND,WARD,BLEE,AS/ 'WIND','WARD',' LEE','AS'/
      DATA PI,BLANK/3.14159,' '/
      DATA VH/ 'VH'/
      CHARACTER :: AKEY
      CHARACTER(LEN=80) :: DATALINE
      CHARACTER(LEN=132) :: TITLE2
      INTEGER :: PADNUM, II
      CHARACTER(LEN=66) :: PADSTRING
      COMMON /FILENAMES/XINNAME, XOUTNAME
C
C
C               UNIT 5 IS THE INPUT FILE
C               UNIT 6 IS THE OUTPUT FILE
C               UNIT 7 IS THE MARSH GRASS DATA FILE
C               UNIT 8 IS THE SCRATCH FILE FOR ECHOING THE INPUT
C                      IN TABULAR FORM
C               UNIT 9 IS THE SCRATCH FILE USED TO WRITE MARSH
C                      GRASS DEFAULT PARAMETERS WHEN THE LATTER
C                      ARE OBTAINED BY REGRESSION AND INTERPOLATION.
C               UNIT 10 IS THE SCRATCH FILE USED TO STORE THE
C                       RESULTING TRANSECT INFORMATION AFTER THE
C                       STILLWATER SURGE ELEVATIONS HAVE BEEN
C                       INTERPOLATED BY THE SUBROUTINE SCANE.
C
      IF (NARGS().EQ.1) THEN              ! If there are no arguments on the command line
        CALL ASKFORFILES                  !    then mimic the old behavior and ask for them
        GO TO 1004                        ! (NARGS is one more than the number of arguments)
      END IF                              ! Now have two candidate file names to try

      IF (NARGS().LT.3) THEN              ! Need two file names, or none; this allows for /? etc
        CALL SHOWHELP                     ! The program doesn't come back here after SHOWHELP
      END IF

      CALL GETARG(1, XINNAME, CHECKIFOK)  ! We get here if there are 2 command line arguments
      IF (CHECKIFOK.LT.0) THEN
        CALL SHOWHELP
      END IF
      CALL GETARG(2, XOUTNAME, CHECKIFOK)
      IF (CHECKIFOK.LT.0) THEN
        CALL SHOWHELP
      END IF

 1004 CONTINUE

      INQUIRE(FILE=XINNAME, EXIST=FILEEXISTS)
      IF (FILEEXISTS.NE..TRUE.) THEN
        CALL FILEERRORS  ! Program exits with file error message
      END IF

      OPEN(5,FILE=XINNAME,STATUS='OLD', ERR=1005)
      OPEN(6,FILE=XOUTNAME,STATUS='REPLACE',FORM='FORMATTED', ERR=1005)
      OPEN(7,FILE='MG.DAT',STATUS='OLD')
      OPEN(8,FILE  ='SCRATH.1',STATUS='REPLACE')
      OPEN(9,FILE  ='SCRATH.2',STATUS='REPLACE')
      OPEN(10,FILE='SCRATH.3',STATUS='REPLACE')
      GO TO 1006

 1005 CALL FILEERRORS

 1006 WRITE(6,830)         ! This is the general heading and version
      DATESTAMP=FDATE()
      WRITE(6,1001) DATESTAMP
      INQUIRE(UNIT=6, NAME=XOUTNAME)
      INQUIRE(UNIT=5, NAME=XINNAME)
      WRITE(6,1002)XINNAME
      WRITE(6,1003)XOUTNAME
 1001 FORMAT(1X,'Executed on: ', A24)
 1002 FORMAT(1X,'Input file:  ', A128)
 1003 FORMAT(1X,'Output file: ', A128, ///)
C
C     READ IN TABULAR DATA FOR MARSH GRASS
      CALL READIN
C
C            CALL SCANE TO INTERPOLATE 100-YR STILLWATER ELEVATIONS
C
      CALL SCANE
C
C     READ THE TITLE CARD FROM THE SCANE SCRATCH FILE
      READ(10, '(a80)') TITLE2
      IF (CASE500) TITLE2 = TITLE2(6:80)
      TITLE2 = TRIM(ADJUSTL(TITLE2))
      PADNUM = 130 - LEN_TRIM(TITLE2)
      PADNUM = PADNUM / 2
      DO 3 II = 1, PADNUM
    3 TITLE2 = ' '//TITLE2
C     INITIALIZE VARIABLES FOR CURRENT TRANSECT
    4 BSFO=0
      N=0
      M=0
      NFO=0
      NAP=0
C
C     SET OVERWATER FETCH WINDSPEED IN FT/SEC AS USED IN CALLS TO T AND HIN
      SPDOF=5280.0*WINDOF/3600.0
C
      WRITE(6, '(a132)') TITLE2
      IF (CASE500) THEN
        WRITE(6,8292)
      ELSE
        WRITE(6,8291)
      END IF
      IF (WINDIF.NE.WWNDIF.OR.WINDOF.NE.WWNDOF.OR.WINDVH.NE.WWNDVH) THEN
        WRITE(6,828)
        WRITE(6,829)WINDIF,WINDOF,WINDVH
      ENDIF
      WRITE(6,840)
C
C     READ DATA CARD DESCRIBING FETCH OR OBSTRUCTION
    5 READ(10,810)TOF,(PARAM(I),I=1,10)
C     ECHO INPUT
      WRITE(6,815)TOF,(PARAM(I),I=1,10)
C
C     WRITE INPUT TO SCRATCH FILE
      WRITE(8,815)TOF,(PARAM(I),I=1,10)
C
C     BRANCH TO THE APPROPRIATE SEGMENT OF THE PROGRAM DEPENDING ON THE
C     TYPE OF FETCH OR OBSTRUCTION (TOF)
      IF(TOF.EQ.DU)GO TO 50
      IF(TOF.EQ.BU)GO TO 100
      IF(TOF.EQ.VE)GO TO 125
      IF(TOF.EQ.FI)GO TO 150
      IF(TOF.EQ.FO)GO TO 200
      IF(TOF.EQ.AS)GO TO 230
      IF(TOF.EQ.VH)GO TO 240
      IF(TOF.EQ.ET)GO TO 300
C
C     IF TOF IS ILLEGAL PRINT MESSAGE AND STOP
      IF(TOF.NE.EI)WRITE(6,820)
      IF(TOF.NE.EI)GO TO 1000
C
C     INITIAL ELEVATIONS PROGRAM SEGMENT
      ESFO=PARAM(1)
      EEFO=PARAM(2)
      FL=PARAM(3)
      SET=PARAM(4)
      SE=PARAM(5)
      WHT=PARAM(6)
      WPT=PARAM(7)
      WPI=WPT
      WHI=WHT
      GSLB=PARAM(9)
      GSLE=GSLB
      ASE=SE
C
C     CHECK FOR MISSING AS CARD
      IF(EEFO.GT.SE)WRITE(6,780)
      IF(EEFO.GT.SE)GO TO 1000
C
C     COMPUTE WAVE PERIOD
      IF(WPT.GT.0)GO TO 20
      AFL=5280*FL
      IF( AFL .EQ. 0.0 ) AFL=5280.*24.
      WPT=T(0.,AFL,SPDOF,26.0)
C
   20 CONTINUE
C
C   CALCULATE INITIAL TRANSMITTED CONTROLLING WAVE HEIGHT IF IT IS
C   NOT KNOWN
C
      IF(WHT. EQ. 0.0) THEN
        AFL=5280.*FL
        IF( AFL .EQ. 0.0 ) AFL=5280.*24.
        WHT=HIN(0.0,AFL,SPDOF,26.0,WPT)
      ENDIF
C
C   CALCULATE BREAKING WAVE HEIGHT AND RESET WHT IF IT IS TOO LARGE
C
      SDEB=AMAX1(0.0,SE-EEFO)
      HB=SHBM(WPT,GSLE,SDEB)
      WHT=AMIN1(WHT,HB)
C
C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
      GO TO 250
C
C     DUNE PROGRAM SEGMENT
   50 ESFO=PARAM(1)
      EEFO=PARAM(2)
      AMMB=PARAM(3)
      SETN=PARAM(4)
      SEN=PARAM(5)
      GSLB=GSLE
      WPI=WPT
      WHI=WHT
      GSLE=PARAM(9)
C
C     UPDATE SURGE ELEVATIONS
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
C     CHECK FOR MISSING AS CARD
      IF(EEFO.GT.SE.AND.AMMB.EQ.0)WRITE(6,780)
      IF(EEFO.GT.SE.AND.AMMB.EQ.0)GO TO 1000
      ASE=(SA(NFO,4)+SE)/2.0
      EEB=EEFO
      SDEB=SE-EEB
C     COMPUTE TRANSMISSION COEFFICIENT B
      HBM=SHBM(WPI,GSLE,SDEB)
C     IF(WHI.LT.SDEB*.78)B=1.0
      IF(WHI.LT.HBM)B=1.0
      IF(WHI.EQ.0)GO TO 80
C     CHECK FOR ARTIFICIAL OR MAN MADE BARRIERS
      IF(AMMB.NE.0)GO TO 75
C     IF(WHI.GE..78*SDEB)B=(.78*SDEB)/WHI
      IF(WHI.GE.HBM)B=HBM/WHI
      GO TO 80
C     COMPUTE B FOR ARTIFICIAL BARRIERS
   75 IF(EEB.GE.SE+.5*WHI)B=0
      IF(EEB.GE.SE+.5*WHI)GO TO 80
C     IF(WHI.GE.SDEB*.78)B=(1/(2*WHI))*(.78*SDEB+WHI)
      IF(WHI.GE.HBM)B=(1/(2*WHI))*(HBM+WHI)
      IF(EEB.GT.SE)B=.5-((EEB-SE)/WHI)
C     COMPUTE TRANSMITTED WAVE HEIGHT
   80 WHT=B*WHI
C     COMPUTE WAVE PERIOD AT END OF SEGMENT
      WPT=WPI
C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
C
      GO TO 250
C
C     BUILDING PROGRAM SEGMENT
  100 ESFO=PARAM(1)
      EEFO=PARAM(2)
      R=PARAM(3)
      RB=PARAM(4)
      SETN=PARAM(5)
      SEN=PARAM(6)
      GSLB=GSLE
      WPI=WPT
      WHI=WHT
      GSLE=PARAM(9)
C     UPDATE SURGE ELEVATIONS
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
      ASE=(SA(NFO,4)+SE)/2.0
C     CHECK FOR MISSING AS CARD
      IF(EEFO.GT.SE)WRITE(6,780)
      IF(EEFO.GT.SE)GO TO 1000
C
C     B IS A FUNCTION OF THE RATIO OF OPEN SPACE TO TOTAL TRANSVERSE WIDTH
C     (R), AND THE NUMBER OF ROWS OF BUILDINGS (RB).
      B=R**(RB/2.0)
      WHT=WHI*B
      IF(EEFO.EQ.SE)WHT=0
C     COMPUTE WAVE PERIOD AT END OF SEGMENT
      WPT=WPI
C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
      GO TO 250
C
C     VEGETATION PROGRAM SEGMENT
  125 ESFO=PARAM(1)
      EEFO=PARAM(2)
      D=PARAM(3)
      AH=PARAM(4)
      AHS=PARAM(5)
      DC=PARAM(6)
      SETN=PARAM(7)
      SEN=PARAM(8)
      GSLB=GSLE
      WPI=WPT
      WHI=WHT
      GSLE=PARAM(9)
C
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
      ASE=(SA(NFO,4)+SE)/2.0
      IF(DC.EQ.0)DC=1.0
      W=ESFO-BSFO
C
C     CHECK FOR MISSING AS CARD
      IF(EEFO.GT.SE)WRITE(6,780)
      IF(EEFO.GT.SE)GO TO 1000
C
C     COMPUTE AVERAGE WETTED HEIGHT OF VEGETATION
      AEG=(BEFO+EEFO)/2.0
      ADV=ASE-AEG
C     CHECK FOR NEGATIVE DEPTHS
      IF(ADV.LE.0)WRITE(6,790)
      IF(ADV.LE.0.) THEN
        WRITE(6,791) TOF,PARAM(1)
      ENDIF
  791 FORMAT(/2X,'TOF= ',A2,2X,'STATION= ',F8.2/)
      IF(ADV.LE.0)GO TO 1000
      AWH=AMIN1(AH,ADV)
C
C     COMPUTE TRANSMISSION COEFFICIENT, TRANSMITTED WAVE HEIGHT AND
C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
      PART1=DC*WHI*AWH*D*W
      PART2=3*PI*(AHS**2)*(ADV**2)
      B=1/(1+(PART1/PART2))
      WHT=WHI*B
      IF(EEFO.EQ.SE)WHT=0
C     COMPUTE WAVE PERIOD AT END OF SEGMENT
      WPT=WPI
C
      GO TO 250
C
C     INLAND FETCH PROGRAM SEGMENT
  150 ESFO=PARAM(1)
      EEFO=PARAM(2)
      SETN=PARAM(3)
      SEN=PARAM(4)
      GSLB=GSLE
      WPI=WPT
      WHI=WHT
      GSLE=PARAM(9)
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
C
C   CHECK FOR MISSING AS CARD
C
      IF(EEFO. GT. SE) THEN
        WRITE(6,780)
        GO TO 1000
      ENDIF
C
      ASE=(SA(NFO,4)+SE)/2.0
C
C               THE SECTION THAT IGNORES REGENERATION FOR FETCHES
C               SHORTER THAN 0.1 MILESIS DISABLED BELOW. INSTEAD,
C               AN ESTIMATE OF THE G OR F FACTOR FOR FETCHES SHORTER
C               THAN 0.1 MILES IS MAKE USING LINEAR INTERPOLATION
C               BETWEEN THE G OR F VALUE FOR 0.1 MILES AND F=0 OR
C               G=0 FOR 0.0 MILES
C
C     NO REGENERATION FOR FETCHES SHORTER THAN .1 MILE
C
C     COMPUTE FETCH FACTOR
      AEG=(EEFO+BEFO)/2.0
      ADF=ASE-AEG
      ADFHOLD= ADF
C     CHECK FOR NEGATIVE DEPTHS
      IF(ADF.LE.0)WRITE(6,790)
      IF(ADF.LE.0.) THEN
        WRITE(6,791) TOF,PARAM(1)
      ENDIF
      IF(ADF.LE.0)GO TO 1000
C
C   INITIALIZE ERROR FLAG
C
      TEST=.FALSE.
C
C   SET WINDSPEED W IN STATUTE MILES PER HOUR, REVISED 8/12/04
C
      W=WINDIF
C
C   NOTE THAT WHI AND WHT COMMUNICATE WITH MAIN PROGRAM THROUGH THE
C   AFGV COMMON BLOCK AND THAT WHT AND WPT ARE SET IN SUBROUTINE FETCH.
C
      CALL FETCH(WPI,TEST,WPT,W)
C
C
C     COMPUTE WAVE PERIOD
C
C
C   SKIP TO NEXT TRANSECT IF ERROR FLAG IS SET
C
      IF(TEST) GO TO 1000
C
C
      GO TO 5
C
C     OVER-WATER FETCH PROGRAM SEGMENT
  200 ESFO=PARAM(1)
      EEFO=PARAM(2)
      SETN=PARAM(3)
      SEN=PARAM(4)
      GSLB=GSLE
      WPI=WPT
      WHI=WHT
      GSLE=PARAM(9)
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
      ASE=(SA(NFO,4)+SE)/2.0
C     CHECK FOR MISSING AS CARD
      IF(EEFO.GT.SE)WRITE(6,780)
      IF(EEFO.GT.SE)GO TO 1000
C
C
      AEG=(EEFO+BEFO)/2.0
      ADF=ASE-AEG
C     ADFHOLD= ADF
      IF(ADF.LE.0)WRITE(6,790)
      IF(ADF.LE.0.) THEN
        WRITE(6,791) TOF,PARAM(1)
      ENDIF
      IF(ADF.LE.0)GO TO 1000
C
C   INITIALIZE ERROR FLAG
C
      TEST=.FALSE.
C
C   SET WINDSPEED W IN STATUTE MILES PER HOUR, REVISED 8/12/04
C
      W=WINDOF
C
C   NOTE THAT WHT AND WHI COMMUNICATED WITH MAIN PROGRAM THROUGH THE
C   AFGV COMMON BLOCK AND THAT WHT AND WPT ARE SET IN SUBROUTINE FETCH.
C
      CALL FETCH(WPI,TEST,WPT,W)
C
C     COMPUTE WAVE PERIOD
C
C   SKIP TO NEXT TRANSECT IF ERROR FLAG IS SET
C
      IF(TEST) GO TO 1000
C
      GO TO 5
C
C     ABOVE SURGE PROGRAM SEGMENT FOR B AND C ZONES
C     ESTABLISH GUTTERS AT BEGIN STATION AND END STATION
  230 ESFO=PARAM(1)
      EEFO=PARAM(2)
      SETN=PARAM(3)
      SEN=PARAM(4)
      GSLB=GSLE
      WPI=WPT
      WHI=0.0
      GSLE=PARAM(9)
C     UPDATE SURGE ELEVATIONS
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
      IF(EEFO. LT. SE) THEN
        WRITE(6,785) TOF,PARAM(1),PARAM(2),SE
  785   FORMAT(/1X,'*** AS CARD GROUND ELEVATION LESS THAN',
     A  ' STILLWATER ELEVATION, SHOULD USE OTHER TYPE CARD, JOB',
     B  ' DUMPED  ***'/,
     C  'TOF= ',A2,' STATION= ',F9.2,' GROUND ELEVATION= ',
     D   F8.2,' STILLWATER ELEVATION= ',F8.2)
        GO TO 1000
      ENDIF
      M=M+1
      STEG(M)=BSFO
      ELZ(M)=EW(NFO)
      M=M+1
      STEG(M)=ESFO
      ELZ(M)=SE
      WHT=0
      WPT=0.1
      GO TO 250
C
C     PROGRAM SEGMENT FOR MARSH GRASS OR OTHER COMPLEX PLANT COMMUNITY
  240 ESFO=PARAM(1)
      EEFO=PARAM(2)
      SETN=PARAM(7)
      SEN=PARAM(8)
      GSLB=GSLE
      WPI=WPT
      WHI=WHT
      GSLE=PARAM(9)
C     CHECK FOR SURGE CHANGE
      IF(SETN.NE.0)SET=SETN
      IF(SEN.NE.0)SE=SEN
C     CHECK FOR MISSING AS CARD
      IF(EEFO.GT.SE)WRITE(6,780)
      IF(EEFO.GT.SE)GO TO 1000
C     CHECK FOR NEGATIVE DEPTH
      ASE=(SA(NFO,4)+SE)/2.0
      AEG=(BEFO+EEFO)/2.0
      ADF=ASE-AEG
      IF(ADF.LE.0)WRITE(6,790)
      IF(ADF.LE.0.) THEN
        WRITE(6,791) TOF,PARAM(1)
      ENDIF
      IF(ADF.LE.0)GO TO 1000
C     INITIALIZE ERROR FLAG
      TEST=.FALSE.
C
C   SET WINDSPEED W IN STATUTE MILES PER HOUR, REVISED 8/12/04
C
      W=WINDVH
C
C   NOTE THAT WHI AND WHT COMMUNICATE WITH MAIN PROGRAM THROUGH THE
C   AFGV COMMON BLOCK AND THAT WHT AND WPT ARE SET IN SUBROUTINE VEG.
C
C     CALL SUBROUTINE
      CALL VEG(WPI,TEST,WPT,W)
C
C     SKIP TO NEXT TRANSECT IF ERROR FLAG IS SET
      IF(TEST)GO TO 1000
      GO TO 5
C
C     ARRAY LOADING PROGRAM SEGMENT
  250 NFO=NFO+1
      IF(NFO.GT.1000)WRITE(6,995)
      IF(NFO.GT.1000)STOP
      GS(NFO)=ESFO
C
C
      SDEB=AMAX1(0.0,SE-EEFO)
C
C     COMPUTE MAXIMUM WAVE HEIGHT
C     WHM=.78*(SE-EEFO)
      WHM=SHBM(WPT,GSLE,SDEB)
C
      IF(TOF.EQ.DU.AND.AMMB.NE.0)WHM=WHT
C
C     COMPUTE WAVE HEIGHTS AND ELEVATIONS
      HBW(NFO)=AMIN1(WHT,WHM)
      STMP = EEFO + SDEB
C     EW(NFO)=.7*HBW(NFO)+ASE
      EW(NFO)=.7*HBW(NFO)+STMP
      IF(TOF.EQ.AS)EW(NFO)=EEFO
C
C
C                    STORE SPECTRAL PEAK WAVE PERIOD IN THE
C                    SPWP ARRAYC
      SPWP(NFO)= WPT
C
C
C     STORE INFORMATION NEEDED LATER FOR FLOOD INSURANCE ZONE DATA
      SA(NFO,1)=BSFO
      SA(NFO,2)=ESFO
      SA(NFO,3)=SET
      SA(NFO,4)=SE
      SA(NFO,5)=TOF
      IF(PARAM(10).NE.1)GO TO 275
      NAP=NAP+1
      AP(NAP)=ESFO
      M=M+1
      STEG(M)=GS(NFO)
      ELZ(M)=EW(NFO)
C
C     INCIDENT WAVE HEIGHT AND PERIOD FOR NEXT OBSTRUCTION
C     EQUALS TRANSMITTED WAVE HEIGHT AND PERIOD OF CURRENT
C     OBSTRUCTION
  275 WHT=HBW(NFO)
C     IF(HBW(NFO).LT..1)WPT=.1
C
C     BEGINNING POINT OF NEXT OBSTRUCTION IS END POINT OF CURRENT
C     OBSTRUCTION
      BSFO=ESFO
      BEFO=EEFO
C
C     BRANCH BACK TO READ STATEMENT AND READ ANOTHER CARD
C
      GO TO 5
C
C     THIS POINT WILL BE REACHED IF THE LAST CARD WAS AN ET CARD
C     SIGNALING THE END OF THE TRANSECT.
C     CALL SUBROUTINE TO PRODUCE AN ANOTATED INPUT LISTING
  300 CALL ECHO
C
C     PRINT HEADINGS AND OUTPUT FOR PART2 (LOCATION, WAVE HEIGHT,
C     AND WAVE ELEVATION)
C     WRITE(6,870)
C     WRITE(6,880)
C
      WRITE(6,875)
  875 FORMAT(///,48X,'PART2: CONTROLLING WAVE HEIGHTS, SPECTRAL '
     1 ,/55X,'PEAK WAVE PERIOD, AND WAVE CREST ELEVATIONS')
C
      WRITE(6,882)
  882 FORMAT(/,42X,10HLOCATION  ,6X,11HCONTROLLING,2X,
     1 14HSPECTRAL PEAK ,2X,10HWAVE CREST,/58X,11HWAVE HEIGHT,
     2 2X,14HWAVE PERIOD   ,2X,10HELEVATION )
C
      DO 310 I=1,NFO
C
      TEMP = SA(I,5)
C
C     IF(SA(I,5).EQ.1.0.OR.SA(I,5).EQ.2.0) GO TO 310
      IF(SA(I,5).EQ.1.0.OR.SA(I,5).EQ.2.0) TEMP = '  '
C
C     WRITE(6,890) SA(I,5),GS(I),HBW(I),EW(I)
C
C     WRITE(6,890) TEMP   ,GS(I),HBW(I),EW(I)
C
C                   ZERO OUT SPECTRAL PEAK WAVE PERIOD
C                   SPWP(I) IF CONTROLLING WAVE HEIGHT HBW(I)
C                   IS ZERO. THIS IS TO PREVENT WAVES WITH A
C                   NON-ZERO WAVE PERIOD FROM OCCURING WHEN THE
C                   WAVE HEIGHT IS ZERO
C
      IF( HBW(I) .EQ. 0.0 ) SPWP(I) = 0.0
C
      WRITE(6,892) TEMP,GS(I),HBW(I),SPWP(I),EW(I)
  892 FORMAT(/,40X,A2,F11.2,3F13.2)
C
C
  310 CONTINUE
C
C
C     CHECK THAT WAVE IS NEARLY DAMPED OUT AT END OF TRANSECT
      IF(HBW(NFO).GT..5)WRITE(6,860)HBW(NFO)
      IF (CASE500) THEN
        WRITE(6,8951)
      ELSE
        WRITE(6,895)
      END IF
C
C
C    LIST LOCATION OF AREAS ABOVE SURGE
      MM1=M-1
      IF(M.EQ.0)GO TO 316
      DO 315 I=1,NFO
      IF(SA(I,5).EQ.AS)WRITE(6,950)SA(I,1),SA(I,2)
  315 CONTINUE
  316 IF(M.EQ.0) THEN
        IF (CASE500) THEN
          WRITE(6,9701)
        ELSE
          WRITE(6,970)
        END IF
      END IF
C
C
C     LIST LOCATION OF SURGE CHANGES AND ESTABLISH GUTTERS AT THESE LOCATIONS
      WRITE(6,885)
      IF (CASE500) THEN
        WRITE(6,9851)
      ELSE
        WRITE(6,985)
      END IF
      NFOM1=NFO-1
      DO 318 I=1,NFOM1
      IF(SA(I,3).EQ.SA(I+1,3).AND.SA(I,4).EQ.SA(I+1,4))GO TO 318
      IF(SA(I,5).EQ.1.0.OR.SA(I,5).EQ.2.0)GO TO 317
      M=M+1
      STEG(M)=GS(I)
      ELZ(M)=EW(I)
  317 IF(SA(I+1,5).EQ.1.0.OR.SA(I+1,5).EQ.2.0)GO TO 318
      M=M+1
      STEG(M)=GS(I+1)
      ELZ(M)=EW(I+1)
      WRITE(6,960)STEG(M),SA(I+1,3),SA(I+1,4)
  318 CONTINUE
      IF(M-1.EQ.MM1)WRITE(6,975)
C
C
C     FIND LOCATIONS WHERE THE HEIGHT OF THE BREAKING WAVE IS 3.0 FEET
C     AND ESTABLISH GUTTERS AT THESE LOCATIONS
      DO 330 I=1,NFOM1
      TEST=.FALSE.
      SLOPE=(HBW(I+1)-HBW(I))/(GS(I+1)-GS(I))
      IF(I.EQ.1.AND.HBW(1).NE.3)GO TO 319
      IF(I.NE.1)GO TO 319
      N=N+1
      M=M+1
      STVG(N)=GS(1)
      STEG(M)=GS(1)
      ELZ(M)=EW(1)
      TEST=.TRUE.
  319 IF(SLOPE.EQ.0)GO TO 320
      IF(HBW(1).EQ.3)GO TO 325
      X=(3-HBW(I))/SLOPE+GS(I)
      IF(X.LE.GS(I).OR.X.GT.GS(I+1))GO TO 330
      N=N+1
      M=M+1
      STVG(N)=X
      STEG(M)=X
      ELZ(M)=2.1+((SA(I,4)+SA(I+1,4))/2.0)
      TEST=.TRUE.
  320 IF(HBW(I).NE.3.AND.HBW(I+1).NE.3)GO TO 325
      N=N+1
      STVG(N)=GS(I+1)
      TEST=.TRUE.
  325 IF(TEST.AND.SLOPE.GT.0)VZNE(N)=BLEE
      IF(TEST.AND.SLOPE.LE.0)VZNE(N)=WIND
  330 CONTINUE
      IF(N.EQ.0)GO TO 336
C
C
C     LIST LOCATIONS OF V ZONE GUTTERS AND V ZONES
      WRITE(6,900)
      WRITE(6,940)
      DO 335 I=1,N
      WRITE(6,905)STVG(I),VZNE(I),WARD
  335 CONTINUE
C
C     FIND ELEVATION GUTTERS AT PLACES WHERE WAVE ELEVATION IS
C     AN ODD MULTIPLE OF .5 FEET
C
  336 DO 370 I=1,NFOM1
      BIG=AMAX1(EW(I),EW(I+1))
      SMALL=AMIN1(EW(I),EW(I+1))
      ITRNK=INT(SMALL)
      TST=SMALL-ITRNK
      IF(TST.LT..5)GTST=FLOAT(ITRNK)+.5
      IF(TST.GT..5)GTST=FLOAT(ITRNK)+1.5
      IF(TST.EQ..5)GTST=SMALL
  340 IF(GTST.GT.BIG)GO TO 370
      TEST=.FALSE.
      SLOPE=(EW(I+1)-EW(I))/(GS(I+1)-GS(I))
      IF(SLOPE.EQ.0)GO TO 370
      M=M+1
      STEG(M)=(GTST-EW(I))/SLOPE+GS(I)
      ELZ(M)=GTST
      GTST=GTST+1.0
      GO TO 340
  370 CONTINUE
C
C      AT LEAST TWO GUTTERS ARE NEEDED
      M=M+1
      STEG(M)=GS(1)
      ELZ(M)=EW(1)
      M=M+1
      STEG(M)=GS(NFO)
      ELZ(M)=EW(NFO)
C
C
C     SAVE LOCATION OF GUTTERS IN ORIGINAL ORDER
      DO 382 I=1,M
      SAVE(I)=STEG(I)
  382 CONTINUE
C
C
C     SORT GUTTERS BY INCREASING STATIONS
      MM1=M-1
      DO 386 J=1,M
      DO 384 I=1,MM1
      SMALL=AMIN1(STEG(I),STEG(I+1))
      BIG=AMAX1(STEG(I),STEG(I+1))
      STEG(I)=SMALL
      STEG(I+1)=BIG
  384 CONTINUE
  386 CONTINUE
C
C
C     FIND THE ELEVATIONS ASSOCIATED WITH EACH OF THE GUTTERS
      DO 390 J=1,M
      DO 388 I=1,M
      IF(SAVE(I).EQ.STEG(J))NS=I
  388 CONTINUE
      SELZ(J)=ELZ(NS)
  390 CONTINUE
C
C
C      PRINT HEADING FOR PART6
      WRITE(6,910)
      WRITE(6,915)
C
C
C      FLAG GUTTERS LOCATED IN AREAS ABOVE SURGE FOR LATER ELIMINATION
      DO 398 I1=1,NFO
      DO 396 I2=1,M
      IF(SA(I1,5).NE.AS)GO TO 396
      IF(STEG(I2).GT.SA(I1,1).AND.STEG(I2).LT.SA(I1,2))STEG(I2)=-10.0
  396 CONTINUE
  398 CONTINUE
C
C
C      FLAG GUTTERS THAT ARE DUPLICATES FOR LATER ELIMINATION
      DO 410 I=1,MM1
      IF(STEG(M-I+1).EQ.STEG(M-I))STEG(M-I+1)=-10
  410 CONTINUE
C
C
C      DETERMINE THE FETCH OR OBSTRUCTION ASSOCIATED WITH EACH GUTTER
      DO 418 J=1,M
      NSE(J)=0
      DO 417 I=1,NFOM1
      IF(STEG(J).GE.GS(I).AND.STEG(J).LT.GS(I+1))NSE(J)=I
  417 CONTINUE
  418 CONTINUE
      IF(STEG(M).EQ.GS(NFO))NSE(M)=NFOM1
C
C
C     FIND THE AREAS OVER WHICH THE WEIGHTED AVERAGE CALCULATIONS
C     ARE TO BE MADE FOR A ZONE NUMBER DETERMINATIONS
C
      K=0
      IF(N.NE.0)GO TO 425
      IF(HBW(1).GT.3.0)GO TO 445
      K=1
      SBP(K)=GS(1)
      SEP(K)=GS(NFO)
      GO TO 445
  425 IF(VZNE(1).EQ.WIND)GO TO 430
      K=1
      SBP(K)=GS(1)
      SEP(K)=STVG(1)
  430 DO 440 I=1,N
      IF(VZNE(I).EQ.BLEE)GO TO 440
      K=K+1
      SBP(K)=STVG(I)
      IF(I.EQ.N)SEP(K)=GS(NFO)
      IF(I.EQ.N)GO TO 440
      SEP(K)=STVG(I+1)
  440 CONTINUE
C
C
C      DETERMINE THE ZONE DESIGNATION AND FLOOD HAZARD FACTOR FOR EACH ZONE
C      AND PRINT THE RESULTS AS THEY ARE DETERMINED
C
  445 WRITE(6,920)GS(1),EW(1)
      DO 500 I=1,MM1
      IF(STEG(I).EQ.-10)GO TO 500
      INDEX=I+1
  450 IF(INDEX.GT.M)GO TO 500
      IF(INDEX.EQ.M.AND.STEG(INDEX).EQ.-10)GO TO 500
      IF(STEG(INDEX).EQ.-10)INDEX=INDEX+1
      IF(STEG(INDEX).EQ.-10)GO TO 450
      INDX=NSE(I)+1
      IF(SA(INDX,5).EQ.AS.AND.SA(INDX,1).EQ.STEG(I))WRITE(6,920)
     1STEG(INDEX),SELZ(INDEX)
      IF(SA(INDX,5).EQ.AS.AND.SA(INDX,1).EQ.STEG(I))GO TO 500
C
C
      AZONE=.FALSE.
      VZONE=.FALSE.
C
C
      IF(K.EQ.0)GO TO 460
C
C
      DO 455 J=1,K
      IF(STEG(I).GE.SBP(J).AND.STEG(I).LT.SEP(J))AZONE=.TRUE.
      IF(STEG(I).GE.SBP(J).AND.STEG(I).LT.SEP(J))INDX=J
  455 CONTINUE
      IF(AZONE)GO TO 462
  460 VZONE=.TRUE.
      TSG1=SA(NSE(I),3)+SA(NSE(I)+1,3)
      TSG2=SA(NSE(INDEX),3)+SA(NSE(INDEX)+1,3)
      HSG1=SA(NSE(I),4)+SA(NSE(I)+1,4)
      HSG2=SA(NSE(INDEX),4)+SA(NSE(INDEX)+1,4)
      TSG=(TSG1+TSG2)/4.0
      HSG=(HSG1+HSG2)/4.0
      DIFF=1.55*(HSG-TSG)
      GO TO 470
  462 BP=SBP(INDX)
      EP=SEP(INDX)
      START=BP
      STOP=EP
      IF(NAP.EQ.0)GO TO 468
      DO 464 J=1,NAP
      IF(AP(J).GT.BP.AND.AP(J).LE.STEG(I))START=AP(J)
  464 CONTINUE
      J=NAP
  465 IF(AP(J).GE.STEG(INDEX).AND.AP(J).LT.EP)GO TO 466
      IF(J.EQ.1)GO TO 468
      J=J-1
      GO TO 465
  466 STOP=AP(J)
  468 CALL AVG(START,STOP,AER,ATS)
      DIFF=AER-ATS
  470 BP=STEG(I)
      EP=STEG(INDEX)
      CALL AVG(BP,EP,AER,ATS)
      ITRNK=INT(AER)
      TST=AER-ITRNK
      IF(TST.LT..5)IELZ=ITRNK
      IF(TST.GE..5)IELZ=ITRNK+1
      IF(DIFF.GE.0.AND.DIFF.LT..75)INSZ=1
      BEG=.75
      DO 480 I1=2,19
      END=BEG+.5
      IF(DIFF.GE.BEG.AND.DIFF.LT.END)INSZ=I1
      BEG=BEG+.5
  480 CONTINUE
      IF(DIFF.GE.9.75.AND.DIFF.LT.10.5)INSZ=20
      BEG=10.5
      DO 490 I1=21,30
      END=BEG+1.0
      IF(DIFF.GE.BEG.AND.DIFF.LT.END)INSZ=I1
      BEG=BEG+1.0
  490 CONTINUE
      IF(DIFF.GE.20.5)INSZ=30
      IF(INSZ.LE.20)IFHF=5*INSZ
      IF(INSZ.GT.20)IFHF=100+(10*(INSZ-20))
      IF(AZONE)WRITE(6,925)INSZ,IELZ,IFHF
      IF(VZONE)WRITE(6,927)INSZ,IELZ,IFHF
      WRITE(6,920)STEG(INDEX),SELZ(INDEX)
  500 CONTINUE
      WRITE(6,980)
      WRITE(6,978)
      DO 504 I=1,PSCOUNT
      WRITE(6,979) I, PSLINE(I)
  504 CONTINUE
C     CHECK FOR NON-BLANK TITLE CARD OF NEXT DATA SET
  505 READ(10,'(a80)') TITLE2
      TEST=.FALSE.
      IF (LEN_TRIM(TITLE2).EQ.0) TEST = .TRUE.
      IF(TEST) GO TO 1010
C     IF THE TITLE CARD IS NOT BLANK READ IN THE NEXT TRANSECT
      GO TO 4
  780 FORMAT(5X,46H GROUND ELEVATION GREATER THAN SURGE ELEVATION,1X,
     124HENCOUNTERED. JOB DUMPED.)
  790 FORMAT(5X,42H AVERAGE DEPTH LESS THAN OR EQUAL TO ZERO.,1X,
     111HJOB DUMPED.)
  805 FORMAT(80A1)
 8051 FORMAT(5A1,75A1)
C  810 FORMAT(A2,F6.0,9F8.0)
  810 FORMAT(A2,F7.0,9F8.0)
  815 FORMAT(10X,A2,10F11.3)
  820 FORMAT(10X,39HTHE ABOVE CARD CONTAINS ILLEGAL DATA IN,1X,
     120HTHE FIRST 2 COLUMNS.)
C
C
  828 FORMAT(//,39X,'THE FOLLOWING NON-DEFAULT WIND SPEEDS ARE
     1 BEING USED')
  829 FORMAT(44X,'WINDIF',F7.2,2X,'WINDOF',F7.2,2X,'WINDVH',F7.2)
 8291 FORMAT(53X,'THIS IS A 100-YEAR CASE')
 8292 FORMAT(53X,'THIS IS A 500-YEAR CASE')
C
C
  830 FORMAT(1X,'WAVE HEIGHT COMPUTATIONS FOR ',
     1  'FLOOD INSURANCE STUDIES (WHAFIS VERSION 4.0G, 08_2007)')
C
C
  835 FORMAT(30X,80A1,//)
 8351 FORMAT(30X,75A1,//)
  840 FORMAT(/,60X,12H PART1 INPUT,/)
  860 FORMAT(5X,40HTRANSMITTED WAVE HEIGHT AT LAST FETCH OR,1X,
     113HOBSTRUCTION =F5.2,
     119H WHICH EXCEEDS 0.5.)
  870 FORMAT(///,48X,34H PART2 WAVE HEIGHTS AND ELEVATIONS)
  880 FORMAT(/,42X,10HLOCATION  ,6X,11HWAVE HEIGHT,2X,
     114HWAVE ELEVATION)
  885 FORMAT(///,50X,31HPART4 LOCATION OF SURGE CHANGES)
  890 FORMAT(/,40X,A2,F11.2,2F13.2)
  895 FORMAT(///,40X,44HPART3 LOCATION OF AREAS ABOVE 100-YEAR SURGE)
 8951 FORMAT(///,40X,44HPART3 LOCATION OF AREAS ABOVE 500-YEAR SURGE)
  900 FORMAT(///,55X,26HPART5  LOCATION OF V ZONES)
  905 FORMAT(/,45X,F15.2,15X,2A4)
  910 FORMAT(///,51X,34HPART6 NUMBERED A ZONES AND V ZONES)
  915 FORMAT(/,40X,17HSTATION OF GUTTER,2X,9HELEVATION,2X,
     116HZONE DESIGNATION,3X,3HFHF,/)
  920 FORMAT(/,35X,F16.2,F15.2,/)
  925 FORMAT(74X,1HA,I2,2X,3HEL=,I2,5X,I3)
  927 FORMAT(74X,1HV,I2,2X,3HEL=,I2,5X,I3)
  940 FORMAT(/,45X,17HSTATION OF GUTTER,10X,
     116HLOCATION OF ZONE)
  950 FORMAT(/,45X,7HBETWEEN,F10.2,1X,3HAND,F10.2)
  960 FORMAT(/,35X,F11.2,10X,F11.2,10X,F11.2)
  970 FORMAT(/,40X,46HNO AREAS ABOVE 100-YEAR SURGE IN THIS TRANSECT)
 9701 FORMAT(/,40X,46HNO AREAS ABOVE 500-YEAR SURGE IN THIS TRANSECT)
  975 FORMAT(/,50X,33HNO SURGE CHANGES IN THIS TRANSECT)
  978 FORMAT(///,50X,25HPART 7   POSTSCRIPT NOTES,//)
  979 FORMAT(25X,'PS# ', I2, '  ', A78)
  980 FORMAT(//,50X,34HZONE TERMINATED AT END OF TRANSECT)
  985 FORMAT(/,40X,7HSTATION,10X,13H10-YEAR SURGE,10X,14H100-YEAR SURGE)
 9851 FORMAT(/,40X,7HSTATION,10X,13H10-YEAR SURGE,10X,14H500-YEAR SURGE)
  990 FORMAT(A2,78A1)
  995 FORMAT(/,10X,38HARRAY DIMENSIONS EXCEEDED. JOB DUMPED.)
C     IN CASE OF ERROR SKIP TO NEXT TRANSECT
 1000 READ(10,990)TOF,(TITLE(I),I=1,78)
      IF(TOF.NE.ET)GO TO 1000
      GO TO 505
 1010 CLOSE(5)
      CLOSE(6)
      CLOSE(7)
      CLOSE(8,STATUS='DELETE')
      CLOSE(9,STATUS='DELETE')
      CLOSE(10,STATUS='DELETE')
C      CLOSE(10)
      END PROGRAM WHAFIS4


      SUBROUTINE FETCH(WPI,TEST,WPT,W)
C
C     THIS SUBROUTINE COMPUTES THE WAVE HEIGHTS AND ELEVATIONS FOR
C     INLAND AND OVERWATER FETCHES AND STORES THE RESULTS FOR FURTHER
C     ANALYSIS BY THE REST OF THE PROGRAM.  WAVE HEIGHTS AND ELEVATIONS
C     ARE COMPUTED USING THE CONSERVATION OF WAVE ACTION EQUATION WITH A
C     VARIABLE GRID SPACING TO PERMIT ACCURATE  LINEAR INTERPOLATION OF
C     WAVE HEIGHTS AND
C     ELEVATIONS FOR DETERMINING FLOOD INSURANCE DATA. THE CONSERVATION
C     OF ACTION EQUATION IS IDENTICAL TO THE ONE USED FOR MARSH GRASS
C     CALCULATION EXCEPT THAT THE PLANT ENERGY DISSIPATION IS ZERO.
C               THE SPECTRAL PEAK WAVE PERIOD IS CALCULATED USING A
C               DIFFERENTIAL FORM OF THE 1984 SPM WAVE PERIOD GROWTH
C               EQUATIONS. THIS FORM IS EQUIVALENT TO THE CONSERVATION
C               OF WAVES EQUATION. THE NET WIND ENERGY INPUT FUNCTION
C               FOR THE WAVE ACTION EQUATION IS BASED ON THE 1984 SPM
C               WAVE GROWTH EQUATIONS. THE SHOALING EFFECT IS INCLUDED
C               IN THE WAVE ACTION EQUATION.
C
      LOGICAL TEST
C
      REAL NUTAVG
C
      DIMENSION PARAM(10),FFL(10),GFL(10),GFF(10),FFF(10),HBW(1000)
C
      DIMENSION AP(1000),SA(1000,5),GS(1000),EW(1000),
     1STEG(1000),ELZ(1000)
C
      COMMON /FONLY/FFL,FFF,GFL,GFF
C
      COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
     1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
C
      COMMON / BTSLOP / GSLB, GSLE
C
      DIMENSION SPWP(1000)
C
      COMMON/ARRAY1/ SPWP
      COMMON /WINDXX/WINDIF,WINDOF,WINDVH
C
      EPSHB = 1.0E-5
      FO= 'OF'
      FI= 'IF'
      DELTA1=0.0
      DELTA2=0.0
      DELTA3=0.0
      STOF=TOF
C
C               RETRIEVE DATA FROM ARRAY PARAM
C
      ESFO=PARAM(1)
      EEFO=PARAM(2)
      SETN=PARAM(3)
      SEN=PARAM(4)
C
      ABGF = PARAM(10)
C
C               SET TOF PARAMETER
C
      IF( TOF .EQ. FI ) TOF= 1.0
      IF( TOF .EQ. FO ) TOF= 2.0
C
C**  THE BOTTOM SLOPE AT END OF TRANSECT SEGMENT,GSLE, AND BOTTOM
C**  SLOPE AT BEGINNING OF SEGMENT, GSLB, HAVE BEEN SET PRIOR TO
C**  ENTERING THIS SUBROUTINE
C
C     CHECK FOR INVALID DATA
      IF(ESFO.GT.BSFO)GO TO 10
      IF( W .EQ. WINDIF ) WRITE(6,500)
      IF( W .EQ. WINDOF ) WRITE(6,520)
      TEST=.TRUE.
 10   CONTINUE
C
      IF(TEST)GO TO 90
C
C     SET DEFAULT FOR WF1
      IF(WF1.EQ.0)WF1=1
C
C     SET DEFAULT SURGE VALUES
      IF(SETN.EQ.0)SETN=SET
      IF(SEN.EQ.0)SEN=SE
C
C
C     CHECK FOR ZERO WAVE PERIOD
   90 IF(WPI.GT.0)GO TO 95
      WRITE(6,600)
      TEST=.TRUE.
C
C     RETURN IF ERROR FLAG IS SET
   95 IF(.NOT.TEST)GO TO 100
      WRITE(6,580)
      REWIND 8
      REWIND 9
      RETURN
  100 CONTINUE
C
C     SET MINIMUM WAVE PERIOD TO .1 SECONDS
      IF(WPI.LT..1)WPI=.1
C
C**  EVALUATE VARIOUS CONSTANTS NEEDED FOR EVALUATION
C
C    W = WINDSPEED IN STATUTE MILES PER HOUR. IT IS READ IN AS ONE OF
C    THE SUBROUTINE ARGUMENTS.
C
      CA = (5.28)*(.589)/3.6
      UA = CA*(W**1.23)
      ATS = 7.54
      SIGT = .0379
      G = 32.2
C
      CRAV=((1.357E-3)*G)**.8557
C
      AH = 0.283
C
      GAMH = 0.53
C
      SIGH = .00565
C
      GAMT = 0.833
C
      PI = 3.1415926536
C
      CTAU = ((ATS*SIGT)**3)*UA/(G*G)
C
      CRSTR = AH*UA*UA/G
C
      CWPF = ATS*UA/G
C
      CNUT = (SIGT**3)/(SIGH*SIGH)
C
      CBETH = GAMH*((G/(UA*UA))**0.75)
C
      CBETT = GAMT*((G/(UA*UA))**0.375)
C
      PI2 = 2*PI
C
      PID2 = PI * 0.5
C
      CLO = G/PI2
C
      PI4 = 4*PI
C
      CAAVG = ((SIGH*AH)**2)*(UA*UA)/G
C
      CBAVG = (SIGH**2)*G/(UA*UA)
C
      CPAVG = ((SIGT*ATS)**2)/PI4
C
      CCAVG = 1./(3.*PI*SQRT(2.0))
C
      C1D3 =1./3.
      CFNUT =  ( CBETH/(CBETT**2) )**2
C
C     SOLVE DIFFERENTIAL EQUATION
C
C     DETERMINE DELTA X
      DX=25
      X=ESFO-BSFO
      IF(X.LT.500)DX=X/20.0
C
C     EVALUATE COMMON FACTORS OUTSIDE THE LOOP
      DTS=DX*(SETN-SA(NFO,3))/X
      DS=DX*(SEN-SA(NFO,4))/X
      DG=DX*(EEFO-BEFO)/X
      DGSL=DX*(GSLE-GSLB)/X
      SIG=.0125
      GOU2=.00415806
      OOM=2.38095
      C1LOG= ALOG10(2.0)
      C2LOG= .394528 * C1LOG
      DSOOM=.68057
C
C     INITIALIZE VARIABLES
      XSUM=0
      XOLD=0
      TSOLD=SA(NFO,3)
      SOLD=SA(NFO,4)
      GOLD=BEFO
C
      GSLOLD=GSLB
      WPOLD=WPI
      DOLD=SOLD-GOLD
      DOLDSTR=AMAX1(0.01,SOLD-GOLD)
      IPASS = 0
      TDX = AMIN1( 2*DX, X )
C
      YNEW=0
C
C     CONVERT CONTROLLING WAVE HEIGHT TO
C     ZERO MOMENT WAVE HEIGHT
C
C     THE ORIGINAL PARTIAL IMPLEMENTATION
C     OF THE THOMPSON-VINCENT PROCEDURE TO
C     CALCULATE HM0 IS REINSTALLED BELOW
C
      YOLD = HM0( WHI, SOLD-BEFO , WPI )
C
C     CHECK FOR EXIT CONDITION
C
  110 CONTINUE
C
      XNEW = XOLD + TDX
C
      IF(XNEW.GT.X)GO TO 135
C
      IF( XNEW .EQ. X ) IPASS = 1
C
C     DETERMINE COEFFFICIENTS
      TSAVG=TSOLD+DTS
      SAVG=SOLD+DS
      GAVG=GOLD+DG
      DAVG=SAVG-GAVG
      DAVGSTR=AMAX1(0.01,DAVG)
      GSLAVG=GSLOLD+DGSL
      GSLNEW=GSLAVG+DGSL
      DXN=2.*DX
      DNEW=DAVG+(DS-DG)
      DNEWSTR=AMAX1(0.01,DNEW)
C
      TSNEW = TSAVG + DTS
      SNEW  = SAVG + DS
      GNEW  = GAVG + DG
C
C     CALCULATE COEFFICIENTS PREPARATORY TO CALCULATING WPNEW
C
      BETHAVG = TANH(CBETH*(DAVGSTR**0.75))
C
      BETTAVG = TANH(CBETT*(DAVGSTR**0.375))
      IF(BETTAVG.GT.0.1)THEN
        FNUT = ( BETHAVG/(BETTAVG**2) )**2
      ELSE
        FNUT = CFNUT
      ENDIF
C
      BETTOLD = TANH(CBETT*(DOLDSTR**0.375))
      WPFOLD = CWPF*BETTOLD
C
C
      NUTAVG = CNUT*(BETTAVG)*FNUT
C
      RSTRAVG =  ( CRSTR*BETHAVG )**2
C
      ROLD = YOLD*YOLD
C
      RAT2 = ROLD/RSTRAVG
      RAT1= AMIN1(RAT2,1.0)
      FTAVG = (1.-RAT1)**NUTAVG
C
      DLTAOLD=1
      IF((RAT2.GE.1) .OR. (WPOLD.GE.WPFOLD)) DLTAOLD=0.0
C
      IF(RAT2. LE. 1.0) THEN
        DLTAPLD = 1.0
      ELSE
        DLTAPLD = 1.0/RAT2
      ENDIF
C
      IF( RAT2 .LT. 1.0 ) THEN
        DLTAPPD = 1.0
      ELSE
        DLTAPPD = 0.0
      ENDIF
C
      DELTAU = DXN*CTAU*FTAVG*DLTAOLD
C
      TAUOLD = WPOLD**3
C
      TAUNEW = TAUOLD+DELTAU
C
C       CALCULATE SPECTRAL PEAK WAVE PERIOD AT END OF GRID CELL, WPNEW
C
      WPNEW = TAUNEW**C1D3
C
C             CALCULATE ADDITIONAL FACTORS PREPARATORY TO CALCULATING
C             THE NEW HM0, YNEW
C
C             RESET DLTAOLD TO 1 AND SET DLTAPLD AND DLTAPPD TO 1
C
      DLTAOLD = 1.0
      DLTAPLD = 1.0
      DLTAPPD = 1.0
C
C               CALCULATE OTHER FACTORS
C
      BAVG = CBAVG / (BETHAVG**2)
C
      WLOOLD = CLO*WPOLD*WPOLD
      WLOOLD = AMAX1(0.1,WLOOLD)
C
      WLONEW = CLO*WPNEW*WPNEW
      WLONEW = AMAX1(0.1,WLONEW)
C
      CDNEW = DNEWSTR/WLONEW
C
      CDOLD = DOLDSTR/WLOOLD
C
C   WLOLD IS THE SPECTRAL PEAK WAVE LENGTH AT THE BEGINNING OF THE
C   SEGMENT
C
      WLOLD = WLOOLD*SQRT(TANH(PI2*CDOLD))
      WLOLD = AMAX1(0.1,WLOLD)
C
C   WLNEW IS THE SPECTRAL PEAK WAVLENGTH AT THE END OF THE SEGMENT
C
      WLNEW = WLONEW*SQRT(TANH(PI2*CDNEW))
      WLNEW = AMAX1(0.1,WLNEW)
      WLI=WLNEW
C
      SLOLD = PI4*DOLDSTR/WLOLD
      SLOLD = AMAX1(0.01,SLOLD)
C
      SLNEW = PI4*DNEWSTR/WLNEW
      SLNEW = AMAX1(0.01,SLNEW)
C
      IF(SLOLD.GT.0.04)THEN
        FLOLD = SLOLD/SINH(AMIN1(50.0,SLOLD))
      ELSE
        FLOLD = 1.0
      ENDIF
C
      IF(SLNEW.GT.0.04)THEN
        FLNEW = SLNEW/SINH(AMIN1(50.0,SLNEW))
      ELSE
        FLNEW = 1.0
      ENDIF
C
C   CGTOLD IS THE PRODUCT OF THE SPECTRAL PEAK PERIOD AND WAVE GROUP
C   VELOCITY AT THE BEGINNING OF THE SEGMENT
C
C   CGTNEW IS THE PRODUCT AT THE END OF THE GRID
C
      CGTOLD = 0.5*WLOLD*(1.0+FLOLD)
C
      CGTNEW = 0.5*WLNEW*(1.0+FLNEW)
C
C               CALCULATE VARIOUS FACTORS AT THE MIDPOINT OF THE
C               GRID CELL. THESE ARE DESIGNATED BY AN "AVG" AT THE
C               END.
C
      WLOAVG = 0.5*CLO*((WPOLD**2)+(WPNEW**2))
      WLOAVG = AMAX1(0.1,WLOAVG)
C
      CDAVG = DAVGSTR/WLOAVG
C
      DPAVG = PI2 * CDAVG
      SDPAVG = AMIN1( 1.E9 , SINH( AMIN1(50.0,DPAVG) ) )
      CDPAVG = AMIN1( 1.E9 , COSH( AMIN1(50.0,DPAVG) ) )
C
      FDAVG = SQRT(TANH(PI2*CDAVG))
C
      WLAVG = WLOAVG*FDAVG
      WLAVG = AMAX1(0.1,WLAVG)
C
      SLAVG = PI4*DAVGSTR/WLAVG
      SLAVG = AMAX1( 0.01 , SLAVG )
C
      SSLAVG = AMIN1( 1.E9 , SINH(AMIN1(50.0,SLAVG) ) )
      CSLAVG = AMIN1( 1.E9 , COSH(AMIN1(50.0,SLAVG) ) )
C
      IF(SLAVG.GT.0.04)THEN
        FLAVG = SLAVG/SSLAVG
      ELSE
        FLAVG = 1.0
      ENDIF
C
      IF( SLAVG .GT. 0.04 ) THEN
        FL1AVG = (SSLAVG - (SLAVG*CSLAVG) ) / (SSLAVG**2)
        FL5AVG = 1.0 + ( (FLAVG**2)*CSLAVG )
      ELSE
        FL1AVG = 0.0
        FL5AVG = 2.0
      ENDIF
C
      IF( DPAVG .GT. 0.04 ) THEN
        T2AVG = SQRT((WLOAVG*CDAVG)/(SDPAVG*(CDPAVG**3)))
      ELSE
        T2AVG = SQRT( WLOAVG/PI2 )
      ENDIF
C
      T4AVG = PI2 * FL1AVG
      T5AVG = PID2 * FL5AVG * T2AVG
C
      CGTAVG = 0.5*WLAVG*(1.+FLAVG)
C
      IF( DPAVG .GT. 0.04 ) THEN
        T78AVG = ( SQRT(DAVGSTR) )/CGTAVG
      ELSE
        T78AVG = 1./SQRT( PI2*WLOAVG )
      ENDIF
C
      T7AVG = 2. * T4AVG * T78AVG
      T8AVG = T5AVG * T78AVG
C
      AAVG = CAAVG
C
C   WPAVG IS THE SPECTRAL PEAK PERIOD AT THE MIDPOINT OF THE SEGMENT
C
      WPAVG = 0.5*(WPOLD+WPNEW)
C
C   CAPGAM IS CAPITAL GAMMA, THE PLANT PARAMETER FACTOR MULTIPLIES
C   HM0**3 IN THE EXPRESSION FOR THE WAVE ENERGY DISSIPATION DUE TO
C   MARSH GRASS
C
C               ZERO OUT CAPGAM AND CAVG SINCE THIS SUBROUTINE DOES
C               NOT HANDLE MARSH PLANTS
C
      CAPGAM = 0.0
C
      CAVG =   0.0
C
      BPAVG = ( BAVG + (CAVG*YOLD) ) * DXN
C
      P = -BPAVG
C
      Q2A = AAVG * DXN
C
      EFAVG = EXP(P)
C
      IF( ABS(P) .GT. 0.001 ) THEN
        Q3 = ( 1.-EFAVG )/BPAVG
      ELSE
        Q3 = 1.0
      ENDIF
C
      Q27 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DAVGSTR) ) )
      Q17 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DOLDSTR) ) )
C
      Q28 = (DAVGSTR/DNEWSTR)**T8AVG
      Q18 = (DOLDSTR/DNEWSTR)**T8AVG
C
C               CALCULATE RNEW AND YNEW AT END OF GRID CELL
C
      RNEW = (ROLD*Q18*Q17*EFAVG) + (Q2A*Q28*Q27*Q3)
      YNEW = SQRT(RNEW)
C
C   YNEW IS THE HM0 AT END OF GRID CELL
C
      WPI=WPNEW
C
C               CONVERT ZERO MOMENT WAVE HEIGHT YNEW TO SIGNIFICANT
C               WAVE HEIGHT HS
C
      WLISTR = AMAX1( 0.1 , WLI )
C
      EPP=YNEW/(4*WLISTR*.002)
      EPP = AMAX1( 1.0E-4 , EPP )
C
      WPISTR = AMAX1( 0.1 , WPI )
C
      DD=DNEWSTR/(G*(WPISTR**2))
C
C
C     THE ORIGINAL PARTIAL IMPLEMENTATION
C     OF THE THOMPSON-VINCENT PROCEDURE
C     TO CALCULATE HM0 IS REINSTALLED BELOW
C
      DC=5.5722E-5
      PART1=.9+(.42707*ALOG10(DD/DC))
      IF(EPP.LE.2)PHI=PART1-(1.411296*ALOG10(EPP))
      IF(EPP.GT.2)PHI=PART1-C2LOG-(1.016768*ALOG10(EPP))
C
C
      TMP1 = CRAV * (WPISTR**1.7114)
      TMP  = TMP1 / (DNEWSTR**.8557)
      RAV = 1.477 + .477 * (TMP - 1.0)
C
      IF(RAV.GT.1.7)RAV=1.7
      IF( RAV .LT. 1.0 ) RAV= 1.0
C
      IF(PHI.LT.1)PHI=1
      IF(PHI.GT.RAV)PHI=RAV
C
      HS=PHI*YNEW
C
C     CONVERT SIGNIFICANT WAVE HEIGHT TO
C     CONTROLLING WAVE HEIGHT WHT
      WHT=1.6*HS
C
C               IF THE CONTROLLING WAVE BREAKS, COMPUTE THE EQUIV-
C               ALENT ZERO MOMENT WAVE HEIGHT.
C
      HBM = SHBM( WPNEW, GSLNEW , DNEWSTR )
C
C
      IF( WHT .GE. (HBM-EPSHB)) THEN
C
        WHT = HBM
        YNEW = HM0( WHT, DNEWSTR , WPI )
      ENDIF
C
 115  CONTINUE
C
C               STORE RESULTS AT 100 FT. INTERVALS OR GREATER OR
C               AT END OF TRANSECT SEGMENT
C
      XSUM = XSUM + TDX
C
      IF(XSUM.LT.100)GO TO 120
C
C     INCREMENT ARRAY SUBSCRIPT AND CHECK AGAINST
C     ARRAY DIMENSION
      NFO=NFO+1
      IF(NFO.GT.1000)WRITE(6,995)
      IF(NFO.GT.1000)STOP
C
C     COMPUTE NEW GROUND STATION,WAVE HEIGHT, AND
C     WAVE ELEVATION AND STORE RESULTS
      GS(NFO)=BSFO+XNEW
C
      HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
      WHM=HBM
C
      IF(WHT.GT.WHM)WHT=WHM
      HBW(NFO)=WHT
C
      STMP=GNEW+DNEW
      EW(NFO)=.7*HBW(NFO)+STMP
C
      SPWP(NFO) = WPNEW
C
      NFOM1=NFO-1
      SA(NFO,1)=GS(NFOM1)
      SA(NFO,2)=GS(NFO)
      SA(NFO,3)=TSNEW
      SA(NFO,4)=SNEW
C
C
      IF( GS(NFO) .EQ. ESFO ) THEN
        SA( NFO,5 ) = STOF
      ELSE
        SA( NFO,5 ) = TOF
      ENDIF
C
      XSUM=0
C
C
  120 CONTINUE
C
C               IF IPASS .EQ. 1, THEN THIS IS LAST PASS THROUGH THE
C               LOOP. EXIT LOOP
C
      IF( IPASS .EQ. 1 ) GO TO 135
C
C
C               ADJUST STEP SIZE
C
      YTEST=ABS(YNEW-YOLD)
C
      TDXMAX = X - XNEW
      DXMAX  = 0.5 * TDXMAX
C
      IF( YTEST .GT. .05 ) GO TO 125
C
C     DX=2*DX
C
      DXOLD = DX
      DXNEW = AMIN1( 2.*DX ,DXMAX )
      RATX  = 0.5 * DXNEW/DXOLD
      DX    = DXNEW
      TDX   = AMIN1( 2.*DX, TDXMAX)
C
C
      DTS=2*DTS*RATX
      DS=2*DS*RATX
      DG=2*DG*RATX
      DGSL=2.*DGSL*RATX
C
      GO TO 130
C
  125 IF( YTEST .LT. 0.1 ) GO TO 1000
      IF( DX    .LT. 5.0 ) GO TO 1000
C
C     DX=.5*DX
C
      DXOLD = DX
      DXNEW = AMIN1( 0.5*DX,DXMAX )
      RATX =  2. * DXNEW/DXOLD
      DX   = DXNEW
      TDX  = AMIN1( 2.*DX,TDXMAX )
C
      DTS=.5*DTS*RATX
      DS=.5*DS*RATX
      DG=.5*DG*RATX
      DGSL=0.5*DGSL*RATX
C
      GO TO 130
C
 1000   CONTINUE
C
      DXOLD = DX
      DXNEW = AMIN1( DX,DXMAX )
      RATX  = DXNEW/DXOLD
      DX    = DXNEW
      TDX   = AMIN1( 2.*DX,TDXMAX )
C
      DTS=DTS*RATX
      DS=DS*RATX
      DG=DG*RATX
      DGSL=DGSL*RATX
C
C     UPDATE RECURSIVE VARIABLES AND LOOP BACK
  130 XOLD=XNEW
      YOLD=YNEW
      TSOLD=TSNEW
      SOLD=SNEW
      GOLD=GNEW
C
      GSLOLD=GSLNEW
      WPOLD=WPNEW
      DOLD=DNEW
      DOLDSTR=AMAX1(0.01,DOLD)
C
      GO TO 110
C
C               STORE FINAL VALUE IF IT HAS NOT ALREADY BEEN STORED
C
  135 IF(GS(NFO).EQ.ESFO)GO TO 140
      NFO=NFO+1
      GS(NFO)=ESFO
C
      HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
      WHM=HBM
      WHT=AMIN1(WHT,WHM)
C
      HBW(NFO)=AMIN1(WHT,WHM)
      STMP=GNEW+DNEW
      EW(NFO)=.7*HBW(NFO)+STMP
C
C
      SPWP(NFO) = WPNEW
C
      SA(NFO,1)=XOLD
      SA(NFO,2)=ESFO
      SA(NFO,3)=SETN
      SA(NFO,4)=SEN
C
      SA( NFO,5 ) = STOF
C
  140 CONTINUE
C
C               INSERT ABGF IF REQUIRED
C
      IF(ABGF.NE.1)GO TO 150
      NAP=NAP+1
      AP(NAP)=ESFO
      M=M+1
      STEG(M)=GS(NFO)
      ELZ(M)=EW(NFO)
C
C     GET READY FOR NEXT FETCH OR OBSTRUCTION AND RETURN
  150 BSFO=ESFO
      BEFO=EEFO
C
      WPT=WPNEW
      RETURN
  500 FORMAT(/,10X,34HINVALID DATA IN FIELD 1 OF IF CARD)
  520 FORMAT(/,10X,34HINVALID DATA IN FIELD 1 OF OF CARD)
  580 FORMAT(/,10X,11HJOB DUMPED.)
  600 FORMAT(/,10X,'WAVE PERIOD LESS THAN OR EQUAL TO ZERO',/
     1         10X,'IN SUBROUTINE FETCH.ABORT RUN')
  995 FORMAT(/,10X,38HARRAY DIMENSIONS EXCEEDED. JOB DUMPED.)
      END SUBROUTINE FETCH


      SUBROUTINE VEG(WPI,TEST,WPT,W)
C     THIS SUBROUTINE READS MG CARDS ASSOCIATED WITH
C     MARSH GRASS OR OTHER PLANT COMMUNITIES AND DETERMINES
C     WAVE HEIGHTS AND ELEVATIONS.
C
C               THIS VERSION OF VEG SOLVES THE WAVE ACTION EQUATION
C               WITH SHOALING EFFECTS. THE NET WIND ENERGY INPUT
C               FUNCTION IS BASED ON AN APPROXIMATE FORM OF THE 1984
C               SPM WAVE GROWTH EXPRESSIONS. THE SPECTRAL PEAK WAVE
C               PERIOD IS COMPUTED USING AN APPROXIMATE FORM OF 1984
C               SPM WAVE PERIOD GROWTH EXPRESSIONS IN DIFFERENTIAL
C               FORM. THE WAVE PERIOD APPROACH IS TANTAMOUNT TO USING
C               THE CONSERVATION OF WAVES EQUATION IN DIFFERENTIAL FORM
C
      LOGICAL TEST
C
      REAL NUTAVG
C
      DIMENSION CDE(10),FCOV(10),HBI(10),PPSF(10),SDB(10),
     1SDM(10),SDT(10),TYPE(10),FAR(10),DEF1(10,8),DEF2(10,8),DEF(10,8)
C
      DIMENSION PARAM(10),HBW(1000),AP(1000),
     1STEG(1000),ELZ(1000),GS(1000),EW(1000),SA(1000,5)
C
      COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
     1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
C
      COMMON /PP/NPLTS,TYPE,CDE,FCOV,HBI,PPSF,SDB,SDM,SDT,FAR
      COMMON /BTSLOP/GSLB,GSLE
C
C
      DIMENSION SPWP(1000)
C
      COMMON/ARRAY1/ SPWP
C
C     RETRIEVE DATA FROM ARRAY PARAM
C
      EPSHB = 1.0E-5
C
      ESFO=PARAM(1)
      EEFO=PARAM(2)
      REG1=PARAM(3)
      WF1=PARAM(4)
      REG2=PARAM(5)
      NPLTS=PARAM(6)
      SETN=PARAM(7)
      SEN=PARAM(8)
      ABGF=PARAM(10)
C
C               SET STOF AND RESET TOF
C
      STOF = TOF
      TOF = 1.0
C
C**  THE BOTTOM SLOPE AT END OF TRANSECT SEGMENT,GSLE, AND BOTTOM
C**  SLOPE AT BEGINNING OF SEGMENT, GSLB, HAVE BEEN SET PRIOR TO
C**  ENTERING THIS SUBROUTINE
C
C     CHECK FOR INVALID DATA
      IF(ESFO.GT.BSFO)GO TO 10
      WRITE(6,500)
      TEST=.TRUE.
   10 IF(REG1.LE.8.AND.REG2.LE.8)GO TO 20
      WRITE(6,520)
      TEST=.TRUE.
   20 IF(REG1.EQ.INT(REG1).AND.REG2.EQ.INT(REG2))GO TO 25
      WRITE(6,520)
      TEST=.TRUE.
   25 IF(REG1.GE.1.AND.REG2.GE.0)GO TO 30
      WRITE(6,520)
      TEST=.TRUE.
   30 IF(WF1.LE.1.AND.WF1.GE.0)GO TO 40
      WRITE(6,530)
      TEST=.TRUE.
   40 IF(NPLTS.LE.10.AND.NPLTS.GT.0)GO TO 60
      WRITE(6,540)
      TEST=.TRUE.
   60 CONTINUE
      IF(TEST)GO TO 90
C
C     SET DEFAULT FOR WF1
      IF(WF1.EQ.0)WF1=1
C
C     SET DEFAULT SURGE VALUES
      IF(SETN.EQ.0)SETN=SET
      IF(SEN.EQ.0)SEN=SE
C
C     READ MG CARDS
      DO 80 I=1,NPLTS
      READ(10,560)TOF, PARAM(1),(PARAM(J),J=2,10)
      IF(TOF.EQ. 'MG')GO TO 70
      TEST=.TRUE.
      WRITE(6,570)
      BACKSPACE 5
      GO TO 90
   70 WRITE(6,590)TOF,PARAM(1),(PARAM(J),J=2,10)
      WRITE(8,590)TOF,PARAM(1),(PARAM(J),J=2,10)
      TYPE(I)=PARAM(1)
      CDE(I)=PARAM(2)
      FCOV(I)=PARAM(3)
      HBI(I)=PARAM(4)
      PPSF(I)=PARAM(5)
      SDB(I)=PARAM(6)/12.0
      SDM(I)=PARAM(7)/12.0
      SDT(I)=PARAM(8)/12.0
      FAR(I)=PARAM(9)
      IF(FCOV(I).LE.NPLTS)GO TO 80
      TEST=.TRUE.
      WRITE(6,545)
   80 CONTINUE
C
C     LOOK UP DEFAULT PLANT PARAMETERS
      IF(REG2.NE.0)GO TO 85
      CALL LOOKUP(DEF,REG1,TEST)
      GO TO 90
   85 CALL LOOKUP(DEF1,REG1,TEST)
      CALL LOOKUP(DEF2,REG2,TEST)
C
C     COMPUTE WEIGHTED AVERAGE
      CALL WAVG(DEF1,DEF2,DEF,WF1,REG1,REG2,NPLTS,TYPE,TEST)
C
C     CHECK FOR ZERO WAVE PERIOD
   90 IF(WPI.GT.0)GO TO 95
      WRITE(6,600)
      TEST=.TRUE.
C
C     RETURN IF ERROR FLAG IS SET
   95 IF(.NOT.TEST)GO TO 100
      WRITE(6,580)
      REWIND 8
      REWIND 9
      RETURN
  100 CONTINUE
C
C     WRITE PLANT PARAMETERS TO SCRATCH FILE
      DO 105 I=1,NPLTS
      WRITE(9,610)TYPE(I),(DEF(I,J),J=1,8)
  105 CONTINUE
C
C     SET MINIMUM WAVE PERIOD TO .1 SECONDS
      IF(WPI.LT..1)WPI=.1
C
C**  EVALUATE VARIOUS CONSTANTS NEEDED FOR EVALUATION
C
C    W = WINDSPEED IN STATUTE MILES PER HOUR. IT IS READ IN AS ONE OF
C    THE SUBROUTINE ARGUMENTS.
C
      CA = (5.28)*(.589)/3.6
C
      UA = CA*(W**1.23)
C
      ATS = 7.54
C
      SIGT = .0379
C
      G = 32.2
C
      CRAV=((1.357E-3)*G)**.8557
C
      AH = 0.283
C
      GAMH = 0.53
C
      SIGH = .00565
C
      GAMT = 0.833
C
      PI = 3.1415926536
C
      CTAU = ((ATS*SIGT)**3)*UA/(G*G)
C
      CRSTR = AH*UA*UA/G
C
      CWPF = ATS*UA/G
C
      CNUT = (SIGT**3)/(SIGH*SIGH)
C
      CBETH = GAMH*((G/(UA*UA))**0.75)
C
      CBETT = GAMT*((G/(UA*UA))**0.375)
C
      PI2 = 2*PI
C
      PID2 = PI * 0.5
C
      CLO = G/PI2
C
      PI4 = 4*PI
C
      CAAVG = ((SIGH*AH)**2)*(UA*UA)/G
C
      CBAVG = (SIGH**2)*G/(UA*UA)
C
      CPAVG = ((SIGT*ATS)**2)/PI4
C
      CCAVG = 1./(3.*PI*SQRT(2.0))
C
      C1D3 =1./3.
      CFNUT =  ( CBETH/(CBETT**2) )**2
C
C     SOLVE DIFFERENTIAL EQUATION
C
C                       CALCULATE INITIAL DELTA X. NOTE THAT THIS
C                       INITIAL DELTA X STARTS OFF 5 TIMES SMALLER FOR
C                       VH CARDS THAN IF OR OF CARDS. COMMENT OUT
C                       STATEMENTS WHICH WERE ORIGINALLY USED TO
C                       SET INITIAL DELTA X AND REPLACE WITH REVISED
C                       STATEMENTS
C
C     DETERMINE DELTA X
C     DX=25
      DX=5
      X=ESFO-BSFO
C     IF(X.LT.500)DX=X/20.0
      IF(X.LT.100)DX=X/20.0
C
C     EVALUATE COMMON FACTORS OUTSIDE THE LOOP
      DTS=DX*(SETN-SA(NFO,3))/X
      DS=DX*(SEN-SA(NFO,4))/X
      DG=DX*(EEFO-BEFO)/X
      DGSL=DX*(GSLE-GSLB)/X
      SIG=.0125
      GOU2=.00415806
      OOM=2.38095
C     PI=3.14159
C     G=32.2
      C1LOG= ALOG10(2.0)
      C2LOG= .394528 * C1LOG
      DSOOM=.68057
C
C     INITIALIZE VARIABLES
      XSUM=0
      XOLD=0
      TSOLD=SA(NFO,3)
      SOLD=SA(NFO,4)
      GOLD=BEFO
C
      GSLOLD=GSLB
      WPOLD=WPI
      DOLD=SOLD-GOLD
      DOLDSTR=AMAX1(0.01,SOLD-GOLD)
      IPASS = 0
      TDX = AMIN1( 2*DX, X )
C
      YNEW=0
C
C     CONVERT CONTROLLING WAVE HEIGHT TO
C     ZERO MOMENT WAVE HEIGHT
C
C     THE ORIGINAL PARTIAL IMPLEMENTATION
C     OF THE THOMPSON-VINCENT PROCEDURE
C     TO CALCULATE HM0 IS REINSTALLED BELOW
C
      YOLD = HM0( WHI, SOLD-BEFO , WPI )
C
C     CHECK FOR EXIT CONDITION
C
C
  110 CONTINUE
C
      XNEW = XOLD + TDX
C
      IF(XNEW.GT.X)GO TO 135
C
      IF( XNEW .EQ. X ) IPASS = 1
C
C     DETERMINE COEFFFICIENTS
      TSAVG=TSOLD+DTS
      SAVG=SOLD+DS
      GAVG=GOLD+DG
      DAVG=SAVG-GAVG
      DAVGSTR=AMAX1(0.01,DAVG)
      GSLAVG=GSLOLD+DGSL
      GSLNEW=GSLAVG+DGSL
      DXN=2.*DX
      DNEW=DAVG+(DS-DG)
      DNEWSTR=AMAX1(0.01,DNEW)
C
      TSNEW = TSAVG + DTS
      SNEW  = SAVG + DS
      GNEW  = GAVG + DG
C
C               CALCULATE COEFFICIENTS PREPARATORY TO CALCULATING WPNEW
C
      BETHAVG = TANH(CBETH*(DAVGSTR**0.75))
C
      BETTAVG = TANH(CBETT*(DAVGSTR**0.375))
      IF(BETTAVG.GT.0.1)THEN
        FNUT = ( BETHAVG/(BETTAVG**2) )**2
      ELSE
        FNUT = CFNUT
      ENDIF
C
      BETTOLD = TANH(CBETT*(DOLDSTR**0.375))
      WPFOLD = CWPF*BETTOLD
C
C
      NUTAVG = CNUT*(BETTAVG)*FNUT
C
      RSTRAVG =  ( CRSTR*BETHAVG )**2
C
      ROLD = YOLD*YOLD
C       RAT1 = AMIN1((ROLD/RSTRAVG),1.0)
C
      RAT2 = ROLD/RSTRAVG
      RAT1= AMIN1(RAT2,1.0)
      FTAVG = (1.-RAT1)**NUTAVG
C
      DLTAOLD=1
      IF((RAT2.GE.1) .OR. (WPOLD.GE.WPFOLD)) DLTAOLD=0.0
C
      IF(RAT2. LE. 1.0) THEN
        DLTAPLD = 1.0
      ELSE
        DLTAPLD = 1.0/RAT2
      ENDIF
C
      IF( RAT2 .LT. 1.0 ) THEN
        DLTAPPD = 1.0
      ELSE
        DLTAPPD = 0.0
      ENDIF
C
      DELTAU = DXN*CTAU*FTAVG*DLTAOLD
C
      TAUOLD = WPOLD**3
C
      TAUNEW = TAUOLD+DELTAU
C
C       CALCULATE SPECTRAL PEAK WAVE PERIOD AT END OF GRID CELL, WPNEW
C
      WPNEW = TAUNEW**C1D3
C
C               CALCULATE ADDITIONAL FACTORS PREPARATORY TO CALCULATING
C               THE NEW HM0, YNEW
C
C               RESET DLTAOLD TO 1 AND SET DLTAPLD AND DLTAPPD TO 1
C
      DLTAOLD = 1.0
      DLTAPLD = 1.0
      DLTAPPD = 1.0
C
C               CALCULATE OTHER FACTORS
C
      BAVG = CBAVG / (BETHAVG**2)
C
      WLOOLD = CLO*WPOLD*WPOLD
      WLOOLD = AMAX1(0.1,WLOOLD)
C
      WLONEW = CLO*WPNEW*WPNEW
      WLONEW = AMAX1(0.1,WLONEW)
C
      CDNEW = DNEWSTR/WLONEW
C
      CDOLD = DOLDSTR/WLOOLD
C
C   WLOLD IS THE SPECTRAL PEAK WAVE LENGTH AT THE BEGINNING OF THE
C   SEGMENT
C
      WLOLD = WLOOLD*SQRT(TANH(PI2*CDOLD))
      WLOLD = AMAX1(0.1,WLOLD)
C
C   WLNEW IS THE SPECTRAL PEAK WAVLENGTH AT THE END OF THE SEGMENT
C
      WLNEW = WLONEW*SQRT(TANH(PI2*CDNEW))
      WLNEW = AMAX1(0.1,WLNEW)
      WLI=WLNEW
C
      SLOLD = PI4*DOLDSTR/WLOLD
      SLOLD = AMAX1(0.01,SLOLD)
C
      SLNEW = PI4*DNEWSTR/WLNEW
      SLNEW = AMAX1(0.01,SLNEW)
C
      IF(SLOLD.GT.0.04)THEN
        FLOLD = SLOLD/SINH(AMIN1(50.0,SLOLD))
      ELSE
        FLOLD = 1.0
      ENDIF
C
      IF(SLNEW.GT.0.04)THEN
        FLNEW = SLNEW/SINH(AMIN1(50.0,SLNEW))
      ELSE
        FLNEW = 1.0
      ENDIF
C
C   CGTOLD IS THE PRODUCT OF THE SPECTRAL PEAK PERIOD AND WAVE GROUP
C   VELOCITY AT THE BEGINNING OF THE SEGMENT
C
C   CGTNEW IS THE PRODUCT AT THE END OF THE GRID
C
      CGTOLD = 0.5*WLOLD*(1.0+FLOLD)
C
      CGTNEW = 0.5*WLNEW*(1.0+FLNEW)
C
C               CALCULATE VARIOUS FACTORS AT THE MIDPOINT OF THE
C               GRID CELL. THESE ARE DESIGNATED BY AN "AVG" AT THE
C               END.
C
      WLOAVG = 0.5*CLO*((WPOLD**2)+(WPNEW**2))
      WLOAVG = AMAX1(0.1,WLOAVG)
C
      CDAVG = DAVGSTR/WLOAVG
C
      DPAVG = PI2 * CDAVG
      SDPAVG = AMIN1( 1.E9 ,  SINH( AMIN1(50.0,DPAVG) ) )
      CDPAVG = AMIN1( 1.E9 ,  COSH( AMIN1(50.0,DPAVG) ) )
C
      FDAVG = SQRT(TANH(PI2*CDAVG))
C
      WLAVG = WLOAVG*FDAVG
      WLAVG = AMAX1(0.1,WLAVG)
C
      SLAVG = PI4*DAVGSTR/WLAVG
      SLAVG = AMAX1( 0.01 , SLAVG )
C
      SSLAVG = SINH(AMIN1(50.0,SLAVG))
      CSLAVG = COSH(AMIN1(50.0,SLAVG))
C
      IF(SLAVG.GT.0.04)THEN
        FLAVG = SLAVG/SSLAVG
      ELSE
        FLAVG = 1.0
      ENDIF
C
      IF( SLAVG .GT. 0.04 ) THEN
        FL1AVG = (SSLAVG - (SLAVG*CSLAVG) ) / (SSLAVG**2)
        FL5AVG = 1.0 + ( (FLAVG**2)*CSLAVG )
      ELSE
        FL1AVG = 0.0
        FL5AVG = 2.0
      ENDIF
C
      IF( DPAVG .GT. 0.04 ) THEN
        T2AVG = SQRT((WLOAVG*CDAVG)/(SDPAVG*(CDPAVG**3)))
      ELSE
        T2AVG = SQRT( WLOAVG/PI2 )
      ENDIF
C
      T4AVG = PI2 * FL1AVG
      T5AVG = PID2 * FL5AVG * T2AVG
C
      CGTAVG = 0.5*WLAVG*(1.+FLAVG)
C
      IF( DPAVG .GT. 0.04 ) THEN
        T78AVG = ( SQRT(DAVGSTR) )/CGTAVG
      ELSE
        T78AVG = 1./SQRT( PI2*WLOAVG )
      ENDIF
C
      T7AVG = 2. * T4AVG * T78AVG
      T8AVG = T5AVG * T78AVG
C
      AAVG = CAAVG
C
C   WPAVG IS THE SPECTRAL PEAK PERIOD AT THE MIDPOINT OF THE SEGMENT
C
      WPAVG = 0.5*(WPOLD+WPNEW)
C
C   CAPGAM IS CAPITAL GAMMA, THE PLANT PARAMETER FACTOR MULTIPLIES
C   HM0**3 IN THE EXPRESSION FOR THE WAVE ENERGY DISSIPATION DUE TO
C   MARSH GRASS
C
      CAPGAM = APP(DEF,DAVGSTR,NPLTS,WPAVG,WLAVG)
C
      CAVG = CCAVG*CAPGAM*(WPOLD+WPNEW)/CGTAVG
C
      BPAVG = ( BAVG + (CAVG*YOLD) ) * DXN
C
      P = -BPAVG
C
      Q2A = AAVG * DXN
C
      EFAVG = EXP(P)
C
      IF( ABS(P) .GT. 0.001 ) THEN
        Q3 = ( 1.-EFAVG )/BPAVG
      ELSE
        Q3 = 1.0
      ENDIF
C
      Q27 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DAVGSTR) ) )
      Q17 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DOLDSTR) ) )
C
      Q28 = (DAVGSTR/DNEWSTR)**T8AVG
      Q18 = (DOLDSTR/DNEWSTR)**T8AVG
C
C               CALCULATE RNEW AND YNEW AT END OF GRID CELL
C
      RNEW = (ROLD*Q18*Q17*EFAVG) + (Q2A*Q28*Q27*Q3)
      YNEW = SQRT(RNEW)
C
C   YNEW IS THE HM0 AT END OF GRID CELL
C
      WPI=WPNEW
C
C               CONVERT ZERO MOMENT WAVE HEIGHT YNEW TO SIGNIFICANT
C               WAVE HEIGHT HS
C
      WLISTR = AMAX1( 0.1 , WLI )
C
C
      EPP=YNEW/(4*WLISTR*.002)
      EPP = AMAX1( 1.0E-4 , EPP )
C
      WPISTR = AMAX1( 0.1 , WPI )
C
      DD=DNEWSTR/(G*(WPISTR**2))
C
C
C     THE ORIGINAL PARTIAL IMPLEMENTATION
C     OF THE THOMPSON-VINCENT PROCEDURE
C     TO CALCULATE HM0 IS REINSTALLED BELOW
C
      DC=5.5722E-5
      PART1=.9+(.42707*ALOG10(DD/DC))
      IF(EPP.LE.2)PHI=PART1-(1.411296*ALOG10(EPP))
      IF(EPP.GT.2)PHI=PART1-C2LOG-(1.016768*ALOG10(EPP))
C
C     D0=1.357E-3
C
C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
C
      TMP1 = CRAV * (WPISTR**1.7114)
      TMP  = TMP1 / (DNEWSTR**.8557)
      RAV = 1.477 + .477 * (TMP - 1.0)
C
      IF( RAV .LT. 1.0 ) RAV= 1.0
C
      IF(PHI.LT.1)PHI=1
      IF(PHI.GT.RAV)PHI=RAV
C
      HS=PHI*YNEW
C
C     CONVERT SIGNIFICANT WAVE HEIGHT TO
C     CONTROLLING WAVE HEIGHT WHT
      WHT=1.6*HS
C
C               IF THE CONTROLLING WAVE BREAKS, COMPUTE THE EQUIV-
C               ALENT ZERO MOMENT WAVE HEIGHT.
C
      HBM = SHBM( WPNEW, GSLNEW , DNEWSTR )
C
C     THE STATEMENT BELOW IS COMMENTED OUT AND
C     CORRECTED
C
      IF( WHT .GE. (HBM-EPSHB)) THEN
C
        WHT = HBM
        YNEW = HM0( WHT, DNEWSTR , WPI )
      ENDIF
C
  115 CONTINUE
C
C               STORE RESULTS AT 100 FT. INTERVALS OR GREATER OR
C               AT END OF TRANSECT SEGMENT
C
      XSUM = XSUM + TDX
C
      IF(XSUM.LT.100)GO TO 120
C
C     INCREMENT ARRAY SUBSCRIPT AND CHECK AGAINST
C     ARRAY DIMENSION
      NFO=NFO+1
      IF(NFO.GT.1000)WRITE(6,995)
      IF(NFO.GT.1000)STOP
C
C     COMPUTE NEW GROUND STATION,WAVE HEIGHT, AND
C     WAVE ELEVATION AND STORE RESULTS
      GS(NFO)=BSFO+XNEW
C
      HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
      WHM=HBM
C
      IF(WHT.GT.WHM)WHT=WHM
      HBW(NFO)=WHT
C
      STMP=GNEW+DNEW
      EW(NFO)=.7*HBW(NFO)+STMP
C
C
      SPWP(NFO) = WPNEW
C
      NFOM1=NFO-1
      SA(NFO,1)=GS(NFOM1)
      SA(NFO,2)=GS(NFO)
      SA(NFO,3)=TSNEW
      SA(NFO,4)=SNEW
C
C     SA(NFO,5)=1
C
      IF( GS(NFO) .EQ. ESFO ) THEN
        SA( NFO,5 ) = STOF
      ELSE
        SA( NFO,5 ) = 1.0
      ENDIF
C
      XSUM=0
C
C
  120 CONTINUE
C
C               IF IPASS .EQ. 1, THEN THIS IS LAST PASS THROUGH THE
C               LOOP. EXIT LOOP
C
      IF( IPASS .EQ. 1 ) GO TO 135
C
C               ADJUST STEP SIZE
C
      YTEST=ABS(YNEW-YOLD)
C
      TDXMAX = X - XNEW
      DXMAX  = 0.5 * TDXMAX
C
      IF( YTEST .GT. .05 ) GO TO 125
C
C     DX=2*DX
C
      DXOLD = DX
      DXNEW = AMIN1( 2.*DX ,DXMAX )
      RATX  = 0.5 * DXNEW/DXOLD
      DX    = DXNEW
      TDX   = AMIN1( 2.*DX, TDXMAX)
C
C
      DTS=2*DTS*RATX
      DS=2*DS*RATX
      DG=2*DG*RATX
      DGSL=2.*DGSL*RATX
C
      GO TO 130
C
  125 IF( YTEST .LT. 0.1 ) GO TO 1000
      IF( DX    .LT. 5.0 ) GO TO 1000
C
C     DX=.5*DX
C
      DXOLD = DX
      DXNEW = AMIN1( 0.5*DX,DXMAX )
      RATX =  2. * DXNEW/DXOLD
      DX   = DXNEW
      TDX  = AMIN1( 2.*DX,TDXMAX )
C
      DTS=.5*DTS*RATX
      DS=.5*DS*RATX
      DG=.5*DG*RATX
      DGSL=0.5*DGSL*RATX
C
      GO TO 130
C
 1000 CONTINUE
C
      DXOLD = DX
      DXNEW = AMIN1( DX,DXMAX )
      RATX  = DXNEW/DXOLD
      DX    = DXNEW
      TDX   = AMIN1( 2.*DX,TDXMAX )
C
      DTS=DTS*RATX
      DS=DS*RATX
      DG=DG*RATX
      DGSL=DGSL*RATX
C
C     UPDATE RECURSIVE VARIABLES AND LOOP BACK
  130 XOLD=XNEW
      YOLD=YNEW
      TSOLD=TSNEW
      SOLD=SNEW
      GOLD=GNEW
C
      GSLOLD=GSLNEW
      WPOLD=WPNEW
      DOLD=DNEW
      DOLDSTR=AMAX1(0.01,DOLD)
C
      GO TO 110
C
C               STORE FINAL VALUE IF IT HAS NOT ALREADY BEEN STORED
C
  135 IF(GS(NFO).EQ.ESFO)GO TO 140
      NFO=NFO+1
      GS(NFO)=ESFO
C
      HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
      WHM=HBM
      WHT=AMIN1(WHT,WHM)
C
      HBW(NFO)=AMIN1(WHT,WHM)
      STMP=GNEW+DNEW
      EW(NFO)=.7*HBW(NFO)+STMP
C
      SPWP(NFO) = WPNEW
C
      SA(NFO,1)=XOLD
      SA(NFO,2)=ESFO
      SA(NFO,3)=SETN
      SA(NFO,4)=SEN
C
C 140 SA(NFO,5)=2HVH
C
      SA( NFO,5 ) = 2HVH
C
  140 CONTINUE
C
C               INSERT ABGF IF REQUIRED
C
      IF(ABGF.NE.1)GO TO 150
      NAP=NAP+1
      AP(NAP)=ESFO
      M=M+1
      STEG(M)=GS(NFO)
      ELZ(M)=EW(NFO)
C
C     GET READY FOR NEXT FETCH OR OBSTRUCTION AND RETURN
  150 BSFO=ESFO
      BEFO=EEFO
C
      WPT=WPNEW
      RETURN
  500 FORMAT(/,10X,34HINVALID DATA IN FIELD 1 OF VH CARD)
  520 FORMAT(/,10X,45HINVALID DATA IN FIELD 3 OR FIELD 5 OF VH CARD)
  530 FORMAT(/,10X,34HINVALID DATA IN FIELD 4 OF VH CARD)
  540 FORMAT(/,10X,34HINVALID DATA IN FIELD 6 OF VH CARD)
  545 FORMAT(/,10X,34HINVALID DATA IN FILED 3 OF MG CARD)
  560 FORMAT(A2,2X,A4,9F8.0)
  570 FORMAT(/,10X,
     154HMISSING MG CARD OR INCORECT DATA IN FIELD 6 OF VH CARD)
  580 FORMAT(/,10X,11HJOB DUMPED.)
  590 FORMAT(10X,A2,7X,A4,9F11.3)
  600 FORMAT(/,10X,'WAVE PERIOD LESS THAN OR EQUAL TO ZERO',/
     1         10X,'IN SUBROUTINE VEG.  ABORT RUN')
  610 FORMAT(A4,8F16.8)
  995 FORMAT(/,10X,38HARRAY DIMENSIONS EXCEEDED. JOB DUMPED.)
      END SUBROUTINE VEG


      FUNCTION SHBM(WPI,SLOPE,DNEW)
C
C**   THIS FUNCTION SUBROUTINE CALCULATES THE UPDATED MAXIMUM
C**   CONTROLLING BREAKING WAVE HEIGHT TAKING INTO ACCOUNT
C**   THE EFFECT OF BOTTOM SLOPE AND PEAK WAVE PERIOD.
C**   EQUATIONS 2-92 THROUGH 2-94 IN THE 1984 SHORE
C**   PROTECTION MANUAL (CERC, 1984) ARE USED. IT IS ASSUMED
C**   THAT THE BREAKING WAVE HEIGHT REFERRED TO IN THESE
C**   EQUATIONS IS THE 1% WAVEHEIGHT AND CAN THEREFORE BE
C**   EQUATED WITH FEMA'S CONTROLLING WAVE HEIGHT. THIS
C**   ASSUMPTION IS BACKED UP BY CALCULATIONS PERFORMED
C**   USING THORNTON AND GUZA'S DATA (JGR,1983) THAT SHOW
C**   THAT HRMS=0.42*(STILLWATER DEPTH) DERIVED BY THESE
C**   AUTHORS IS A DIRECT CONSEQUENCE OF USING THE BREAKING
C**   LAW IN THIS ROUTINE, AN OBSERVED BOTTOM SLOPE OF ZERO,
C**   AND A RATIO OF 1% WAVE HEIGHT TO SIGNIFICANT WAVE
C**   HEIGHT IN THE INNER SURF ZONE OF 1.3.
C
C**    WPI:  SPECTRAL PEAK WAVE PERIOD AT END OF TRANSECT
C            SEGMENT OR AT END OF GRID CELL WITHIN A TRANSECT
C            SEGMENT.
C**  SLOPE:  BOTTOM SLOPE AT END OF TRANSECT SEGMENT OR AT
C            END OF GRID CELL WITHIN A TRANSECT SEGMENT
C**   DNEW:  100 YEAR STILL WATER DEPTH AT END OF TRANSECT
C            SEGMENT OR AT END OF GRID CELL WITHIN A TRANSECT
C            SEGMENT.
C
C***********************************************************************
C
C         REVISED IN JUNE AND JULY, 1987 TO RESTORE THE ORIGINAL 0.78
C         BREAKING CRITERIA PER INSTRUCTION BY THE FEDERAL
C         EMERGENCY MANAGEMENT AGENCY
C
C***********************************************************************
C
C     SLOPE=ABS(SLOPE)
C     AP=1.-EXP(-19.5*SLOPE)
C     BP=1.-EXP(-19.0*SLOPE)
C     AP=1.-0.5*AP
C     WPI=AMAX1(0.1,WPI)
C     BP=1.+1.36*BP*DNEW/(WPI**2)
C     GAMA=0.78/(AP*BP)
C     GAMMA = AMAX1( 0.78,GAMA )
C
C  THE FOLLOWING TWO LINES WERE ADDED TO ELIMINATE ERROR MESSAGE
C  4202 ON FORTRAN 4.0 COMPILER. JRH - 7/20/87
      AAA=SLOPE
      BBB=WPI
C
      GAMMA=0.78
C
C     REVISED MAY 1989 BY DR. BARRY E.
C     HERCHENRODER OF GREENHORNE & O'MARA TO
C     INCORPORATED A MICHE-TYPE EXPRESSION FOR THE
C     MAXIMUM CONTROLLING BREAKING WAVE HEIGHT
C     SHBM.
C
C     THE EXPRESSION FOR SHBM IS GIVEN BY:
C
C     SHBM = CPL * TANH((GAMMA*DNEW)/CPL )
C
C     WHERE
C
C     CPL = (CGAMMA/7) * WLNEW
C
C     AND  CGAMMA IS AN ORDER 1 CONSTANT (AT
C     PRESENT SET TO 1.0), GAMMA IS THE BREAKING
C     INDEX, DNEW IS THE STILLWATER DEPTH (IN-
C     CLUDING WAVE SETUP), AND WLNEW IS THE
C     SPECTRAL PEAK WAVELENGTH.
C
C     THIS EXPRESSION IS A SLIGHTLY MODIFIED FORM
C     OF THE CRITERION USED BY BATTJES AND STIVE
C     IN THEIR PAPER "CALIBRATION AND VERIFICATION
C     OF A DISSIPATION MODEL FOR RANDOM BREAKING
C     WAVES", PP. 649-660 IN THE 1984 COASTAL
C     ENGINEERING CONFERENCE PROCEEDINGS.
C
C     THE REVISED BREAKING WAVE HEIGHT EXPRES-
C     SION WILL ALLOW WHAFIS TO CALCULATE MORE
C     ACCURATE BREAKING CONTROLLING WAVE HEIGHTS
C     IN ALL DEPTHS OF WATER. IN PARTICULAR, IT WILL
C     PREVENT THE WAVE SLOPE FROM GETTING LARGER
C     THAN OBSERVATIONS IN DEEP AND INTERMEDIATE
C     DEPTHS OF WATER BY 'CLIPPING' THE WAVE HEIGHT
C     SO THAT THE LOCAL WAVE SLOPE NEVER GETS
C     LARGER THAN
C
C     (CGAMMA/7) * TANH((GAMMA*DNEW)/CPL )
C
C     NOW CALCULATE THE WAVELENGTH WLNEW
C     ASSOCIATED WITH THE SPECTRAL PEAK
C     WAVE PERIOD WPI AND THE STILLWATER
C     DEPTH DNEW.
C
      G = 32.2
C
      PI = 3.1415926536
C
      PI2 = 2*PI
C
      CGAMMA = 1.0
      CP = CGAMMA/7.0
C
      CLO = G/PI2
C
      WPNEW = WPI
      DNEWSTR=AMAX1(0.01,DNEW)
C
      WLONEW = CLO*WPNEW*WPNEW
      WLONEW = AMAX1(0.01,WLONEW)
C
      CDNEW = DNEWSTR/WLONEW
C
C     WLNEW IS THE SPECTRAL PEAK WAVLENGTH
C
      WLNEW = WLONEW*SQRT(TANH(PI2*CDNEW))
      WLNEW = AMAX1(0.1,WLNEW)
C
C     CALCULATE THE BREAKING CONTROLLING
C     WAVE HEIGHT SHBM USING A MODIFIED
C     FORM OF THE MICHE-TYPE BREAKING CRITERION
C     USED BY BATTJES AND STIVE
C
      CPL   = CP * WLNEW
      GAMD  = GAMMA * DNEWSTR
C
      SHBM  = CPL * TANH( GAMD/CPL )
C
C     SHBM=GAMMA*DNEW
C
      SHBM=AMAX1(0.0,SHBM)
      RETURN
      END FUNCTION SHBM


      FUNCTION HIN(WHI,AFL,W,D,WPT)
C
C   THIS FUNCTION COMPUTES THE TRANSMITTED CONTROLING WAVE HEIGHT
C   "HIN" FROM THE INCIDENT CONTROLING WAVE HEIGHT "WHI", FETCH
C   LENGTH "AFL", 10M 10MINUTE WIND SPEED "W", 100 YEAR STILLWATER
C   DEPTH "D", AND TRANSMITTED WAVE PERIOD "WPT".  THE 1984 SPM EQUA-
C   TIONS ARE USED TO CALCULATE HM0, THE THOMPSON-VINCENT CURVES (IN
C   PARAMETERIZED FORM) ARE USED TO CALCULATE THE SIGNIFICANT WAVE
C   HEIGHT HS FROM HM0, AND THE CONTROLLING WAVE HEIGHT IS 1.6 TIMES
C   HS.
C
      PI=3.1415926536
      G=32.2
C
      CRAV=((1.357E-3)*G)**.8557
C
      WPTSTR = AMAX1( .01 , WPT )
      DSTR   = AMAX1( .01 , D   )
C
C     IT IS ASSUMED THAT W IS INPUT AS UNADJUSTED WINDSPEED IN
C     FEET PER SECOND
C
C     CALCULATE U, THE ADJUSTED WINDSPEED IN FEET PER SECOND
C
      CA=(3.6/5.28)**0.23
      U=0.589*CA*(W**1.23)
C
C               CONVERT WHI TO ZERO MOMENT WAVEHEIGHT YI
C
C
C     THE ORIGINAL PARTIAL IMPLEMENTATION
C     OF THE THOMPSON-VINCENT PROCEDURE
C     TO CALCULATE HM0  IS REINSTALLED BELOW
C
      HBM  = SHBM( WPTSTR, 0.0, DSTR )
      WHII = AMIN1( WHI, HBM )
C
      YI  = HM0( WHII, DSTR, WPTSTR )
C
C   IT IS ALSO ASSUMED THAT AFL (FETCH DISTANCE), WHI (THE INCIDENT
C   WAVELENGTH), AND D (THE STILLWATER DEPTH) ARE IN FEET
C
C     COMPUTE COMMON FACTORS
      ALPHA=(.283/G)*U*U
      BETA=TANH(.53*((G*D/(U**2))**.75))
      X=YI/(ALPHA*BETA)
C
C     CHECK TO SEE IF MAXIMUM WAVE HEIGHT HAS BEEN ACHIEVED
      IF(X.LT.1)GO TO 20
      YNEW = YI
      GO TO 100
C
C     COMPUTE EQUIVELENT FETCH LENGTH CORRESPONDING TO INCIDENT
C     WAVE HEIGHT
C
   20 CONTINUE
      TANHI=.5*LOG((1+X)/(1-X))
      EFL=(((BETA/.00565)*TANHI)**2)*(U**2)/G
C
C      COMPUTE TOTAL FETCH LENGTH
      F=EFL+AFL
C
C     COMPUTE TRANSMITTED WAVE HEIGHT HM0
      YNEW=ALPHA*BETA*TANH((.00565/BETA)*SQRT((G*F/(U**2))))
C
  100 CONTINUE
C
C   CALCULATE THE WAVELENGTH WLNEW PREPARATORY TO CALCULATING HS
C
      PI2=2.*PI
      WLONEW=(G/PI2)*WPTSTR*WPTSTR
      WLONEW=AMAX1(0.1,WLONEW)
C
      DNEWSTR=AMAX1(0.01,D)
      CDNEW=DNEWSTR/WLONEW
      WLNEW=WLONEW*SQRT(TANH(PI2*CDNEW))
      WLNEW = AMAX1( 0.01 , WLNEW )
C
C   CALCULATE REMAINING PARAMETERS
C
      WPI = WPTSTR
C  THE FOLLOWING LINE IS ADDED TO SPECIFY WPISTR USED IN THE
C  EXPRESSION FOR TMP1 APPROXIMATELY 30 LINES BELOW ...
C  IT IS IDENTICAL TO THE EXPRESSION USED TWICE BEFORE
C  AND APPARENTLY SIMPLY FORGOTTEN HERE (DD, 12/06)
C
      WPISTR = AMAX1( 0.1 , WPI )
C
      WLI=WLNEW
      C2LOG=.394528*ALOG10(2.0)
C
C   CALCULATE HS AND CONTROLLING WAVE HEIGHT WHT
C
      EPP=YNEW/(4*WLI*.002)
      EPP = AMAX1( 1.0E-4 , EPP )
C
      DD=DNEWSTR/(G*(WPI**2))
C
C     THE ORIGINAL PARTIAL IMPLEMENTATION
C     OF THE THOMPSON-VINCENT PROCEDURE
C     TO CALCULATE HM0 IS REINSTALLED BELOW
C
      DC=5.5722E-5
      PART1=.9+(.42707*ALOG10(DD/DC))
      IF(EPP.LE.2)PHI=PART1-(1.411296*ALOG10(EPP))
      IF(EPP.GT.2)PHI=PART1-C2LOG-(1.016768*ALOG10(EPP))
C
C     D0=1.357E-3
C
C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
C
      TMP1 = CRAV * (WPISTR**1.7114)
      TMP  = TMP1 / (DNEWSTR**.8557)
      RAV = 1.477 + .477 * (TMP - 1.0)
C
      IF(RAV.GT.1.7)RAV=1.7
      IF( RAV .LT. 1.0 ) RAV= 1.0
C
      IF(PHI.LT.1)PHI=1
      IF(PHI.GT.RAV)PHI=RAV
C
      HS=PHI*YNEW
C
C     CONVERT SIGNIFICANT WAVE HEIGHT TO
C     CONTROLLING WAVE HEIGHT
C
      WHT=1.6*HS
C
C                         IF THE CONTROLLING WAVE HEIGHT WHT BREAKS
C                         RESET IT TO THE BREAKING WAVE HEIGHT
C
C     CHANGE THE BREAKING WAVE CALC SO THAT
C     IT USES SHBM
C
      HBM = SHBM( WPTSTR, 0.0, DSTR )
C
      WHT = AMIN1( WHT,HBM)
C
      HIN=WHT
C
      RETURN
      END FUNCTION HIN


      SUBROUTINE AVG(BP,EP,AER,ATS)
C     THIS SUBROUTINE DETERMINES THE WEIGHTED AVERAGE 10 YEAR SURGE
C     ELEVATION (ATS) AND WEIGHTED AVERAGE 100 YEAR WAVE ELEVATION (AER)
C     GIVEN THE BEGIN POINT (BP) AND END POINT (EP) OVER WHICH THE
C     AVERAGE IS TO BE TAKEN.
      DIMENSION PARAM(10),HBW(1000),STEG(1000),ELZ(1000),
     1GS(1000),EW(1000),SA(1000,5),AP(1000)
      COMMON /AONLY/NFOM1
      COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
     1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
      AS= 'AS'
      WT=0
      ICPS=0
      ICPE=0
      DO 10 I=1,NFOM1
      IF(BP.GE.GS(I).AND.BP.LT.GS(I+1))ICPS=I+1
      IF(EP.GT.GS(I).AND.EP.LE.GS(I+1))ICPE=I
   10 CONTINUE
      A1=0
      A2=0
      ICPEM1=ICPE-1
      IF(ICPEM1.LE.ICPS)GO TO 25
      DO 20 I=ICPS,ICPEM1
      IF(SA(I+1,5).EQ.AS)GO TO 20
      HGHT1=SA(I,3)+SA(I+1,3)
      HGHT2=EW(I)+EW(I+1)
      WIDTH=GS(I+1)-GS(I)
      WT=WT+WIDTH
      A1=A1+(HGHT1*WIDTH/2.0)
      A2=A2+(HGHT2*WIDTH/2.0)
   20 CONTINUE
   25 IF(ICPS.EQ.ICPEM1)GO TO 30
      IF(ICPS.EQ.ICPE)GO TO 40
      IF(ICPS.GT.ICPE)GO TO 50
      GO TO 60
   30 IF(SA(ICPE,5).EQ.AS)GO TO 60
      HGHT1=SA(ICPS,3)+SA(ICPE,3)
      HGHT2=EW(ICPS)+EW(ICPE)
      WIDTH=GS(ICPE)-GS(ICPS)
      WT=WIDTH
      A1=HGHT1*WIDTH/2.0
      A2=HGHT2*WIDTH/2.0
      GO TO 60
   40 SLOPE1=(EW(ICPE)-EW(ICPEM1))/(GS(ICPE)-GS(ICPEM1))
      SLOPE2=(EW(ICPE+1)-EW(ICPE))/(GS(ICPE+1)-GS(ICPE))
      Y1=SLOPE1*(BP-GS(ICPEM1))+EW(ICPEM1)
      Y2=SLOPE2*(EP-GS(ICPE))+EW(ICPE)
      Y3=SA(ICPEM1,3)+SA(ICPE,3)
      Y4=SA(ICPE,3)+SA(ICPE+1,3)
      WIDTH1=GS(ICPE)-BP
      WIDTH2=EP-GS(ICPE)
      WT=WIDTH1+WIDTH2
      A1=(((Y3*WIDTH1)+(Y4*WIDTH2)))/2.0
      A2=((Y1+EW(ICPE))*WIDTH1+((Y2+EW(ICPE))*WIDTH2))/2.0
      GO TO 70
   50 X=((BP+EP)/2.0)-GS(ICPE)
      SLOPE=(EW(ICPS)-EW(ICPE))/(GS(ICPS)-GS(ICPE))
      Y1=(SA(ICPS,3)+SA(ICPE,3))/2.0
      Y2=SLOPE*X+EW(ICPE)
      WIDTH=EP-BP
      WT=WIDTH
      A1=Y1*WIDTH
      A2=Y2*WIDTH
      GO TO 70
   60 SLOPE1=(EW(ICPS)-EW(ICPS-1))/(GS(ICPS)-GS(ICPS-1))
      SLOPE2=(EW(ICPE+1)-EW(ICPE))/(GS(ICPE+1)-GS(ICPE))
      Y1=SLOPE1*(BP-GS(ICPS-1))+EW(ICPS-1)
      Y2=SLOPE2*(EP-GS(ICPE))+EW(ICPE)
      Y3=(SA(ICPS-1,3)+SA(ICPS,3))/2.0
      Y4=(SA(ICPE+1,3)+SA(ICPE,3))/2.0
      WIDTH1=GS(ICPS)-BP
      WIDTH2=EP-GS(ICPE)
      A1=A1+(Y3*WIDTH1+(Y4*WIDTH2))
      A2=A2+((Y1+EW(ICPS))*WIDTH1/2.0)+((Y2+EW(ICPE))*WIDTH2/2.0)
      WT=WT+WIDTH1+WIDTH2
   70 ATS=A1/WT
      AER=A2/WT
      RETURN
      END SUBROUTINE AVG


      SUBROUTINE READIN
C     THIS SUBROUTINE READS IN TABULAR DATA ON MARSH GRASS
      DIMENSION HDN(8,8,7),PPSD(8,3),PLTYP(8)
      COMMON /PPT/HDN,PPSD,PLTYP
C
C       REWIND UNIT 7, THE UNIT WITH THE MARSH GRASS DATA
C
      REWIND(7)
C
C     READ IN DATA FOR HEIGHT,DIAMETER,AND NUMBER DENSITY
      DO 20 I=1,7
      DO 20 J=1,8
      READ(7,500)(HDN(I,J,K),K=1,7)
   20 CONTINUE
C
C     NO MARSH GRASS IN REGION 8
      DO 30 I=1,8
      DO 30 J=1,7
      HDN(8,I,J)=0
   30 CONTINUE
C
C     READ IN DATA ON PLANT PARAMETERS THAT ARE SPECIES DEPENDENT
      DO 40 I=1,8
      READ(7,510)(PPSD(I,J),J=1,3)
   40 CONTINUE
C
C     READ IN MARSH GRASS PLANT TYPES
      READ(7,520)(PLTYP(I),I=1,8)
C
C     RETURN TO MAIN PROGRAM
      RETURN
  500 FORMAT(7F8.0)
  510 FORMAT(3F8.0)
  520 FORMAT(8(4X,A4))
      END SUBROUTINE READIN


      FUNCTION APP(DEF,D,NPLTS,WPI,WL)
C     THIS FUNCTION COMPUTES THE AVERAGE PLANT PARAMETER
C     WHICH IS RELATED TO THE NET DRAG FORCE FOR ALL PLANT
C     TYPES PRESENT FOR A GIVEN DEPTH
C
      DIMENSION DEF(10,8)
      PI=3.14159
      G2=1036.84
      G=32.2
C
C     DETERMINE PLANT PARAMETERS
      APP=0
      DO 60 I=1,NPLTS
C
C     UNLOAD DEF ARRAY
      CDE=DEF(I,1)
      FCOV=DEF(I,2)
      HBI=DEF(I,3)
      PPSF=DEF(I,4)
      SDB=DEF(I,5)
      SDM=DEF(I,6)
      SDT=DEF(I,7)
      FAR=DEF(I,8)
C
C     COMPUTE NON DEPTH DEPENDENT QUANTITIES
      ABMS=(SDB+SDM)*HBI*.25
      AAMS=(SDM+SDT)*HBI*.25
      TAS=ABMS+AAMS
      ACPL=(2/PI)*FAR*TAS
C
C     COMPUTE FACTOR WHICH ADJUSTS FOR THE EFFECTS
C     OF WAVE PERIOD
      HF=.5*HBI
      IF(HF.GT.D)HF=D
      IF(D/WL.LT..04)GO TO 5
      IF(D/WL.GT..5)GO TO 10
      WPF=G2*((WPI/WL)*COSH(2*PI*HF/WL)/COSH(2*PI*D/WL))**3
      GO TO 15
    5 WPF=SQRT(G/D)
      GO TO 15
   10 Z=HF-D
      WPF=(8/G)*((PI/WPI)*EXP(2*PI*Z/WL))**3
C
C     COMPUTE FRONTAL AREA BELOW THE WATER SURFACE
C     FOR EACH PLANT TYPE AND COMBINE WITH OTHER
C     PLANT PARAMETERS
   15 IF(HBI.NE.0)GO TO 20
      AT=0
      GO TO 50
   20 IF(D.GT..5*HBI)GO TO 25
      SDI=SDB+((SDM-SDB)/(.5*HBI))
      A1=(SDB+SDI)*.5*D
      A2=ACPL*(D/HBI)
      AT=A1+A2
      GO TO 50
   25 IF(D.GT.HBI)GO TO 30
      SDI=SDM+(((SDT-SDM)/(HBI*.5))*(D-(HBI*.5)))
      A1=(SDM+SDI)*.5*(D-(.5*HBI))
      A2=ACPL*(D/HBI)
      AT=ABMS+A1+A2
      GO TO 50
   30 AT=TAS+ACPL
   50 APP=APP+(FCOV*PPSF*CDE*AT)*WPF
   60 CONTINUE
      RETURN
      END FUNCTION APP


      SUBROUTINE ECHO
C     THIS SUBROUTINE PRODUCES AN ANOTATED INPUT LISTING
C
      USE FIVEHUNDRED
      DIMENSION PARAM(10)
      DATA EI,BU,DU,VE,FI,FO,AS,VH,GM,ET /2HIE,2HBU,2HDU,
     12HVE,2HIF,2HOF,2HAS,2HVH,2HMG,2HET/
C
C     REWIND SCRATCH FILES AND ADVANCE TO TOP OF PAGE
      REWIND 8
      REWIND 9
      WRITE(6,730)
C
C     READ CARD AND BRANCH TO APPROPRIATE PROGRAM SEGMENT
   10 READ(8,505)TOF,(PARAM(I),I=1,10)
      IF(TOF.EQ.EI)GO TO 50
      IF(TOF.EQ.BU)GO TO 100
      IF(TOF.EQ.DU)GO TO 150
      IF(TOF.EQ.VE)GO TO 200
      IF(TOF.EQ.FI)GO TO 250
      IF(TOF.EQ.FO)GO TO 250
      IF(TOF.EQ.AS)GO TO 250
      IF(TOF.EQ.VH)GO TO 300
      IF(TOF.EQ.ET)GO TO 350
C
C     PRINT INITIAL ELEVATIONS HEADINGS AND DATA
   50 WRITE(6,530)
      IF (CASE500) THEN
        WRITE(6,5401)
      ELSE
        WRITE(6,540)
      END IF
      WRITE(6,500)TOF,(PARAM(I),I=1,10)
      GO TO 10
C
C     PRINT BUILDING HEADINGS AND DATA
  100 WRITE(6,550)
      IF (CASE500) THEN
        WRITE(6,5601)
      ELSE
        WRITE(6,560)
      END IF
      WRITE(6,500)TOF,(PARAM(I),I=1,10)
      GO TO 10
C
C     PRINT DUNE HEADINGS AND DATA
  150 WRITE(6,565)
      WRITE(6,570)
      WRITE(6,500)TOF,(PARAM(I),I=1,10)
      GO TO 10
C
C     PRINT VEGETATION HEADINGS AND DATA
  200 WRITE(6,580)
      IF (CASE500) THEN
        WRITE(6,5901)
      ELSE
        WRITE(6,590)
      END IF
      WRITE(6,500)TOF,(PARAM(I),I=1,10)
      GO TO 10
C
C     PRINT FETCH OR ABOVE SURGE HEADINGS AND DATA
  250 WRITE(6,600)
      IF (CASE500) THEN
        WRITE(6,6101)
      ELSE
        WRITE(6,610)
      END IF
      WRITE(6,500)TOF,(PARAM(I),I=1,10)
      GO TO 10
C
C     PRINT SPECIAL VEGETATION HEADINGS AND DATA
  300 WRITE(6,640)
      IF (CASE500) THEN
        WRITE(6,6501)
      ELSE
        WRITE(6,650)
      END IF
      WRITE(6,500)TOF,(PARAM(I),I=1,10)
      NPLTS=PARAM(6)
      DO 310 J=1,NPLTS
      READ(8,515)TOF, PARAM(1),(PARAM(I),I=2,10)
      WRITE(6,660)
      WRITE(6,670)
      WRITE(6,510)TOF,PARAM(1),(PARAM(I),I=2,10)
  310 CONTINUE
C
C     PRINT PLANT PARAMETERS INCLUDING DEFAULTS
      WRITE(6,700)
      DO 330 I=1,NPLTS
      WRITE(6,660)
      WRITE(6,670)
      READ(9,680)TYPE,(PARAM(J),J=1,8)
      PARAM(5)=PARAM(5)*12
      PARAM(6)=PARAM(6)*12
      PARAM(7)=PARAM(7)*12
      WRITE(6,520)TYPE,(PARAM(J),J=1,8)
  330 CONTINUE
      WRITE(6,710)
      GO TO 10
C
C     PRINT END OF TRANSECT MESSAGE AND EXPLANATORY NOTE
  350 WRITE(6,720)
      WRITE(6,740)
      WRITE(6,750)
C
C     REWIND SCRATCH FILES, ADVANCE PAGE, AND RETURN
      REWIND 8
      REWIND 9
      WRITE(6,730)
      RETURN
  500 FORMAT(2X,A2,10F11.3)
  505 FORMAT(10X,A2,10F11.3)
  510 FORMAT(2X,A2,7X,A4,9F11.3)
  515 FORMAT(10X,A2,7X,A4,9F11.3)
  520 FORMAT(11X,A4,9F11.3)
  530 FORMAT(//,T13,3HEND,T24,3HEND,T33,5HFETCH,T39,10HSURGE ELEV,
     1T50,10HSURGE ELEV,T64,7HINITIAL,T75,7HINITIAL,
     2T98,6HBOTTOM,T108,7HAVERAGE)
  540 FORMAT(T9,7HSTATION,T18,9HELEVATION,T32,6HLENGTH,T42,7H10-YEAR,
     1T52,8H100-YEAR,T61,11HWAVE HEIGHT,T74,9HW. PERIOD,
     1T99,5HSLOPE,T108,7HA-ZONES)
 5401 FORMAT(T9,7HSTATION,T18,9HELEVATION,T32,6HLENGTH,T42,7H10-YEAR,
     1T52,8H500-YEAR,T61,11HWAVE HEIGHT,T74,9HW. PERIOD,
     1T99,5HSLOPE,T108,7HA-ZONES)
  550 FORMAT(//,T13,3HEND,T24,3HEND,T28,10HOPEN SPACE,T43,6HNO. OF,T51,
     19HNEW SURGE,T62,9HNEW SURGE,T98,6HBOTTOM,T108,7HAVERAGE)
  560 FORMAT(T9,7HSTATION,T18,9HELEVATION,T33,5HRATIO,T45,4HROWS,T53,
     17H10-YEAR,T63,8H100-YEAR,T99,5HSLOPE,T108,7HA-ZONES)
 5601 FORMAT(T9,7HSTATION,T18,9HELEVATION,T33,5HRATIO,T45,4HROWS,T53,
     17H10-YEAR,T63,8H500-YEAR,T99,5HSLOPE,T108,7HA-ZONES)
  565 FORMAT(//,T6,10HDUNE CREST,T17,10HDUNE CREST,T31,7HDUNE OR,T40,
     19HNEW SURGE,T51,9HNEW SURGE,T98,6HBOTTOM,T108,7HAVERAGE)
  570 FORMAT(T9,7HSTATION,T18,9HELEVATION,T31,7HSEAWALL,T42,
     17H10-YEAR,T52,8H100-YEAR,T99,5HSLOPE,T108,7HA-ZONES)
 5701 FORMAT(T9,7HSTATION,T18,9HELEVATION,T31,7HSEAWALL,T42,
     17H10-YEAR,T52,8H500-YEAR,T99,5HSLOPE,T108,7HA-ZONES)
  580 FORMAT(//,T13,3HEND,T24,3HEND,T31,7HAVERAGE,T42,7HAVERAGE,T53,
     17HAVERAGE,T67,4HDRAG,T73,9HNEW SURGE,T84,9HNEW SURGE,
     1T98,6HBOTTOM,T108,7HAVERAGE)
  590 FORMAT(T9,7HSTATION,T18,9HELEVATION,T30,8HDIAMETER,T43,6HHEIGHT,
     1T53,7HSPACING,T65,6HCOEFF.,T75,7H10-YEAR,T85,8H100-YEAR,
     1T99,5HSLOPE,T108,7HA-ZONES)
 5901 FORMAT(T9,7HSTATION,T18,9HELEVATION,T30,8HDIAMETER,T43,6HHEIGHT,
     1T53,7HSPACING,T65,6HCOEFF.,T75,7H10-YEAR,T85,8H500-YEAR,
     1T99,5HSLOPE,T108,7HA-ZONES)
  600 FORMAT(//,T13,3HEND,T24,3HEND,T29,9HNEW SURGE,T40,9HNEW SURGE,
     1T98,6HBOTTOM,T108,7HAVERAGE)
  610 FORMAT(T9,7HSTATION,T18,9HELEVATION,T31,7H10-YEAR,T41,8H100-YEAR,
     1T99,5HSLOPE,T108,7HA-ZONES)
 6101 FORMAT(T9,7HSTATION,T18,9HELEVATION,T31,7H10-YEAR,T41,8H500-YEAR,
     1T99,5HSLOPE,T108,7HA-ZONES)
  640 FORMAT(//,T13,3HEND,T24,3HEND,T41,8HREGION 1,T65,6HNO. OF,T73,
     19HNEW SURGE,T84,9HNEW SURGE,T98,6HBOTTOM,T108,7HAVERAGE)
  650 FORMAT(T9,7HSTATION,T18,9HELEVATION,T30,8HREGION 1,T43,6HWEIGHT,
     1T52,8HREGION 2,T61,11HPLANT TYPES,T75,7H10-YEAR,T85,8H100-YEAR,
     1T99,5HSLOPE,T108,7HA-ZONES)
 6501 FORMAT(T9,7HSTATION,T18,9HELEVATION,T30,8HREGION 1,T43,6HWEIGHT,
     1T52,8HREGION 2,T61,11HPLANT TYPES,T75,7H10-YEAR,T85,8H500-YEAR,
     1T99,5HSLOPE,T108,7HA-ZONES)
  660 FORMAT(//,T11,5HPLANT,T23,4HDRAG,T30,8HCOVERAGE,T40,9HAVG. STEM,
     1T54,6HNUMBERT62,9HBASE STEM,T74,8HMID STEM,T85,8HTOP STEM,
     1T96,9HLEAF-STEM)
  670 FORMAT(T12,4HTYPE,T21,6HCOEFF.,T33,5HRATIO,T43,6HHEIGHT,T53,
     17HDENSITYT63,8HDIAMETER,T74,8HDIAMETER,T85,8HDIAMETER,
     1T95,10HAREA RATIO)
  680 FORMAT(A4,8F16.8)
  700 FORMAT(//,2X,112(1H-),/,T27,31HPLANT CHARACTERISTICS INCLUDING,
     131H VALUES SUPPLIED BY THE PROGRAM)
  710 FORMAT(//,2X,112(1H-))
  720 FORMAT(//,2X,48(1H-),15HEND OF TRANSECT,49(1H-))
  730 FORMAT(1H1)
  740 FORMAT(//,2X,5HNOTE:)
  750 FORMAT(/,2X,43HSURGE ELEVATION INCLUDES CONTRIBUTIONS FROM,
     11X,29HASTRONOMICAL AND STORM TIDES.)
      END SUBROUTINE ECHO


      FUNCTION T(WPI,AFL,W,D)
C
C     THIS FUNCTION COMPUTES THE TRANSMITTED WAVE PERIOD FROM
C     THE INCIDENT WAVE PERIOD,FETCH LENGTH,10M. 10MIN. WIND-
C     SPEED AND 100 YEAR STILLWATER DEPTH.
      PI=3.14159
      G=32.2
      C13=.333333333
C
C   IT IS ASSUMED THAT W IS INPUT AS UNADJUSTED WINDSPEED IN
C   FEET PER SECOND
C
C   CALCULATE U, THE ADJUSTED WINDSPEED IN FEET PER SECOND
C
      CA=(3.6/5.28)**0.23
      U=0.589*CA*(W**1.23)
C
C   IT IS ALSO ASSUMED THAT AFL, THE FETCH DISTANCE IS IN FEET AND
C   WPI IS IN SECONDS
C
C     COMPUTE COMMON FACTORS
      ALPHA=(7.54/G)*U
      BETA=TANH(.833*((G*D/(U**2))**.375))
      X=WPI/(ALPHA*BETA)
C
C     CHECK TO SEE IF MAXIMUM WAVE PERIOD HAS BEEN ACHIEVED
      IF(X.LT.1)GO TO 20
      T=WPI
      GO TO 100
C
C     COMPUTE EQUIVELENT FETCH LENGTH CORESPONDING TO INCIDENT
C     WAVE PERIOD
   20 TANHI=.5*LOG((1+X)/(1-X))
      EFL=(((BETA/.0379)*TANHI)**3)*(U**2)/G
C
C      COMPUTE TOTAL FETCH LENGTH
      F=EFL+AFL
C
C     COMPUTE TRANSMITTED WAVE PERIOD
      T=ALPHA*BETA*TANH((.0379/BETA)*((G*F/(U**2))**C13))
  100 RETURN
      END FUNCTION T


      SUBROUTINE WAVG(DEF1,DEF2,DEF,WF1,REG1,REG2,NPLTS,TYPE,TEST)
C     THIS SUBROUTINE COMPUTES THE WEIGHTED AVERAGE VALUE OF PLANT
C     PARAMETERS COMBINING DATA FOR REGION 1 AND REGION 2
C
      LOGICAL TEST
      DIMENSION DEF1(10,8),DEF2(10,8),DEF(10,8),TYPE(10)
      IREG1=REG1
      IREG2=REG2
C
C     REPEAT COMPUTATIONS FOR EACH PLANT TYPE
      DO 90 I=1,NPLTS
C
C     FOR STEM PARAMETERS WHICH SHOULD NOT BE ZERO USE RESULTS
C     FROM THE OTHER REGION
      DO 20 J=3,7
      IF(J.EQ.4)GO TO 20
C
C     IF PARAMETERS ARE ZERO FOR BOTH REGIONS PRINT ERROR MESSAGE
      IF(DEF1(I,J).EQ.0.AND.DEF2(I,J).EQ.0)GO TO 10
C
C     USE RESULTS FORM THE OTHER REGION
      IF(DEF1(I,J).EQ.0)DEF1(I,J)=DEF2(I,J)
      IF(DEF2(I,J).EQ.0)DEF2(I,J)=DEF1(I,J)
      GO TO 20
C
C     SET ERROR FLAG AND PRINT ERROR MESSAGES
   10 TEST=.TRUE.
      IF(J.EQ.3)WRITE(6,110)TYPE(I),IREG1,IREG2
      IF(J.EQ.5)WRITE(6,120)TYPE(I),IREG1,IREG2
      IF(J.EQ.6)WRITE(6,130)TYPE(I),IREG1,IREG2
      IF(J.EQ.7)WRITE(6,140)TYPE(I),IREG1,IREG2
      WRITE(6,100)
   20 CONTINUE
C
C     COMPUTE WEIGHTED AVERAGE
      DO 90 J=1,8
      DEF(I,J)=WF1*DEF1(I,J)+(1-WF1)*DEF2(I,J)
   90 CONTINUE
      RETURN
  100 FORMAT(/,10X,19HINVALID INPUT DATA.)
  110 FORMAT(/,10X,45HHEIGHT BELOW INFLORESENCE = 0 FOR PLANT TYPE ,
     1A4,10H IN REGION,I2,11H AND REGION,I2)
  120 FORMAT(/,10X,38HBASE STEM DIAMATER = 0 FOR PLANT TYPE ,
     1A4,10H IN REGION,I2,11H AND REGION,I2)
  130 FORMAT(/,10X,37HMID STEM DIAMATER = 0 FOR PLANT TYPE ,
     1A4,10H IN REGION,I2,11H AND REGION,I2)
  140 FORMAT(/,10X,37HTOP STEM DIAMATER = 0 FOR PLANT TYPE ,
     1A4,10H IN REGION,I2,11H AND REGION,I2)
      END SUBROUTINE WAVG


      FUNCTION HM0(WHI,DNEW,WPI)
C
C     THIS FUNCTION CONVERTS THE CONTROLLING WAVE HEIGHT, WHI
C     TO THE ZERO MOMENT WAVE HEIGHT, HM0.
C
      IF(WHI.EQ.0)HM0=0
      IF(WHI.EQ.0)RETURN
C
C               SET PRELIMINARY CONSTANTS OR FACTORS
C
      PI=3.1415926536
      G=32.2
C
      CRAV=((1.357E-3)*G)**.8557
C
      DNEWSTR = AMAX1( 0.01,DNEW )
      PI2     = 2. * PI
C
      HS=WHI/1.6
      NMAX= 25
      D0= 1.357E-3
      DC= 5.5722E-5
      C1LOG= ALOG10(2.0)
      C2LOG= .394528 * C1LOG
      C3LOG= 1.411296 * C1LOG
C
C               CP1= 1.0/1.016768
C
      CP1= .983508529
C
C               CP2= 1.0/1.411296
C
      CP2= .708568578
C
C               CP3= 10**(-1.0/1.0167683)
C
      CP3= .10387032
C
C               CP4= 10**(-1.0/1.411296)
C
      CP4= .195628183
C
C     DD=DNEW/(G*WPI**2)
      WL0=5.12*(WPI**2)
C     WLI=SQRT(2*PI*DNEW*WL0)/(1+1.25*DNEW/WL0)
      DD = DNEWSTR/(G*WPI*WPI)
      WL0 = AMAX1( WL0,0.1 )
      CDNEW = DNEWSTR/WL0
      WLI   = WL0 * SQRT( TANH( PI2*CDNEW ) )
C
      CL1= .008 * WLI
C
C               CL2= .016 * WLI
C
      CL2= 2. * CL1
      CL3= 1.25/WLI
C
C               EPSP= HS/(.002*4*WLI)
C
      EPSP= HS/CL1
C
C               CALC RAV AND PHIE
C
C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
      TMP1 = CRAV * (WPI**1.7114)
      TMP  = TMP1 / (DNEWSTR**.8557)
      RAV = 1.477 + .477 * (TMP - 1.0)
C
      IF(RAV.GT.1.7)RAV=1.7
      IF(RAV.LT.1)RAV=1
C
      PHIE= RAV
C
C               CALC DDP,PHIB,AKAPA,AKAPC
C
      DDP= DD/DC
      PART1= .9 + ( .42707*ALOG10(DDP) )
      PHIB= PART1 - C3LOG
      AKAPA= .2303028/(DDP**.302608)
      AKAPC= .170474016/ (DDP**.420026987)
C
C               CALC HM0E. THERE ARE 2 CASES
C
      IF( PHIB - PHIE ) 30 , 20 , 20
   20 CONTINUE
C
C               PHIB .GE. PHIE
C
      HM0E= (CL1/AKAPC) * (10**(-CP1*PHIE))
      GO TO 40
C
   30 CONTINUE
C
C               PHIB .LT. PHIE
C
      HM0E= (CL1/AKAPA) * (10**(-CP2*PHIE))
C
   40 CONTINUE
C
C               CALC. HSE
C
      HSE= PHIE * HM0E
C
C               SET PHID TO 1.0
C
      PHID= 1.0
C
C               CALC HM0D. THERE ARE 2 CASES
C
      IF( PHIB - 1.0 ) 60 , 50 , 50
   50 CONTINUE
C
C               PHIB .GE. 1.0
C
      HM0D= (CL1/AKAPC) * CP3
      GO TO 70
   60 CONTINUE
C
C               PHIB .LT. 1.0
C
      HM0D= (CL1/AKAPA) * CP4
C
   70 CONTINUE
C
C               CALC HSD
C
      HSD= HM0D
C
C               CALC HM0B AND HSB
C
      HM0B= CL2
      HSB= HM0B * PHIB
C
C               CALC HM0 AND EPP. THERE ARE 3 CASES.
C
      IF( HS .GE. HSD ) GO TO 220
      IF( HS .LE. HSE ) GO TO 230
C
C               IF WE GET HERE, HSE .LT. HS .LT. HSD. JUMP TO THAT
C               SECTION
C
      GO TO 240
C
  220 CONTINUE
C
C               CASE 1--HS .GE. HSD. CALC HM0 AND EPP.
C
      HM0= HS
      EPP= HM0/CL1
      GO TO 320
C
  230 CONTINUE
C
C               CASE 2--HS .LE. HSE. CALC HM0 AND EPP
C
      HM0=HS/PHIE
      EPP= HM0/CL1
      GO TO 320
C
  240 CONTINUE
C
C               CASE 3--HSE .LT. HS .LT. HSD.  CALC HM0 AND EPP. THERE
C               ARE 3 SUBCASES.
C
      IF( HSB - HS ) 80 , 140 , 150
   80 CONTINUE
C
C               SUBCASE 1--HSB .LT. HS
C
C               CALC RATSTAR. THERE ARE 2 SUB-SUB-CASES.
C
      IF( PHIB - PHIE ) 90 , 100 , 100
   90 CONTINUE
C
C               SUB-SUB-CASE 1--PHIB .LT. PHIE
C
      RATSTAR= ( HM0B - HM0D )/( HSB - HSD )
      GO TO 110
C
  100 CONTINUE
C
C               SUB-SUB-CASE 2--PHIB .GE. PHIE
C
      RATSTAR= ( HM0E - HM0D )/( HSE - HSD )
  110 CONTINUE
C
C               USING RATSTAR, CALC INITIAL APPROX TO HM0, I.E.
C               HM0INIT
C
      HM0INIT= HM0D + ( RATSTAR * ( HS - HSD ) )
C
C               CALC INITIAL APPROX TO EPP, I.E. EPPINIT
C
      EPPINIT= HM0INIT/CL1
C
C               INITIALIZE VARIABLES BEFORE NEWTON ITERATION WHICH
C               CALCULATES EPP.
C
      EPPN= EPPINIT
C
C               BEGIN ITERATION
C
      DO 120 N = 1 , NMAX
C
      PHIC= -1.016768 * ALOG10( AKAPC*EPPN )
      QC= (EPPN*PHIC) - EPSP
      DERIVQC= PHIC - .441576731
      DELEPPN= -QC/DERIVQC
      EPPNP1= EPPN + DELEPPN
C
C               CHECK AND SEE OF CONVERGENCE ACHIEVED.
C
      IF( ABS(DELEPPN) .LT. CL3 ) GO TO 130
C
C               CONVERGENCE NOT ACHIEVED. RESET EPPN AND TRY AGAIN.
C
      EPPN= EPPNP1
  120 CONTINUE
C
C               END OF ITERATION LOOP. IF WE GET HERE, CONVERGENCE
C               NOT ACHIEVED. USE LATEST VALUE OF EPPNP1.
C
  130 CONTINUE
C
C               IF WE JUMP HERE OUT OF ITERATION LOOP, THEN CONVERGENCE
C               HAS BEEN ACHIEVED.
C
C               SET EPP AND HM0
C
      EPP= EPPNP1
      HM0= CL1 * EPP
C
C               END OF CALC OF HM0 AND EPP FOR SUB-CASE HSB .LT. HS.
C
      GO TO 310
C
  140 CONTINUE
C
C               HSB=HS SUB-CASE
C
C               CALC HM0 AND EPP BY DEFINING RELATIONSHIPS FOR THIS
C               SUB-CASE
C
      HM0= CL2
      EPP= 2.0
C
C               END OF CALC OF HM0 FOR HSB=HS SUB-CASE
C
      GO TO 310
C
  150 CONTINUE
C
C               HSB .GT. HS SUB-CASE
C
C               CALC RATSTAR. THERE ARE 2 SUB-SUB-CASES.
C
      IF( PHIB - PHID ) 160 , 160 , 170
  160 CONTINUE
C
C               PHIB .LE. PHID SUB-SUB-CASE
C
      RATSTAR= ( HM0D - HM0E )/( HSD - HSE )
      GO TO 180
C
  170 CONTINUE
C
C               PHIB .GT. PHID SUB-SUB-CASE
C
       RATSTAR= ( HM0B - HM0E )/( HSB - HSE )
 180    CONTINUE
C
C               USING RATSTAR, CALC INITIAL APPROX TO HM0, I.E.
C               HM0INIT
C
        HM0INIT= HM0E + ( RATSTAR * ( HS - HSE ) )
C
C               CALC INITIAL APPROX TO EPP, I.E. EPPINIT
C
        EPPINIT= HM0INIT/CL1
C
C               INITIALIZE VARIABLES BEFORE NEWTON ITERATION WHICH
C               CALCULATES EPP.
C
        EPPN= EPPINIT
C
C               BEGIN ITERATION
C
        DO 190 N = 1 , NMAX
C
        PHIA= -1.411296 * ALOG10( AKAPA*EPPN )
        QA= (EPPN*PHIA) - EPSP
        DERIVQA= PHIA - .612918065
        DELEPPN= -QA/DERIVQA
        EPPNP1= EPPN + DELEPPN
C
C               CHECK AND SEE OF CONVERGENCE ACHIEVED.
C
        IF( ABS(DELEPPN) .LT. CL3 ) GO TO 300
C
C               CONVERGENCE NOT ACHIEVED. RESET EPPN AND TRY AGAIN.
C
        EPPN= EPPNP1
 190    CONTINUE
C
C               END OF ITERATION LOOP. IF WE GET HERE, CONVERGENCE
C               NOT ACHIEVED. USE LATEST VALUE OF EPPNP1.
C
 300    CONTINUE
C
C               IF WE JUMP HERE OUT OF ITERATION LOOP, THEN CONVERGENCE
C               HAS BEEN ACHIEVED.
C
C               SET EPP AND HM0
C
        EPP= EPPNP1
        HM0= CL1 * EPP
C
C               END OF CALC OF HM0 AND EPP FOR SUB-CASE HSB .GT. HS.
C
 310    CONTINUE
C
C               END OF CALC OF HM0 AND EPP FOR CASE
C               HSE .LT. HS .LT. HSD
C
 320    CONTINUE
C
C               END OF CALC OF HM0 AND EPP
        RETURN
        END FUNCTION HM0


      SUBROUTINE LOOKUP(DEF,REG,TEST)
C
C THIS SUBROUTINE BELONGS TO WHAFIS2.F77
C
C MODIFIED ON MAY 1985, BY AMIR RAZAVI PER RKC REQUEST.
C
C MODIFICATION WAS MADE TO MATCH W2.F77 OPERATION.
C
C THE COMMON STRUCTURE FOR /PP/ AND /PPT/ HAS ADDITIONAL VARIABLES IN
C W2 PROGRAM.  THOSE VARIABLES ARE NOT USED IN WHAFIS2.F77 AND THEREFORE
C THE COMMON AREAS ARE NOT MODIFIED.
C
C THE MODIFIED LINES HAVE A "CAHR" AT THE BEGINING.
C THE ADDED BLOCKS ARE IDENTIFIED BY "CAHR START" AND "CAHR END"
C
      LOGICAL TEST,TEST1,TEST2
C     THIS SUBROUTINE LOOKS UP DEFAULT MARSH GRASS PLANT PARAMETERS
C     FOR A GIVEN REGION AND PLANT TYPE
      DIMENSION CDE(10),FCOV(10),HBI(10),PPSF(10),SDB(10),
     1SDM(10),SDT(10),TYPE(10),FAR(10),DEF(10,8)
      DIMENSION HDN(8,8,7),PPSD(8,3),PLTYP(8)
      DIMENSION ITYP(10)
      COMMON /PP/NPLTS,TYPE,CDE,FCOV,HBI,PPSF,SDB,SDM,SDT,FAR
      COMMON /PPT/HDN,PPSD,PLTYP
      IREG=REG
C
C     SET DEFAULT VALUES FOR EACH PLANT TYPE
      TEST1=.FALSE.
C
C AHR START
        FCOVCUM=0.0
C AHR END
C
      DO 230 I1=1,NPLTS
C
C     INITIALIZE ARRAY DEF
      DEF(I1,1)=CDE(I1)
      DEF(I1,2)=FCOV(I1)
      DEF(I1,3)=HBI(I1)
      DEF(I1,4)=PPSF(I1)
      DEF(I1,5)=SDB(I1)
      DEF(I1,6)=SDM(I1)
      DEF(I1,7)=SDT(I1)
      DEF(I1,8)=FAR(I1)
C
C     INITIALIZE ERROR FLAG
      TEST2=.FALSE.
C
C     IF FCOV=0 REVISE DEFAULT
C AHR START
C       IF(COV(I1).EQ.0)TEST1=.TRUE.
C
      IF(FCOV(I1)) 1000, 1010, 1020
C
 1000 CONTINUE
C
C               FCOV(I) IS NEGATIVE. SET ERROR FLAG AND PRINT
C               MESSAGE.
C
      TEST2=.TRUE.
C  (DD, 12/06) I1 IN THE FOLLOWING LINE WAS PREVIOUSLY CODED AS I
      WRITE(6,1005)I1
 1005 FORMAT(/10X,'FCOV WAS FOUND TO BE NEGATIVE FOR PLANT TYPE= ',
     1  I2)
      GOTO 1030
C
 1010 CONTINUE
C
C               FCOV=0. USE DEFAULT FCOV FOR THIS PLANT TYPE.
C
      TEST1=.TRUE.
      NCOV=NCOV+1
      GOTO 1030
C
 1020 CONTINUE
C
C               FCOV IS GREATER THAN ZERO
C
      FCOVCUM=FCOVCUM+FCOV(I1)
C
 1030 CONTINUE
C
C       CHECK AND SEE IF PLANT TYPE I1 IS MARSH GRASS. IF IT IS,
C               CONTINUE ON. IF IT IS NOT, JUMP TO LABEL 225, IE.
C               RIGHT ABOVE END OF LOOP.
C
      DO 1040 I2=1,8
      IF(TYPE(I1).EQ.PLTYP(I2)) GOTO 1050
 1040 CONTINUE
C
C               IF WE GET HERE PLANT TYPE IS NOT MARSH GRASS. JUMP TO
C               END OF LOOP.
C
      GOTO 225
C
 1050 CONTINUE
C
C       IF WE GET HERE, PLANT TYPE IS MARSH GRASS. CONTINUE ON.
C
C       NEXT LINE IS FOR DIAGNOSTIC PURPOSES.
C       WRITE(6,1060)
C1060   FORMAT(1X/1X,"PLANT TYPE IS RECOGNIZED AS MARSH GRASS",/)
C
C AHR END
C
C AHR  IF(FCOV(I1).EQ.0)TEST1=.TRUE.
C
C     IF CDE=0 REVISE DEFAULT
      IF(CDE(I1).EQ.0)DEF(I1,1)=.1
C
C     RELATE PLANT TYPE TO ARRAY INDEX
      ITYP(I1)=9
      DO 20 I2=1,8
      IF(TYPE(I1).EQ.PLTYP(I2))ITYP(I1)=I2
   20 CONTINUE
C
C     IF SDB=0 REVISE DEFAULT
      IF(SDB(I1).NE.0)GO TO 120
      IF(ITYP(I1).LT.9.AND.REG.NE.0)GO TO 90
      TEST2=.TRUE.
      GO TO 120
   90 IF(HBI(I1).NE.0)GO TO 100
      DEF(I1,5)=HDN(IREG,ITYP(I1),2)
      GO TO 120
  100 A=HDN(IREG,ITYP(I1),3)
      B=HDN(IREG,ITYP(I1),4)
      DEF(I1,5)=A*HBI(I1)**B
  120 CONTINUE
C
C     IF PPSF=0 REVISE DEFAULT
      IF(PPSF(I1).NE.0)GO TO 150
      IF(ITYP(I1).LT.9.AND.REG.NE.0)GO TO 130
      TEST2=.TRUE.
      GO TO 150
  130 IF(HBI(I1).NE.0)GO TO 140
      DEF(I1,4)=HDN(IREG,ITYP(I1),5)
      GO TO 150
  140 A=HDN(IREG,ITYP(I1),6)
      B=HDN(IREG,ITYP(I1),7)
      DEF(I1,4)=A*HBI(I1)**B
  150 CONTINUE
C
C     IF HBI=0 REVISE DEFAULT
      IF(HBI(I1).NE.0)GO TO 160
      IF(ITYP(I1).LT.9.AND.REG.NE.0)GO TO 155
      TEST2=.TRUE.
      GO TO 160
  155 DEF(I1,3)=HDN(IREG,ITYP(I1),1)
  160 CONTINUE
C
C     IF SDM=0 REVISE DEFAULT
      IF(SDM(I1).NE.0)GO TO 180
      IF(ITYP(I1).LT.9)GO TO 170
      TEST2=.TRUE.
      GO TO 180
  170 DEF(I1,6)=DEF(I1,5)*PPSD(ITYP(I1),1)
  180 CONTINUE
C
C     IF SDT=0 REVISE DEFAULT
      IF(SDT(I1).NE.0)GO TO 200
      IF(ITYP(I1).LT.9)GO TO 190
      TEST2=.TRUE.
      GO TO 200
  190 DEF(I1,7)=DEF(I1,5)*PPSD(ITYP(I1),2)
  200 CONTINUE
C
C     IF FAR=0 REVISE DEFAULT
      IF(FAR(I1).NE.0)GO TO 220
      IF(ITYP(I1).LT.9)GO TO 210
      TEST2=.TRUE.
      GO TO 220
  210 DEF(I1,8)=PPSD(ITYP(I1),3)
  220 CONTINUE
C AHR START
  225 CONTINUE
C AHR END
C
C     PRINT ERROR MESSAGE IF REQUIRED
      IF(TEST2)WRITE(6,500)TYPE(I1),IREG
C
C     SET ERROR FLAG IF REQUIRED
      IF(TEST2)TEST=.TRUE.
C
C     CLOSE OFF MAIN DO LOOP
  230 CONTINUE
C
C     REVISE FCOV IF REQUIRED AND RETURN
C AHR IF(.NOT.TEST1)GO TO 250
      IF(.NOT.TEST1)GO TO 270
C AHR START
C
C       IF WE GET HERE, NCOV SHOULD BE GREATER THAN ZERO.
C       TEST AND MAKE SURE.
C
      IF(NCOV.GT.0)GOTO 2010
C
      WRITE(6,2000)
 2000 FORMAT(/10X,'NCOV IS .LE. ZERO IN SUB. LOOKUP WHEN IT SHOULD'
     1' BE .GT. ZERO. ABORT RUN.')
      STOP
C
 2010 CONTINUE
      IF(FCOVCUM.GT.0.0)GOTO 250
C
C       IF WE GET HERE, ALL PLANTS USE DEFAULT FCOV VALUE.
C
      FCOVFLT=1.0/FLOAT(NPLTS)
C
C AHR END
      DO 240 I2=1,NPLTS
C AHR  DEF(I2,2)=1/FLOAT(NPLTS)
      DEF(I2,2)=FCOVFLT
  240 CONTINUE
C AHR START
C
      GOTO 270
  250 CONTINUE
C
C               AT LEAST ONE PLANT SPECIES DOES NOT HAVE A DEFAULT
C               FCOV VALUE. WE ASSUME MULTIPLE COVERGE SO THAT SUM
C               OF FCOV FOR SPECIES WITH DEFAULT IS 1.0
C
      FCOVFLT=1.0/FLOAT(NCOV)
C
      DO 260 I2=1, NPLTS
      IF(FCOV(I2).EQ.0.0)DEF(I2,2)=FCOVFLT
  260 CONTINUE
  270 CONTINUE
C
C AHR END

C AHR 250 RETURN
  500 FORMAT(/,10X,41HNO DEFAULT DATA AVAILABLE FOR PLANT TYPE ,A4,
     110H IN REGION,I2)
      END SUBROUTINE LOOKUP


C****************************************************************
        SUBROUTINE SCANE
C****************************************************************
C   THIS SUBROUTINE IS CALLED AT THE BEGINNING OF THE MAIN PROGRAM
C   TO PERFORM THE STILLWATER ELEVATION INTERPOLATION.
C
C   THE INTERPOLATION SCHEME IS PERFORMED WITHIN A TRANSECT SEGMENT
C   DEFINED AS THE STATIONING INTERVAL OF STILLWATER ELEVATION CHANGES.
C   THE STILLWATER ELEVATIONS IN THE SEGMENT ARE LINEAR INTERPOLATED
C   USING TWO GIVEN SURGES AT THE BEGINNING AND THE END OF A SEGMENT.
C
C   THE LINEAR INTERPOLATED VALUES AT EACH STATION WITHIN THIS SEGMENT
C   ARE THEN COMPARED WITH THE CORRESPONDING GROUND ELEVATIONS. IF THE
C   INTERPOLATED ELEVATIONS ARE ABOVE THE CORRESPONDING GROUND
C   ELEVATIONS (I.E., NO GROUND CUT OFF), THE INTERPOLATED VALUES
C   ARE USED AS THE STILLWATER ELEVATIONS FOR THE COMPUTATION OF
C   THE WAVE HEIGHT.
C   OTHERWISE, THE STILLWATER ELEVATIONS WILL BE DETERMINED BY
C   THE CONCEPT SIMILAR TO THE "FLOW OVER A BARRIER" ALGORITHM USED
C   IN THE FEMA'S SURGE MODEL.
C
C   AT THE END OF THIS SUBROUTINE, THE AVG. BOTTOM SLOPE AT EACH STATION
C   IS COMPUTED AND STORED IN THE NINETH PARAMETER, I.E., IN PARAM(J,9).
C   THE BOTTOM SLOPE WAS ORIGINALLY DESIGNED TO BE USED IN THE SETTING
C   THE BREAKING VALUE OF THE FEMA'S CONTROLLING MAIN HEIGHT IN
C   SUBROUTINE SHBM. AT PRESENT, THE DEPENDENCE OF THE BREAKING WAVE
C   HEIGHT ON BOTTOM SLOPE IS NOT BEING USED BY FEMA. THEREFORE THE
C   AT PRESENT, THE BOTTOM SLOPE IS NOT BEING USED IN WHAFIS.
C
C*******************************************************************
C

      USE FIVEHUNDRED
      LOGICAL TEST,TEST1
      CHARACTER(LEN=80) :: TITLE2
      CHARACTER(LEN=2) :: TOFF
      CHARACTER(LEN=2) :: TOF(1000)
      DIMENSION PARAM(1000,10),SGOLD(1000),
     1SGNEW(1000),JM(2),ELMX(2)
      COMMON /WINDXX/WINDIF,WINDOF,WINDVH
      COMMON /WINDDF/WWNDIF,WWNDOF,WWNDVH
C
C     DATA EI,DU,BU,VE,FI,FO,ET/ 'IE','DU','BU','VE','IF','OF','ET'/
C     DATA CM,PS/ 'CM', 'PS'/
      DATA AS,VH,GM,BLANK/ 'AS','VH','MG',' '/
      DATA WIF100,WOF100,WVH100/60.0, 80.0, 60.0/
      DATA WIF500,WOF500,WVH500/75.0, 100.0, 75.0/
      INTEGER :: LINECOUNT
C
      NPLTS=0
      NVH=0
      NVH1=0
      NVH2=0
      REWIND 5
C
    1 READ(5,'(a80)') TITLE2
C
      TEST = .FALSE.
      IF (LEN_TRIM(TITLE2).EQ.0) TEST = .TRUE.
      TEST1=.TRUE.
C
      IF(TEST) THEN
        WRITE(10,805) BLANK
        REWIND 10
        RETURN
      ENDIF

C     SET THE DEFAULT WIND SPEEDS FOR 100 AND 500 YEAR CONDITIONS
      WWNDIF = WIF100
      WWNDOF = WOF100
      WWNDVH = WVH100
      CODE500 = TITLE2(1:5)
      CASE500 = .FALSE.
      IF (CODE500 == ':500:') THEN
        CASE500 = .TRUE.
        WWNDIF = WIF500
        WWNDOF = WOF500
        WWNDVH = WVH500
      END IF
C
C**   CHECK IF THE FIRST CARD IS EI CARD
C
      READ(5,810) TOF(1),(PARAM(1,I),I=1,10)
      WINDIF=PARAM(1,8)
      WINDOF=PARAM(1,9)
      WINDVH=PARAM(1,10)
      IF (WINDIF.EQ.0.0) WINDIF=WWNDIF
      IF (WINDOF.EQ.0.0) WINDOF=WWNDOF
      IF (WINDVH.EQ.0.0) WINDVH=WWNDVH
      NB=1
      IF(TOF(1). NE. 'IE') THEN
        WRITE(6,820)
  820   FORMAT(10X,'  THE FIRST CARD IS NOT AN IE CARD, THIS'
     A  ' TRANSECT IS ABORTED.  CONTINUED TO NEXT TRANSECT'/)
        DO 3 J=1,1000
        READ(5,810) TOF(J)
        IF(TOF(J).EQ.'ET') GO TO 1
    3   CONTINUE
      ENDIF
C
C**   GIVING INITIAL STATIONING BFO, BED ELEVATION BEL, AND 100-YEAR
C**   ELEVATION BSEN,
C
      BFO=PARAM(1,1)
      BEL=PARAM(1,2)
      BSEN=PARAM(1,5)
      SGOLD(1)=BSEN
      SGNEW(1)=BSEN
C
C**   CHECK IF BED ELEVATION BEL IS GREATER THAN 100-YEAR ELEVATION
C**   BSEN ON EI CARD
C
      IF(BEL. GT. BSEN) THEN
        WRITE(6,780)
  780   FORMAT(5X,'GROUND ELEVATION GREATER THAN STILLWATER ELEVATION '
     A  'ON THE IE CARD. JOB DUMPED.'/)
        DO 4 J=1,1000
        READ(5,810) TOF(J)
        IF(TOF(J).EQ.'ET') GO TO 1
    4   CONTINUE
      ENDIF
C
C*********   START SCANNING 100-YR ELE. CHANGES   ********
C
C**  ASSUMING THE CURRENT STATION IS THE END STATION OF THE
C**  INTERPOLATION SEGMENT
C
C**  FIRST READ INPUT FROM UNIT N5
C
      CMCOUNT = 0
      PSCOUNT = 0
      NFO=1
      LINECOUNT = 2   ! TITLE AND IE LINES HAVE ALREADY BEEN READ BEFORE THIS POINT
    5 NFO = NFO + 1
      READ(5,'(a2, a78)') TOFF, CMSTRING
      LINECOUNT = LINECOUNT + 1
      IF(TOFF.EQ.'CM') THEN
        CMCOUNT = CMCOUNT + 1
        CMLINE(CMCOUNT) = CMSTRING
        NFO = NFO - 1
        GO TO 5
      ELSE IF(TOFF.EQ.'PS') THEN
        PSCOUNT = PSCOUNT + 1
        PSLINE(PSCOUNT) = CMSTRING
        NFO = NFO - 1
        GO TO 5
      ELSE
        READ(CMSTRING,8102) (PARAM(NFO,I),I=1,10)
        TOF(NFO) = TOFF
      END IF
C
C**   SET END SEGMENT STATIONING EFO AND CORRESPONDING BED ELEVATION
C**   EEL
C
      EFO=PARAM(NFO,1)
      EEL=PARAM(NFO,2)
C
C**   BRANCH TO VARIOUS PROGRAM SEGMENT ACCORDING TO CARD TYPE & SET
C**   THE READ IN 100-YEAR STILLWATER ELEVATION ESEN
C
      IF(TOF(NFO).EQ.'DU') GO TO  50
      IF(TOF(NFO).EQ.'BU') GO TO 100
      IF(TOF(NFO).EQ.'VE'. OR. TOF(NFO).EQ.'VH') GO TO 150
      IF(TOF(NFO).EQ.'IF'. OR. TOF(NFO).EQ.'OF') GO TO 200
      IF(TOF(NFO).EQ.'AS') GO TO 250
      IF(TOF(NFO).EQ.'ET') THEN
        NE=NFO
        GO TO 400
      ENDIF
C
C**  DUNE (DU) CARD
C
   50 ESEN=PARAM(NFO,5)
      GO TO 350
C
C**  BUILDING (BU) CARD
C
  100 ESEN=PARAM(NFO,6)
      GO TO 350
C
C** VEGETATION (VE) OR MARSH GRASH (VH) CARD
C
  150 ESEN=PARAM(NFO,8)
C
      IF(TOF(NFO).EQ.'VE') GO TO 350
C
C* FOR VH CARD, READ NPLTS TIMES OF MG CARDS
C
      HIGH=AMAX1(BSEN,ESEN)
      IF(EEL. GT. HIGH)  THEN
        WRITE(6,781) EFO,TOF(NFO)
      ENDIF
C
      SGOLD(NFO)=ESEN
      SGNEW(NFO)=ESEN
C
      IF(ESEN.EQ.0.) THEN
        SGOLD(NFO)=SGOLD(NFO-1)
        SGNEW(NFO)=SGOLD(NFO)
      ENDIF
C
      KPLTS=NPLTS
C
      NPLTS=PARAM(NFO,6)
      DO 155 I=1,NPLTS
  154 READ(5,8101) TOFF, CMSTRING
      LINECOUNT = LINECOUNT + 1
      IF (TOFF.EQ.'CM') THEN
        CMCOUNT = CMCOUNT + 1
        CMLINE(CMCOUNT) = CMSTRING
        GO TO 154
      ELSE IF(TOFF.EQ.'PS') THEN
        PSCOUNT = PSCOUNT + 1
        PSLINE(PSCOUNT) = CMSTRING
        GO TO 154
      END IF
      NFO = NFO + 1
      READ(CMSTRING,561) (PARAM(NFO,K),K=1,10)
      TOF(NFO) = TOFF
      SGOLD(NFO)=SGOLD(NFO-1)
      SGNEW(NFO)=SGOLD(NFO)
  155 CONTINUE
C
      IF(ESEN.NE.0.) THEN
        NVH=1
        NE=NFO-NPLTS   ! THE VH CARD NUMBER
C
        IF(NE. EQ. 2) THEN
          NVH1=NE
          GO TO 400
        ENDIF
C
      ENDIF
C
      IF(NVH. EQ. 1) THEN
        NVH=0
        NVH2=NFO-NPLTS-KPLTS
C
        IF(NVH2. EQ. NVH1+1) THEN
          NVH1=NE
          GO TO 400
        ENDIF
C
        NVH1=NE
C
      ENDIF
C
      IF(ESEN.EQ.0.) GO TO 5
      GO TO 351
C
C**  INLAND FETCH (IF) OR OVER-WATER FETCH (OF) CARD
C
  200 ESEN=PARAM(NFO,4)
      GO TO 350
C
C**  ABOVE SURGE (AS) CARD
C
  250 ESEN=PARAM(NFO,4)
C
C  FOR AS CARD RESET BEGINNING SEGMENT COUNTER
C
      NE=NFO
C
C**  AND RESET 100-YR ELEVATION
C
      IF(ESEN.EQ.0.) THEN
         SGOLD(NFO)=SGOLD(NFO-1)
         SGNEW(NFO)=SGOLD(NFO)
      ELSE
         SGOLD(NFO)=ESEN
         SGNEW(NFO)=ESEN
      ENDIF
      GO TO 400
C
C****************************************************
C**   SCANNING FOR 100-YR STILLWATER ELEVATION CHANGES   *
C****************************************************
C
C**   FIRST CHECK WHETHER THE GROUND ELEVATION IS GREATER THAN
C**   THE STILLWATER ELEVATION.  IF IT IS, THEN FLAG THE MESSAGE.
C
  350 CONTINUE
      HIGH=AMAX1(BSEN,ESEN)
      IF(EEL. GT. HIGH)  THEN
C
C   CLARIFY THE INFORMATIONAL MESSAGE BELOW SO THAT
C   IT CANNOT BE MISINTERPRETED.
C
      WRITE(6,781) EFO,TOF(NFO)
  781 FORMAT(10X,'****  THE STILLWATER ELEVATION (BEFORE',
     1     ' INTERPOLATION) AT',
     A     '  STATION=',F8.0,' ,  WHICH IS ON AN ',A2,' CARD,'/,
     B 10X,' IS LESS THAN THE GROUND ELEVATION.'/
     C 10X,'THE INTERPOLATION PROCESS WAS CONTINUED.'/)
C
      WRITE( 6,1000 )
 1000 FORMAT( 10X, 'THIS IS ',
     1   'A WARNING (I.E. INFORMATIONAL) MESSAGE ONLY.'/
     2   10X,'NO ERROR WAS FOUND BUT THE INPUT LOOKS SUSPICIOUS.'//
     D    5X,'***  PLEASE DOUBLE-CHECK THE STILLWATER AND GROUND',
     E       ' ELEVATIONS IN THE VICINITY OF THIS STATION',
     F       ' !!!!!!'//)
C
      END IF
C
C**   SECOND,  IF THERE IS NO STILLWATER ELEVATION CHANGE, GO TO 5 TO
C**            READ NEXT CARD.
C**            IF THE STILLWATER ELEVATION CHANGES, DO INTERPOLATION
C
      SGOLD(NFO)=ESEN
      SGNEW(NFO)=ESEN
      IF(ESEN.EQ.0.) THEN
        SGOLD(NFO)=SGOLD(NFO-1)
        SGNEW(NFO)=SGOLD(NFO)
        GO TO 5
      ENDIF
C
C******************************************
C**  PREPARING FOR LINEAR INTERPOLATION   *
C******************************************
C
      NE=NFO
  351 DX=EFO-BFO
      DSG=ESEN-BSEN
      DDSG=DSG/DX
C
C****************************
C**  LINEAR  INTERPOLATION  *
C****************************
C
      NME=NE-1
      NMB=NB+1
C
      IF(NME. LT. NMB) GO TO 400
C
      DO 360 J=NMB,NME
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=SGOLD(J)+DDSG*(PARAM(J,1)-BFO)
      ENDIF
  360 CONTINUE
C
C** CHECK IF THE LINEAR INTERPOLATION LINE CUT OFF ANY
C** HIGH GROUND BED ELEVATION BELOW FOR STATIONS
C** BETWEEN  NB  AND  NE
C
      NK=0
      ELMX(1)=0.
      ELMX(2)=0.
      TEST1=.TRUE.
C
      DO 370 J=NMB,NME
C
      IF(TOF(J). EQ. 'MG') GO TO 370
      IF(SGNEW(J). GE. PARAM(J,2)) GO TO 365
C
      IF(TEST1) THEN
        NK=NK+1
        TEST1=.FALSE.
      ENDIF
C
C*  IF THE INTERPOLATION LINE CUTS MORE THAN TWO PORTIONS OF
C*  HIGH GROUND RIDGE, STOP THIS TRANSECT, GO TO NEXT TRANSECT
C
      IF(NK. GT. 2) THEN
        IF (CASE500) THEN
          WRITE(6,8991)
        ELSE
          WRITE(6,899)
        END IF
  899   FORMAT(10X,'INTERPOLATION LINE CUTS OFF MORE THAN',
     A    ' TWO PORTIONS OF HIGH GROUND RIDGE'//,
     B   10X,'THIS TRANSECT IS ABORTED, RE-ASSIGN 100-YR ',
     C       'ELEVATIONS AT HIGH GROUND STATIONS'///)
 8991   FORMAT(10X,'INTERPOLATION LINE CUTS OFF MORE THAN',
     A    ' TWO PORTIONS OF HIGH GROUND RIDGE'//,
     B   10X,'THIS TRANSECT IS ABORTED, RE-ASSIGN 500-YR ',
     C       'ELEVATIONS AT HIGH GROUND STATIONS'///)
        DO 363  I = 1, 1000
        READ(5,810) TOF(I)
        IF(TOF(I). EQ. 'ET') GO TO 1
  363   CONTINUE
      END IF
C
      IF(PARAM(J,2). GE. ELMX(NK)) THEN
        ELMX(NK)=PARAM(J,2)
        JM(NK)=J
      ENDIF
      GO TO 370
C
  365 TEST1=.TRUE.
C
  370 CONTINUE
C
C**  IF THERE IS NO CUT OFF FROM INTERPOLATION LINE THEN
C**  GO TO WRITE TO SCRATCH FILE SEGMENT
C
      IF(NK. EQ. 0) GO TO 400
C
C**  IF THE 100-YR ELE. AT STATION NE IS GREATER THAN THE
C**  100-YR ELE. AT STATION NB, THEN BRANCH TO 600
C
      IF(DSG. GT. 0.) GO TO 600
C
C**  THE FOLLOWING SEGMENT FOR THE CASE THAT THE 100-YR ELE. AT
C**  STATION NE IS LESS THAN OR EQUAL TO THE 100-YR ELE. AT
C**  STATION NB.
C
      IF(NK. EQ. 1) GO TO 380
C
C**  IF THE HIGHEST GROUND ELEVATIONS OF THE SECOND HUMP IS LOWER
C**  THAN THE FIRST HIGHEST HUMP GROUND ELEVATION, THEN BRANCH TO
C**  STATEMENT 390
C
      IF(PARAM(JM(2),2). LT. PARAM(JM(1),2)) GO TO 390
      JM(1)=JM(2)
C
C** RESET 100-YR ELE. TO BE THE SAME AS BSEN, THE ELE. AT
C** THE BEGINING OF THIS INTERPOLATION SEGMENT
C
C** FOR STATIONS FROM NMB TO THE HIGHEST BED STATION, JM(1)
C
  380 DO 373 J=NMB,JM(1)
      SGNEW(J)=BSEN
      IF(TOF(J). EQ. 'MG') GO TO 373
C
C**  IF THE NEW STILLWATER ELEVATION IS STILL LESS THEN THE BED
C**  ELEVATION, ABORT THIS TRANSECT, GIVING ERROR MESSAGE.
C
      IF(SGNEW(J).GE.PARAM(J,2)) GO TO 373
      WRITE(6,782) PARAM(J,1),TOF(J)
  782 FORMAT(//10X,'****  UNREASONABLE HIGH GROUND ELEVATION',
     A   ' AT STATION (',F8.2,' ) WHICH IS ',A2,' CARD.'/,10X,
     B   'THIS TRANSECT IS ABORTED, CONTINUED TO NEXT TRANSECT'//,
     C    10X,'***  DOUBLE-CHECK THE STILLWATER AND GROUND ELEVATIONS',
     D        ' IN THE VICINITY OF THIS STATION.  IF THE GROUND'/,
     E    15X,' ELEVATIONS ARE CORRECT, EITHER ASSIGN A HIGHER',
     F        ' STILLWATER ELEVATION OR USE AS CARDS !!!!'//)
C
C  The following line may be needed, but was not in WHAFIS3 -- add if found necessary
C  783 CONTINUE ! 783 is added so we can jump out of the DO 393 Loop after printing error message
      DO 371 KK=1,1000
      READ(5,810) TOF(KK)
      IF(TOF(KK).EQ.'ET') GO TO 1
  371 CONTINUE
C
  373 CONTINUE
C
C**  FOR THE REST STATIONS AFTER JM(1) TO THE END STATION OF
C**  THIS SEGMENT, THE 100-YR ELE. WILL BE THE BED ELEVATION,
C**  PARAM(J,2), PLUS THE WATER DEPTH, D, SITTING ON THE HIGHEST
C**  BED ELEVATION STATION
C**  UNTIL THE 100-YR ELE. AT THE END STATION OF THIS SEGMENT
C**  IS MET
C
      D=SGNEW(JM(1))-PARAM(JM(1),2)
      JMB=JM(1)+1
C
      DO 375 J=JMB,NME
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=AMAX1(PARAM(J,2)+D,ESEN)
      ENDIF
  375 CONTINUE
C
      GO TO 400
C
  390 CONTINUE
C
C**  THE FOLLOWING PROGRAM SEGMENT IS FOR THE CASE THAT THE
C**  INTERPOLATION LINE CUTS BED ELEVATIONS TWO PORTIONS IN
C**  THIS TRANSECT SEGMENT, AND THE HIGHER BED ELEVATION
C**  STATION IS BEFORE THE OTHER ONE, I.E., THE BED ELE. AT
C**  JM(1) IS GREATER THAN THE BED ELE. AT JM(2)
C
C**  FIRST RESET THE 100-YR ELE. FOR STATIONS BEFORE JM(1)
C
      DO 393 J=NMB,JM(1)
      SGNEW(J)=BSEN
      IF(SGNEW(J).GE.PARAM(J,2)) GO TO 393
      WRITE(6,782) PARAM(J,1),TOF(J)
C  The following line may be needed, but was not in WHAFIS3 -- add if found necessary
C      GO TO 783 ! After writing the error message, skip to the next transect
  393 CONTINUE
C
C**  THEN LINEAR INTERPOLATION 100-YR ELE. FROM JM(1)+1 TO
C**  THE END STATION, NE, OF THIS INTERPOLATION SEGMENT
C
      D=SGNEW(JM(1))-PARAM(JM(1),2)
      DX=EFO-PARAM(JM(1),1)
      DDSG=(ESEN-BSEN)/DX
C
      JMB=JM(1)+1
      DO 395 J=JMB, NME
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=SGOLD(J)+DDSG*(PARAM(J,1)-PARAM(JM(1),1))
      ENDIF
  395 CONTINUE
C
C**  SET THE 100-YR ELE. AT STATIONS BETWEEN STATION JM(1)
C**  AND NE AS THE MAXIMUM OF: SECOND INTERPOLATION VALUE,
C**  THE BED ELEVATIONS PLUS THE WATER DEPTH AT JM(1),
C**  AND THE 100-YR ELE. AT THE END STATION OF THIS SEGMENT
C
      DO 397 J=JMB,NME
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=AMAX1(SGNEW(J),PARAM(J,2)+D,ESEN)
      ENDIF
  397 CONTINUE
C
      GO TO 400
C
C**********  END OF INTERPOLATION FOR DSG IS LESS THAN ZERO CASE
C
  600 CONTINUE
C
C***  THE FOLLOWING PROGRAM SEGMENT IS FOR THE CASE OF 100-YR ELE.
C***  AT NE IS GREATER THAN THE 100-YR ELE. AT NB.  AND THERE IS AT
C***  LEAST ONE CUT OFF PORTION FROM THE LINEAR INTERPOLATION LINE.
C
      IF(NK. EQ. 1) GO TO 605
C
      IF(PARAM(JM(1),2). LT. PARAM(JM(2),2)) GO TO 620
C
  605 CONTINUE
C
C**  RESET 100-YR ELE. TO BE THE SAME AS ESEN, THE ELE. AT THE END
C**  OF THIS INTERPOLATION SEGMENT, I.E., AT STATION NE.
C
      DO 610 J=JM(1),NME
      SGNEW(J)=ESEN
  610 CONTINUE
C
C**  FOR THE REST OF STATIONS FROM NMB (I.E., NB+1) TO JM(1)-1 OF
C**  THIS SEGMENT, THE 100-YR ELE. WILL BE THE GROUND ELEVATION,
C**  PARAM(JP,2), PLUS THE WATER DEPTH, D, SITTING ON THE HIGHEST
C**  GROUND ELEVATION STATION JM(1), UNTIL THE BSEN IS MET.
C
      D=SGNEW(JM(1))-PARAM(JM(1),2)
C
      JP=JM(1)-1
      DO 615 J = NMB, JP
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=AMAX1(PARAM(J,2)+D,BSEN)
      ENDIF
  615 CONTINUE
C
      GO TO 400
C
  620 CONTINUE
C
C**  THE FOLLOWING PROGRAM SEGMENT IS FOR THE CASE THAT THE
C**  INTERPOLATION LINE CUTS BED ELEVATIONS TWO PORTIONS IN
C**  THIS TRANSECT SEGMENT, AND THE HIGHER BED ELEVATION
C**  STATION IS AFTER THE OTHER ONE, I.E., THE BED ELE. AT
C**  JM(1) IS LOWER THAN THE BED ELE. AT JM(2).
C
      DO 630 J=JM(2),NME
      SGNEW(J)=ESEN
  630 CONTINUE
C
C**  THEN LINEAR INTERPOLATION 100-YR ELE. FOR STATIONS BETWEEN
C**  NB AND JM(2)
C
      D=SGNEW(JM(2))-PARAM(JM(2),2)
      DX=PARAM(JM(2),1)-BFO
      DDSG=(ESEN-BSEN)/DX
C
      JP=JM(2)-1
      DO 635 J = NMB, JP
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=ESEN+DDSG*(PARAM(J,1)-PARAM(JM(2),1))
      ENDIF
  635 CONTINUE
C
C**  SET THE 100-YR ELE. AT STATIONS BETWEEN STATIONS NB AND
C**  JM(2) AS THE MAXIMUM OF: SECOND INTERPOLATION VALUE (SGNEW),
C**  THE BED ELEVATION PLUS THE WATER DEPTH AT JM(2) (D), AND
C**  THE 100-YR ELE. AT THE BEGINNING STATION OF THIS SEGMENT
C**  BSEN (=SGNEW(NB)).
C
      JP=JM(2)-1
      DO 645 J = NMB, JP
      IF(TOF(J). EQ. 'MG') THEN
        SGNEW(J)=SGNEW(J-1)
      ELSE
        SGNEW(J)=AMAX1(SGNEW(J),PARAM(J,2)+D,BSEN)
      ENDIF
  645 CONTINUE
C
C******   END OF DSG GREATER THAN ZERO CASE   *****
C
C*********************************************************
C***********     END  OF  INTERPOLATION  PROCESS    ******
C*********************************************************
C
C****  STORING NEW 100-YR ELE. TO THE CORRESPONDING FILED PARAMETER
C
  400 IF(NB. NE. 1) GO TO 402
      WRITE(10,'(a80)') TITLE2
C     WRITE(10,815) TOF(1),(PARAM(1,I),I=1,10)
  402 CONTINUE
C
      J=NB
  410 J=J+1
      IF(TOF(J). EQ. 'MG') GO TO 410
      IF(TOF(J). EQ. 'DU') GO TO 450
      IF(TOF(J). EQ. 'BU') GO TO 460
      IF(TOF(J). EQ. 'VE'. OR. TOF(J). EQ. 'VH') GO TO 470
      IF(TOF(J). EQ. 'IF'. OR. TOF(J). EQ. 'OF') GO TO 480
      IF(TOF(J). EQ. 'AS') GO TO 480
      GO TO 490
C
C**  DUNE (DU) CARD
C
  450 PARAM(J,5)=SGNEW(J)
      GO TO 490
C
C**  BUILDING (BU) CARD
C
  460 PARAM(J,6)=SGNEW(J)
      GO TO 490
C
C** VEGETATION (VE) OR MARSH GRASH (VH) CARD
C
  470 PARAM(J,8)=SGNEW(J)
      GO TO 490
C
C** INLAND FETCH (IF) OR OVER-WATER FETCH (OF) CARD
C
  480 PARAM(J,4)=SGNEW(J)
C
  490 IF(TOF(J). EQ. 'ET') GO TO 700
C
      IF(J. EQ. NE) THEN
        BSEN=SGNEW(J)
        BFO=PARAM(J,1)
        NB=NE
        GO TO 5
      ELSE
        GO TO 410
      ENDIF
C
C*******************************************************************
C                                                                  *
C**   THE FOLLOWING SEGMENT IS FOR COMPUTING THE AVERAGE BOTTOM    *
C**   SLOPE AT EACH STATION.                                       *
C                                                                  *
C**   THE BOTTOM SLOPE IS STORED AS PARAM(J,9) OF EACH STATION     *
C**   EXCEPT FOR MG CARD                                           *
C                                                                  *
C*******************************************************************
C
  700 CONTINUE
C
C**  STARTING FROM THE FIRST CARD, FISRT COMPUTE THE SLOPE BETWEEN
C**  STATION J AND J-1.  THE SLOPE FOR IE CARD IS THE SLOPE BETWEEN
C**  THE IE CARD AND THE SECOND CARD
C
      J=2
C
      SA=(PARAM(J,2)-PARAM(J-1,2))/(PARAM(J,1)-PARAM(J-1,1))
C
      PARAM(J-1,9)=SA
C
      JA=J-1
      JB=J+1
C
C**  IF THE NEXT CARD IS AS CARD, THE AVERAGE SLOPE IS THE SLOPE SA
C
  705 IF(TOF(JB).EQ.'AS') THEN
        PARAM(J,9)=SA
        GO TO 720
      ENDIF
C
C**  IF TOF(J) IS VH CARD, SKIP ALL MG CARDS
C
      IF(TOF(J). EQ. 'VH') THEN
        NPLTS=PARAM(J,6)
        JB=JB+NPLTS
      ENDIF
C
C**  COMPUTE THE BOTTOM SLOPE BETWEEN THIS STATION, J, AND THE
C**  NEXT STATION, JB
C
C**  HOWEVER,IF THE NEXT STATION IS ET, END OF THE TRANSECT,
C**  THEN THE AVERAGED SLOPE IS SA
C
      IF(TOF(JB). EQ. 'ET') THEN
        PARAM(J,9)=SA
        GO TO 770
      ENDIF
C
      SB=(PARAM(JB,2)-PARAM(J,2))/(PARAM(JB,1)-PARAM(J,1))
C
C**  IF TOF(J) IS AS CARD, THE AVERAGE SLOPE OF THIS CARD IS THE
C**  SLOPE OF SB
C
      IF(TOF(J). EQ. 'AS') THEN
        PARAM(J,9)=SB
        GO TO 710
      ENDIF
C
C**  WEIGHT AVERAGED SLOPE FOR THIS STATION FROM SA AND SB
C
      SS=(PARAM(J,1)-PARAM(JA,1))*SA + (PARAM(JB,1)-PARAM(J,1))*SB
      PARAM(J,9)=SS/(PARAM(JB,1)-PARAM(JA,1))
C
C**  REPLACE SA WITH SB, AND CONTINUE TO NEXT STATION
C
  710 SA=SB
C
C**  FOR VH CARD, REARRANGE PREVIOUS AND LATER STATION COUNT
C
      IF(TOF(J).EQ. 'VH') THEN
        JA=J
        J=JB
        JB=J+1
        GO TO 705
      ENDIF
C
  720 J=J+1
      JA=J-1
      JB=J+1
      GO TO 705
C
C******************************************************************
C                                                                 *
C**  COMPLETE CALCULATING AVERAGED BOTTOM SLOPE FOR THIS TRANSECT *
C                                                                 *
C******************************************************************
C
C******************************************************************
C                                                                 *
C**  START WRITING TO SCRATCH FILE -- UNIT 10                     *
C                                                                 *
C******************************************************************
C
  770 CONTINUE
C
      DO 775 J=1,1000
C
      IF(TOF(J).EQ.'MG') THEN
        WRITE(10,565) TOF(J),(PARAM(J,I),I=1,10)
      ELSE
C
        IF(PARAM(J,1). GT. 99999.) THEN
          ITEMP=IFIX(PARAM(J,1))
          WRITE(10,816) TOF(J),ITEMP,(PARAM(J,I),I=2,10)   !!! TEST
        ELSE
          WRITE(10,815) TOF(J),(PARAM(J,I),I=1,10)
        ENDIF
C
      ENDIF
C
      IF(TOF(J). EQ. 'ET') GO TO 1
  775 CONTINUE
C
  560 FORMAT(A2,2X,A4,9F8.0)
  561 FORMAT(2X,A4,9F8.0)
  565 FORMAT(A2,2X,A4,9F8.2)
  805 FORMAT(80A1)
  810 FORMAT(A2,F6.0,9F8.0)
 8101 FORMAT(A2,A78)
 8102 FORMAT(F6.0,9F8.0)
C  815 FORMAT(A2,F6.0,7F8.3,F8.4,F8.3)
  815 FORMAT(A2,F7.1,7F8.3,F8.4,F8.3)
C  816 FORMAT(A2,I6,  7F8.3,F8.4,F8.3)
  816 FORMAT(A2,I7,  7F8.3,F8.4,F8.3)
C 8161 FORMAT(A2,F6.0,7F8.3,F8.4,F8.3)   !!! TEST
      END SUBROUTINE SCANE

      SUBROUTINE ASKFORFILES
      CHARACTER*128 XINNAME, XOUTNAME
      COMMON/FILENAMES/XINNAME, XOUTNAME
      WRITE(*, '(A)', ADVANCE = 'NO') 'Enter the name of the INPUT file:  '
      READ(*, '(A)') XINNAME
      PRINT *, ' '
      WRITE(*, '(A)', ADVANCE = 'NO') 'Enter the name of the OUTPUT file:  '
      READ(*, '(A)') XOUTNAME
      END SUBROUTINE ASKFORFILES

      SUBROUTINE FILEERRORS
      USE DFLIB
      CHARACTER :: AKEY
      PRINT *, ' '
      PRINT *, 'AN ERROR OCCURRED IN OPENING EITHER THE INPUT OR THE OUTPUT FILE'
      PRINT *, ' '
      PRINT *, 'PLEASE CHECK THE SPELLING OF THE INPUT NAME AND ENSURE THAT IT EXISTS '
      PRINT *, ' '
      PRINT *, ' '
      PRINT *, 'Normal usage requires the input and output file names to be'
      PRINT *, '   entered on the command line, as in the following example:'
      PRINT *, ' '
      PRINT *, 'WHAFIS4.EXE   inputFileName.abc   outputFileName.xyz '
      PRINT *, ' '
      PRINT *, 'If the command line is blank, the program will prompt for the names.'
      PRINT *, ' '
      PRINT *, ' '
      WRITE(*, '(A)', ADVANCE = 'NO') 'Press any key to quit ...'
      AKEY=GETCHARQQ()
      PRINT *, ' '
      STOP
      END SUBROUTINE FILEERRORS

      SUBROUTINE SHOWHELP
      USE DFLIB
      CHARACTER :: AKEY
      PRINT *, ' '
      PRINT *, ' '
      PRINT *, ' WHAFIS 4.0G -- AN UPDATE OF FEMA''S WHAFIS PROGRAM FOR 500 YEAR ANALYSES'
      PRINT *, ' '
      PRINT *, '                            August, 2007'
      PRINT *, ' '
      PRINT *, 'Please refer to Appendix D of FEMA''s Guidelines and Specifications for'
      PRINT *, '    detailed documentation and basic guidance in the use of WHAFIS.'
      PRINT *, ' '
      PRINT *, ' '
      PRINT *, '   "Guidelines and Specifications for Flood Hazard Mapping Partners"'
      PRINT *, '  "Appendix D:  Guidelines for Coastal Flooding Analysis and Mapping"'
      PRINT *, '                             October, 2006'
      PRINT *, '               www.fema.gov/plan/prevent/fhm/dl_cgs.shtm'
      PRINT *, ' '
      PRINT *, ' '
      PRINT *, '     The following additional information applies to this version:'
      PRINT *, ' '
      WRITE(*, '(A)', ADVANCE = 'NO') '                       (Press any key to continue ...)'
      AKEY=GETCHARQQ()
      PRINT *, ' '
      PRINT *, ' '
      PRINT *, '1 -- This version allows up to 100 CM (comment) cards to be embedded'
      PRINT *, '     in the input file, permitting inline documentation. Each comment'
      PRINT *, '     line may be 80 characters in length. The CM cards are ignored during'
      PRINT *, '     execution of the program.'
      PRINT *, ' '
      PRINT *, '2 -- 100 PS (postscript) cards are also allowed. These are similar to'
      PRINT *, '     CM cards, but are saved and printed in Part 7 of the output.'
      PRINT *, ' '
      PRINT *, '3 -- The default wind speeds may be bypassed in this version, and'
      PRINT *, '     user-specified values substituted. The 100-year default speeds'
      PRINT *, '     are 60, 80, and 60 mph for IF, OF, and VH reaches, respectively.'
      PRINT *, '     Alternate values in mph are entered in fields 8, 9, and 10 of the'
      PRINT *, '     IE card. If a field is missing or zero, the corresponding default'
      PRINT *, '     value is used.'
      PRINT *, ' '
      PRINT *, '4 -- New default wind speeds have been established for 500-year'
      PRINT *, '     analyses. These are 75, 100, and 75 mph, and can be superseded'
      PRINT *, '     as discussed above by specifying alternate values on the IE card.'
      PRINT *, ' '
      PRINT *, '5 -- In order to perform a 500-year simulation, include the five-'
      PRINT *, '     character string '':500:'' at column 1 of the TITLE card.'
      AKEY=GETCHARQQ()
      PRINT *, ' '
      STOP
      END SUBROUTINE SHOWHELP


C**********************************************************************
C                                                                     *
C   THE FOLLOWING ADDENDUM IS THE WHAFIS 3.0 LISTING FOR REFERENCE    *
C                                                                     *
C**********************************************************************
C**********************************************************************
C
C C*******************************************************************
C C   PROGRAM WHAFIS   BY  DAVID HARTY,DAMES AND MOORE, OCT. 20, 1980
C C     PROGRAM WHAFIS   BY  DAVID HARTY,DAMES AND MOORE, OCT. 20, 1980
C C
C ********************************************************************
C C
C C               FEMA WHAFIS MODEL, VERSION 3.0, 9_88
C C
C C*******************************************************************
C C
C C     REVISED AUGUST 14, 1984
C C
C C
C C               REVISED AND CORRECTED ON 13 MARCH 1985 AND 22 MAY 1985
C C               BY DR. BARRY E. HERCHENRODER OF GREENHORNE AND O'MARA,
C C               INC., GREENBELT MD., 301-220-1868. THE RESULTING WHAFIS
C C               IS REFERRED TO AS WHAFIS2.1
C C
C C     REVISED AND CORRECTED FEBRUARY 1987 BY DR. BARRY E. HERCHENRODER
C C     (SAME # AS ABOVE) OF GREENHORNE AND O'MARA, GREENBELT, MARYLAND.
C C
C C               REVISED AND CORRECTED FURTHER IN MAY AND JUNE 1987 BY
C C               DR. BARRY E. HERCHENRODER (SAME # AS ABOVE)
C C               GREENHORNE AND O'MARA.
C C               THE RESULTING WHAFIS IS REFERRED TO AS WHAFIS3, JUNE 1987.
C C
C C     REVISED JULY 17,1987 FOR USE WITH MICROSOFT FORTRAN COMPILER
C C       BY JIM HILL, GREENHORNE & O'MARA,INC.
C C               CHANGES MADE WERE:
C C                 1. HOLLERITH DATA CHANGED TO CHARACTER DATA
C C                    EXAMPLE:  2HDU CHANGED TO 'DU'
C C                 2. OPEN STATMENTS MODIFIED.  INPUT FILE (UNIT 5) AND
C C                    OUTPUT FILE (UNIT 6) ARE NOW SPECIFIED ON THE COMMAND
C C                    LINE.  TO EXECUTE: C>WHAFIS3 <INPUT> <OUTPUT>
C C                    THE MARSH GRASS FILE IS ASSUMED TO ALWAYS BE MG.DAT
C C                 3. CLOSE STATMENTS WERE ADDED
C C                 4. FUNCTION EFL WAS RENAMED FUNCTION EFLF AND ALL
C C                    OCCURANCES OF EFL(A,B) WERE CHANGED TO EFLF(A,B)
C C                 5. DOUBLE QUOTES WERE CHANGED TO SINGLE QUOTES IN
C C                    FORMAT STATMENTS
C C
C C
C C                 6.  READ AND WRITE STATEMENTS IN SUBROUTINE VEG OF THE
C C                     FORM:
C C                           READ(5,500) TOF, (PARAM(J),J=1,10)
C C
C C                     WERE CHANGED TO:
C C
C C                           READ(5,500) TOF,PARAM(1),(PARAM(J),2,10)
C C
C C                     THIS CODING MODIFICATION ELIMINATES THE MIXING
C C                     OF CHARACTER AND REAL VALUES IN THE IMPLIED READ
C C
C C     REVISED AND CORRECTED IN SEPT. 1988 BY DR. BARRY E. HERCHENRODER
C C     (SAME # AS ABOVE), OF GREENHORNE & O'MARA.  THE RESULTING WHAFIS
C C     IS REFERRED TO AS FEMA WHAFIS MODEL, VERSION 3.0, SEPTEMBER 1988.
C C
C C     VERSION 3.0, SEPTEMBER 1988  WHAFIS WAS REVISED AND CORRECTED IN
C C     MAY 1989 BY DR. BARRY E. HERCHENRODER AND DR. JING WEI OF
C C     GREENHORNE & O'MARA. THE RESULTING WHAFIS IS REFERRED TO AS
C C     FEMA WHAFIS MODEL, VERSION 3.0, 9_88. IN THIS REVISION:
C C
C C 0. OPEN STATEMENTS FOR BOTH A PC (IBM-AT OR AN AT-CLONE) AND
C C    A DATA GENERAL MINI-COMPUTER WERE INSTALLED. THE PC OPEN
C C    STATEMENTS ARE APPROPRIATE FOR MICRO-SOFT'S FORTRAN 77
C C    COMPILER. THIS WHAFIS CODE CAN BE USED FOR EITHER TYPE OF
C C    MACHINE BY COMMENTING OUT THE APPROPRIATE SET OF OPEN
C C    STATEMENTS.
C C
C C 1. THE ORIGINAL PARTIAL IMPLEMENTATION OF THE THOMPSON-
C C    VINCENT PROCEDURE (TO CALCULATE HS FROM HM0) WAS REINSTALLED
C C
C C 2. A MICHE-TYPE EXPRESSION FOR THE BREAKING CONTROLLING WAVE
C C    HEIGHT WAS INSTALLED. THIS EXPRESSION APPROXIMATES THE WAVE
C C    SLOPE
C C    AS 1/7 IN DEEP WATER AND APPROACHES THE USUAL SHALLOW
C C    WATER BREAKING CRITERION AS THE RATIO OF STILLWATER DEPTH
C C    TO LOCAL SPECTRAL PEAK WAVELENGTH BECOMES MUCH LESS THAN 1
C C
C C 3. SOME CODE THAT IS COMMENTED OUT AND NO LONGER BEING USED WAS
C C    DELETED
C C
C C 4. THE INFORMATIONAL MESSAGE IN FORMAT 781 OF SUBROUTINE SCANE
C C    WAS CLARIFIED.
C C
C C       5. IN SUBROUTINE SCANE, THE WORD 'SURGE' WAS REPLACED BY
C C          'STILLWATER' IN ALL PLACES (INCLUDING FORMATS) EXCEPT
C C    WHERE THE AS CARD IS ADDRESSED. THIS CHANGE WAS FOR THE SAKE
C C    OF CONSISTENCY.
C C
C C     WAVE HEIGHT ANALYSIS FOR FLOOD INSURANCE STUDIES (WHAFIS) IS
C C     A PROGRAM WRITTEN TO ANALYZE THE DISSIPATION AND REGENERATION
C C     OF WIND WAVES ASSOCIATED WITH THE 100-YEAR STORM IN COASTAL AREAS.
C C     THE METHODOLGY USED CONFORMS TO PROCEDURES REQUIRED BY THE FEDERAL
C C     INSURANCE ADMINISTRATION.
C C     THIS PROGRAM DETERMINES WAVE HEIGHTS AND ELEVATIONS, FLOOD HAZARD
C C     FACTORS, ZONE DESIGNATIONS, AND THE LOCATION OF  ZONE  BOUNDARIES
C C     FOR FLOOD INSURANCE STUDIES.
C C
C C
C       PROGRAM WHAFIS3
C C
C       LOGICAL TEST,AZONE,VZONE
C       DIMENSION FFL(10),FFF(10),GFL(10),GFF(10),PARAM(10),
C      1HBW(500),EW(500),TITLE(80),
C      1STVG(500),VZNE(500),STEG(500),ELZ(500),GS(500),
C      1NSE(500),SELZ(500),SAVE(500),
C      1SA(500,5),AP(500),SBP(500),SEP(500)
C       DIMENSION HDN(8,8,7),PPSD(8,3),PLTYP(8)
C C
C CG&O SEPT 88
C C
C       DIMENSION SPWP(500)
C C
C       COMMON/ARRAY1/ SPWP
C C
C C END G&O SEPT 88
C C
C       COMMON /PPT/HDN,PPSD,PLTYP
C       COMMON /FONLY/FFL,FFF,GFL,GFF
C       COMMON /AONLY/NFOM1
C       COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
C      1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
C CG&O 2/87
C       COMMON /BTSLOP/GSLB,GSLE
C CG&O 2/87
C       DATA EI,DU,BU,VE,FI,FO,ET/ 'IE', 'DU','BU','VE','IF','OF','ET'/
C       DATA WIND,WARD,BLEE,AS/ 'WIND','WARD',' LEE','AS'/
C       DATA PI,BLANK/3.14159,' '/
C       DATA VH/ 'VH'/
C C
C C
C C               UNIT 5 IS THE INPUT FILE
C C               UNIT 6 IS THE OUTPUT FILE
C C               UNIT 7 IS THE MARSH GRASS DATA FILE
C C               UNIT 8 IS THE SCRATCH FILE FOR ECHOING THE INPUT
C C                      IN TABULAR FORM
C C               UNIT 9 IS THE SCRATCH FILE USED TO WRITE MARSH
C C                      GRASS DEFAULT PARAMETERS WHEN THE LATTER
C C                      ARE OBTAINED BY REGRESSION AND INTERPOLATION.
C C               UNIT 10 IS THE SCRATCH FILE USED TO STORE THE
C C                       RESULTING TRANSECT INFORMATION AFTER THE
C C                       STILLWATER SURGE ELEVATIONS HAVE BEEN
C C                       INTERPOLATED BY THE SUBROUTINE SCANE.
C C
C C               OPEN THE VARIOUS FILES
C C
C C     THE NEXT GROUP OF OPEN STATEMENTS IS FOR
C C     RUNNING THIS PROGRAM ON AN IBM-PC CLONE
C C     USING MICROSOFT FORTRAN-77 COMPILER, 4.1 OR
C C     HIGHER.
C C
C C     THE PC OPEN STATEMENTS ARE COMMENTED OUT SINCE
C C     THIS VERSION OF WHAFIS3 IS FOR THE DG.
C C
C         OPEN(5,FILE='   ',STATUS='OLD')
C         OPEN(6,FILE='   ',STATUS='NEW',FORM='FORMATTED')
C         OPEN(7,FILE='MG.DAT',STATUS='OLD')
C         OPEN(8,FILE  ='SCRATH.1',STATUS='NEW')
C         OPEN(9,FILE  ='SCRATH.2',STATUS='NEW')
C         OPEN(10,FILE='SCRATH.3',STATUS='NEW')
C C
C C     END PC OPEN STATEMENTS
C C
C C     THE NEXT GROUP OF OPEN STATEMENTS IS FOR
C C     RUNNING THIS PROGRAM ON A DG MINI-COMPUTER.
C C
C COPEN( UNIT=5, FILE='@DATA', PAD='YES' )
C C
C COPEN( UNIT=6, FILE='WHAFIS3.9_88.RESULTS', STATUS='FRESH'
C C     1 , CARRIAGECONTROL='FORTRAN' )
C C
C C     THE NEXT OPEN STATEMENT IS FOR THE MARSH
C C     GRASS INPUT DATA FILE.
C C
C C        OPEN( 7,FILE='MG.DF',STATUS='OLD',IOINTENT='INPUT')
C C        OPEN( 8,STATUS='SCRATCH',PAD='YES')
C C
C C     CLOSE(9,ERR=9)
C C 9      OPEN( 9,STATUS='SCRATCH',PAD='YES')
C C
C C     CLOSE(10, ERR=1099 )
C C 1099   OPEN( 10,STATUS='SCRATCH',PAD='YES')
C C
C C
C C     READ IN TABULAR DATA FOR MARSH GRASS
C       CALL READIN
C C
C C            CALL SCANE TO INTERPOLATE 100-YR STILLWATER ELEVATIONS
C C
C       CALL SCANE
C C
C C     READ THE TITLE CARD
C       READ(10,805)(TITLE(I),I=1,80)
C C     PRINT HEADING AND TITLE
C C     INITIALIZE VARIABLES FOR CURRENT TRANSECT
C     4 BSFO=0
C       N=0
C       M=0
C        NFO=0
C       NAP=0
C       WRITE(6,830)
C       WRITE(6,835)(TITLE(I),I=1,80)
C       WRITE(6,840)
C C
C C     READ DATA CARD DESCRIBING FETCH OR OBSTRUCTION
C     5 READ(10,810)TOF,(PARAM(I),I=1,10)
C C     ECHO INPUT
C       WRITE(6,815)TOF,(PARAM(I),I=1,10)
C C
C C     WRITE INPUT TO SCRATCH FILE
C       WRITE(8,815)TOF,(PARAM(I),I=1,10)
C C
C C
C C     BRANCH TO THE APPROPRIATE SEGMENT OF THE PROGRAM DEPENDING ON THE
C C     TYPE OF FETCH OR OBSTRUCTION (TOF)
C       IF(TOF.EQ.DU)GO TO 50
C       IF(TOF.EQ.BU)GO TO 100
C       IF(TOF.EQ.VE)GO TO 125
C       IF(TOF.EQ.FI)GO TO 150
C       IF(TOF.EQ.FO)GO TO 200
C       IF(TOF.EQ.AS)GO TO 230
C       IF(TOF.EQ.VH)GO TO 240
C       IF(TOF.EQ.ET)GO TO 300
C C
C C     IF TOF IS ILLEGAL PRINT MESSAGE AND STOP
C       IF(TOF.NE.EI)WRITE(6,820)
C       IF(TOF.NE.EI)GO TO 1000
C C
C C
C C     INITIAL ELEVATIONS PROGRAM SEGMENT
C       ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       FL=PARAM(3)
C       SET=PARAM(4)
C       SE=PARAM(5)
C       WHT=PARAM(6)
C       WPT=PARAM(7)
C CG&O 2/87
C       WPI=WPT
C       WHI=WHT
C       GSLB=PARAM(9)
C       GSLE=GSLB
C CG&O 2/87
C       ASE=SE
C C
C C     CHECK FOR MISSING AS CARD
C       IF(EEFO.GT.SE)WRITE(6,780)
C       IF(EEFO.GT.SE)GO TO 1000
C C
C C     IF INITIAL WAVE HEIGHT IS KNOWN BRANCH TO ARRAY LOADING PROGRAM SEGMENT
C CG&O 2/87  **  COMMENTTED OUT  ***
C CG&O 2/87  **  END OF COMMENTTED OUT  ***
C C     COMPUTE WAVE PERIOD
C       IF(WPT.GT.0)GO TO 20
C       AFL=5280*FL
C         IF( AFL .EQ. 0.0 ) AFL=5280.*24.
C       WPT=T(0.,AFL,117.0,26.0)
C C
C CG&O 2/87
C C
C    20 CONTINUE
C C
C C   CALCULATE INITIAL TRANSMITTED CONTROLLING WAVE HEIGHT IF IT IS
C C   NOT KNOWN
C C
C       IF(WHT. EQ. 0.0) THEN
C         AFL=5280.*FL
C         IF( AFL .EQ. 0.0 ) AFL=5280.*24.
C         WHT=HIN(0.0,AFL,117.0,26.0,WPT)
C       ENDIF
C C
C C   CALCULATE BREAKING WAVE HEIGHT AND RESET WHT IF IT IS TOO LARGE
C C
C       SDEB=AMAX1(0.0,SE-EEFO)
C       HB=SHBM(WPT,GSLE,SDEB)
C       WHT=AMIN1(WHT,HB)
C CG&O 2/87 END
C C
C C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
C       GO TO 250
C C
C C
C C     DUNE PROGRAM SEGMENT
C    50 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       AMMB=PARAM(3)
C       SETN=PARAM(4)
C       SEN=PARAM(5)
C CG&O 2/87
C       GSLB=GSLE
C       WPI=WPT
C       WHI=WHT
C       GSLE=PARAM(9)
C C
C CG&O 2/87
C C     UPDATE SURGE ELEVATIONS
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C C     CHECK FOR MISSING AS CARD
C       IF(EEFO.GT.SE.AND.AMMB.EQ.0)WRITE(6,780)
C       IF(EEFO.GT.SE.AND.AMMB.EQ.0)GO TO 1000
C       ASE=(SA(NFO,4)+SE)/2.0
C       EEB=EEFO
C       SDEB=SE-EEB
C C     COMPUTE TRANSMISSION COEFFICIENT B
C CG&O 2/87
C       HBM=SHBM(WPI,GSLE,SDEB)
C C     IF(WHI.LT.SDEB*.78)B=1.0
C       IF(WHI.LT.HBM)B=1.0
C CG&O 2/87 END
C       IF(WHI.EQ.0)GO TO 80
C C     CHECK FOR ARTIFICIAL OR MAN MADE BARRIERS
C       IF(AMMB.NE.0)GO TO 75
C CG&O 2/87
C C     IF(WHI.GE..78*SDEB)B=(.78*SDEB)/WHI
C       IF(WHI.GE.HBM)B=HBM/WHI
C CG&O 2/87
C       GO TO 80
C C     COMPUTE B FOR ARTIFICIAL BARRIERS
C    75 IF(EEB.GE.SE+.5*WHI)B=0
C       IF(EEB.GE.SE+.5*WHI)GO TO 80
C CG&O 2/87
C C     IF(WHI.GE.SDEB*.78)B=(1/(2*WHI))*(.78*SDEB+WHI)
C       IF(WHI.GE.HBM)B=(1/(2*WHI))*(HBM+WHI)
C CG&O 2/87
C       IF(EEB.GT.SE)B=.5-((EEB-SE)/WHI)
C C     COMPUTE TRANSMITTED WAVE HEIGHT
C    80 WHT=B*WHI
C C     COMPUTE WAVE PERIOD AT END OF SEGMENT
C       WPT=WPI
C C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
C C
C       GO TO 250
C C
C C     BUILDING PROGRAM SEGMENT
C   100 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       R=PARAM(3)
C       RB=PARAM(4)
C       SETN=PARAM(5)
C       SEN=PARAM(6)
C CG&O 2/87
C       GSLB=GSLE
C       WPI=WPT
C       WHI=WHT
C       GSLE=PARAM(9)
C CG&O 2/87
C C     UPDATE SURGE ELEVATIONS
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C       ASE=(SA(NFO,4)+SE)/2.0
C C     CHECK FOR MISSING AS CARD
C       IF(EEFO.GT.SE)WRITE(6,780)
C       IF(EEFO.GT.SE)GO TO 1000
C C
C C     B IS A FUNCTION OF THE RATIO OF OPEN SPACE TO TOTAL TRANSVERSE WIDTH
C C     (R), AND THE NUMBER OF ROWS OF BUILDINGS (RB).
C       B=R**(RB/2.0)
C       WHT=WHI*B
C       IF(EEFO.EQ.SE)WHT=0
C C     COMPUTE WAVE PERIOD AT END OF SEGMENT
C       WPT=WPI
C C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
C       GO TO 250
C C
C C
C C     VEGETATION PROGRAM SEGMENT
C   125 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       D=PARAM(3)
C       AH=PARAM(4)
C       AHS=PARAM(5)
C       DC=PARAM(6)
C       SETN=PARAM(7)
C       SEN=PARAM(8)
C CG&O 2/87
C       GSLB=GSLE
C       WPI=WPT
C       WHI=WHT
C       GSLE=PARAM(9)
C C
C CG&O 2/87
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C       ASE=(SA(NFO,4)+SE)/2.0
C       IF(DC.EQ.0)DC=1.0
C       W=ESFO-BSFO
C C
C C     CHECK FOR MISSING AS CARD
C       IF(EEFO.GT.SE)WRITE(6,780)
C       IF(EEFO.GT.SE)GO TO 1000
C C
C C     COMPUTE AVERAGE WETTED HEIGHT OF VEGETATION
C       AEG=(BEFO+EEFO)/2.0
C       ADV=ASE-AEG
C C     CHECK FOR NEGATIVE DEPTHS
C       IF(ADV.LE.0)WRITE(6,790)
C                 IF(ADV.LE.0.) THEN
C                 WRITE(6,791) TOF,PARAM(1)
C                 ENDIF
C   791           FORMAT(/2X,'TOF= ',A2,2X,'STATION= ',F8.2/)
C       IF(ADV.LE.0)GO TO 1000
C       AWH=AMIN1(AH,ADV)
C C
C C
C C     COMPUTE TRANSMISSION COEFFICIENT, TRANSMITTED WAVE HEIGHT AND
C C     BRANCH TO ARRAY LOADING PROGRAM SEGMENT
C       PART1=DC*WHI*AWH*D*W
C       PART2=3*PI*(AHS**2)*(ADV**2)
C       B=1/(1+(PART1/PART2))
C       WHT=WHI*B
C       IF(EEFO.EQ.SE)WHT=0
C C     COMPUTE WAVE PERIOD AT END OF SEGMENT
C       WPT=WPI
C C
C       GO TO 250
C C
C C
C C     INLAND FETCH PROGRAM SEGMENT
C   150 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       SETN=PARAM(3)
C       SEN=PARAM(4)
C CG&O 2/87
C       GSLB=GSLE
C       WPI=WPT
C       WHI=WHT
C       GSLE=PARAM(9)
C CG&O 2/87
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C CG&O 2/87
C C
C C   CHECK FOR MIISSING AS CARD
C C
C       IF(EEFO. GT. SE) THEN
C         WRITE(6,780)
C         GO TO 1000
C       ENDIF
C CG&O 2/87
C C
C       ASE=(SA(NFO,4)+SE)/2.0
C C
C C               THE SECTION THAT IGNORES REGENERATION FOR FETCHES
C C               SHORTER THAN 0.1 MILESIS DISABLED BELOW. INSTEAD,
C C               AN ESTIMATE OF THE G OR F FACTOR FOR FETCHES SHORTER
C C               THAN 0.1 MILES IS MAKE USING LINEAR INTERPOLATION
C C               BETWEEN THE G OR F VALUE FOR 0.1 MILES AND F=0 OR
C C               G=0 FOR 0.0 MILES
C C
C C     NO REGENERATION FOR FETCHES SHORTER THAN .1 MILE
C CG&O 2/87  **  COMMENTTED OUT  ***
C CG&O 2/87  **  END OF COMMENTTED OUT   ***
C C
C C     COMPUTE FETCH FACTOR
C       AEG=(EEFO+BEFO)/2.0
C       ADF=ASE-AEG
C         ADFHOLD= ADF
C C     CHECK FOR NEGATIVE DEPTHS
C       IF(ADF.LE.0)WRITE(6,790)
C                 IF(ADF.LE.0.) THEN
C                 WRITE(6,791) TOF,PARAM(1)
C                 ENDIF
C       IF(ADF.LE.0)GO TO 1000
C CG&O 2/87
C C
C C   INITIALIZE ERROR FLAG
C C
C       TEST=.FALSE.
C C
C C   SET WINDSPEED W IN STATUTE MILES PER HOUR
C C
C       W=60.0
C C
C C   NOTE THAT WHI AND WHT COMMUNICATE WITH MAIN PROGRAM THROUGH THE
C C   AFGV COMMON BLOCK AND THAT WHT AND WPT ARE SET IN SUBROUTINE FETCH.
C C
C       CALL FETCH(WPI,TEST,WPT,W)
C C
C CG&O 2/87 END
C C
C C     COMPUTE WAVE PERIOD
C C
C CG&O 2/87  **  COMMENTTED OUT AND INSERTED ***
C C
C C
C C   SKIP TO NEXT TRANSECT IF ERROR FLAG IS SET
C C
C       IF(TEST) GO TO 1000
C C
C CG&OO 2/87   **  END OF COMMENTTED OUT AND INSERTED  ***
C C
C       GO TO 5
C C
C C     OVER-WATER FETCH PROGRAM SEGMENT
C C     SAME PROCEDURE AS INLAND FETCH EXCEPT FETCH FACTOR IS DEFINED
C C     DIFFERENTLY AND F CURVES ARE USED INSTEAD OF G CURVES
C   200 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       SETN=PARAM(3)
C       SEN=PARAM(4)
C CG&O 2/87
C       GSLB=GSLE
C       WPI=WPT
C       WHI=WHT
C       GSLE=PARAM(9)
C CG&O 2/87
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C       ASE=(SA(NFO,4)+SE)/2.0
C C     CHECK FOR MISSING AS CARD
C       IF(EEFO.GT.SE)WRITE(6,780)
C       IF(EEFO.GT.SE)GO TO 1000
C C
C CG&O 2/87  **  COMMENTTED OUT AND INSERTED  ***
C C
C       AEG=(EEFO+BEFO)/2.0
C       ADF=ASE-AEG
C C     ADFHOLD= ADF
C       IF(ADF.LE.0)WRITE(6,790)
C                 IF(ADF.LE.0.) THEN
C                 WRITE(6,791) TOF,PARAM(1)
C                 ENDIF
C       IF(ADF.LE.0)GO TO 1000
C C
C C   INITIALIZE ERROR FLAG
C C
C       TEST=.FALSE.
C C
C C   SET WINDSPEED W IN STATUTE MILES PER HOUR
C C
C       W=80.0
C C
C C   NOTE THAT WHT AND WHI COMMUNICATED WITH MAIN PROGRAM THROUGH THE
C C   AFGV COMMON BLOCK AND THAT WHT AND WPT ARE SET IN SUBROUTINE FETCH.
C C
C       CALL FETCH(WPI,TEST,WPT,W)
C C
C C     COMPUTE WAVE PERIOD
C C
C C   SKIP TO NEXT TRANSECT IF ERROR FLAG IS SET
C C
C       IF(TEST) GO TO 1000
C C
C CG&O 2/87  **  END OF COMMENTTED OUT AND INSERT  ***
C C
C       GO TO 5
C C
C C
C C     ABOVE SURGE PROGRAM SEGMENT FOR B AND C ZONES
C C     ESTABLISH GUTTERS AT BEGIN STATION AND END STATION
C   230 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       SETN=PARAM(3)
C       SEN=PARAM(4)
C CG&O 2/87
C C
C       GSLB=GSLE
C       WPI=WPT
C       WHI=0.0
C       GSLE=PARAM(9)
C CG&O 2/87
C C     UPDATE SURGE ELEVATIONS
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C         IF(EEFO. LT. SE) THEN
C           WRITE(6,785) TOF,PARAM(1),PARAM(2),SE
C   785     FORMAT(/1X,'*** AS CARD GROUND ELEVATION LESS THAN',
C      A    ' STILLWATER ELEVATION, SHOULD USE OTHER TYPE CARD, JOB',
C      B    ' DUMPED  ***'/,
C      C           'TOF= ',A2,' STATION= ',F9.2,' GROUND ELEVATION= ',
C      D           F8.2,' STILLWATER ELEVATION= ',F8.2)
C           GO TO 1000
C         ENDIF
C       M=M+1
C       STEG(M)=BSFO
C       ELZ(M)=EW(NFO)
C       M=M+1
C       STEG(M)=ESFO
C       ELZ(M)=SE
C       WHT=0
C       WPT=0.1
C       GO TO 250
C C
C C
C C     PROGRAM SEGMENT FOR MARSH GRASS OR OTHER COMPLEX PLANT COMMUNITY
C   240 ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       SETN=PARAM(7)
C       SEN=PARAM(8)
C CG&O 2/87
C       GSLB=GSLE
C       WPI=WPT
C       WHI=WHT
C       GSLE=PARAM(9)
C CG&O 2/87
C C     CHECK FOR SURGE CHANGE
C       IF(SETN.NE.0)SET=SETN
C       IF(SEN.NE.0)SE=SEN
C C     CHECK FOR MISSING AS CARD
C       IF(EEFO.GT.SE)WRITE(6,780)
C       IF(EEFO.GT.SE)GO TO 1000
C C     CHECK FOR NEGATIVE DEPTH
C       ASE=(SA(NFO,4)+SE)/2.0
C       AEG=(BEFO+EEFO)/2.0
C       ADF=ASE-AEG
C       IF(ADF.LE.0)WRITE(6,790)
C                 IF(ADF.LE.0.) THEN
C                 WRITE(6,791) TOF,PARAM(1)
C                 ENDIF
C       IF(ADF.LE.0)GO TO 1000
C C     INITIALIZE ERROR FLAG
C       TEST=.FALSE.
C CG&O 2/87
C C
C C   SET WINDSPEED W IN STATUTE MILES PER HOUR
C C
C       W=60.0
C C
C C   NOTE THAT WHI AND WHT COMMUNICATE WITH MAIN PROGRAM THROUGH THE
C C   AFGV COMMON BLOCK AND THAT WHT AND WPT ARE SET IN SUBROUTINE VEG.
C C
C C     CALL SUBROUTINE
C       CALL VEG(WPI,TEST,WPT,W)
C C
C CG&O 2/87  END
C C
C C     SKIP TO NEXT TRANSECT IF ERROR FLAG IS SET
C       IF(TEST)GO TO 1000
C       GO TO 5
C C
C C
C C     ARRAY LOADING PROGRAM SEGMENT
C   250 NFO=NFO+1
C       IF(NFO.GT.500)WRITE(6,995)
C       IF(NFO.GT.500)STOP
C       GS(NFO)=ESFO
C C
C C
C CG&O 2/87
C       SDEB=AMAX1(0.0,SE-EEFO)
C C
C C     COMPUTE MAXIMUM WAVE HEIGHT
C C     WHM=.78*(SE-EEFO)
C       WHM=SHBM(WPT,GSLE,SDEB)
C C
C CG&O 2/87
C       IF(TOF.EQ.DU.AND.AMMB.NE.0)WHM=WHT
C C
C C     COMPUTE WAVE HEIGHTS AND ELEVATIONS
C       HBW(NFO)=AMIN1(WHT,WHM)
C CG&O 2/87
C         STMP = EEFO + SDEB
C C     EW(NFO)=.7*HBW(NFO)+ASE
C       EW(NFO)=.7*HBW(NFO)+STMP
C CG&O 2/87
C       IF(TOF.EQ.AS)EW(NFO)=EEFO
C C
C C G&O SEPT 88
C C
C C                    STORE SPECTRAL PEAK WAVE PERIOD IN THE
C C                    SPWP ARRAYC
C       SPWP(NFO)= WPT
C C
C C END G&O SEPT 88
C C
C C
C C     STORE INFORMATION NEEDED LATER FOR FLOOD INSURANCE ZONE DATA
C       SA(NFO,1)=BSFO
C       SA(NFO,2)=ESFO
C       SA(NFO,3)=SET
C       SA(NFO,4)=SE
C       SA(NFO,5)=TOF
C       IF(PARAM(10).NE.1)GO TO 275
C       NAP=NAP+1
C       AP(NAP)=ESFO
C       M=M+1
C       STEG(M)=GS(NFO)
C       ELZ(M)=EW(NFO)
C C
C C     INCIDENT WAVE HEIGHT AND PERIOD FOR NEXT OBSTRUCTION
C C     EQUALS TRANSMITTED WAVE HEIGHT AND PERIOD OF CURRENT
C C     OBSTRUCTION
C   275 WHT=HBW(NFO)
C C     IF(HBW(NFO).LT..1)WPT=.1
C CG&O 2/87 ** COMMENTTED OUT  ***
C CG&O 2/87 **  END OF COMMENTTED OUT  ***
C C
C C     BEGINNING POINT OF NEXT OBSTRUCTION IS END POINT OF CURRENT
C C     OBSTRUCTION
C       BSFO=ESFO
C       BEFO=EEFO
C C
C C     BRANCH BACK TO READ STATEMENT AND READ ANOTHER CARD
C C
C       GO TO 5
C C
C C
C C     THIS POINT WILL BE REACHED IF THE LAST CARD WAS AN ET CARD
C C     SIGNALING THE END OF THE TRANSECT.
C C     CALL SUBROUTINE TO PRODUCE AN ANOTATED INPUT LISTING
C   300 CALL ECHO
C C
C C G&O SEPT 88
C C
C C     PRINT HEADINGS AND OUTPUT FOR PART2 (LOCATION, WAVE HEIGHT,
C C     AND WAVE ELEVATION)
C C     WRITE(6,870)
C C     WRITE(6,880)
C C
C       WRITE(6,875)
C   875 FORMAT(///,48X,'PART2: CONTROLLING WAVE HEIGHTS, SPECTRAL '
C      1 ,/55X,'PEAK WAVE PERIOD, AND WAVE CREST ELEVATIONS')
C C
C       WRITE(6,882)
C   882 FORMAT(/,42X,10HLOCATION  ,6X,11HCONTROLLING,2X,
C      1 14HSPECTRAL PEAK ,2X,10HWAVE CREST,/58X,11HWAVE HEIGHT,
C      2 2X,14HWAVE PERIOD   ,2X,10HELEVATION )
C C
C C EMD G&O SEPT 88
C C
C       DO 310 I=1,NFO
C C
C C G&O 3/87
C C
C         TEMP = SA(I,5)
C C
C C     IF(SA(I,5).EQ.1.0.OR.SA(I,5).EQ.2.0) GO TO 310
C       IF(SA(I,5).EQ.1.0.OR.SA(I,5).EQ.2.0) TEMP = 2H
C C
C C     WRITE(6,890) SA(I,5),GS(I),HBW(I),EW(I)
C C
C C G&O SEPT 88
C C
C C     WRITE(6,890) TEMP   ,GS(I),HBW(I),EW(I)
C C
C C                   ZERO OUT SPECTRAL PEAK WAVE PERIOD
C C                   SPWP(I) IF CONTROLLING WAVE HEIGHT HBW(I)
C C                   IS ZERO. THIS IS TO PREVENT WAVES WITH A
C C                   NON-ZERO WAVE PERIOD FROM OCCURING WHEN THE
C C                   WAVE HEIGHT IS ZERO
C C
C       IF( HBW(I) .EQ. 0.0 ) SPWP(I) = 0.0
C C
C       WRITE(6,892) TEMP,GS(I),HBW(I),SPWP(I),EW(I)
C   892 FORMAT(/,40X,A2,F11.2,3F13.2)
C C
C C END G&O SEPT 88
C C
C C G&O 3/87 END
C C
C   310 CONTINUE
C C
C C
C C     CHECK THAT WAVE IS NEARLY DAMPED OUT AT END OF TRANSECT
C       IF(HBW(NFO).GT..5)WRITE(6,860)HBW(NFO)
C       WRITE(6,895)
C C
C C
C C    LIST LOCATION OF AREAS ABOVE SURGE
C       MM1=M-1
C       IF(M.EQ.0)GO TO 316
C       DO 315 I=1,NFO
C       IF(SA(I,5).EQ.AS)WRITE(6,950)SA(I,1),SA(I,2)
C   315 CONTINUE
C   316 IF(M.EQ.0)WRITE(6,970)
C C
C C
C C     LIST LOCATION OF SURGE CHANGES AND ESTABLISH GUTTERS AT THESE LOCATIONS
C       WRITE(6,885)
C       WRITE(6,985)
C       NFOM1=NFO-1
C       DO 318 I=1,NFOM1
C       IF(SA(I,3).EQ.SA(I+1,3).AND.SA(I,4).EQ.SA(I+1,4))GO TO 318
C       IF(SA(I,5).EQ.1.0.OR.SA(I,5).EQ.2.0)GO TO 317
C       M=M+1
C       STEG(M)=GS(I)
C       ELZ(M)=EW(I)
C   317 IF(SA(I+1,5).EQ.1.0.OR.SA(I+1,5).EQ.2.0)GO TO 318
C       M=M+1
C       STEG(M)=GS(I+1)
C       ELZ(M)=EW(I+1)
C       WRITE(6,960)STEG(M),SA(I+1,3),SA(I+1,4)
C   318 CONTINUE
C       IF(M-1.EQ.MM1)WRITE(6,975)
C C
C C
C C     FIND LOCATIONS WHERE THE HEIGHT OF THE BREAKING WAVE IS 3.0 FEET
C C     AND ESTABLISH GUTTERS AT THESE LOCATIONS
C       DO 330 I=1,NFOM1
C       TEST=.FALSE.
C       SLOPE=(HBW(I+1)-HBW(I))/(GS(I+1)-GS(I))
C       IF(I.EQ.1.AND.HBW(1).NE.3)GO TO 319
C       IF(I.NE.1)GO TO 319
C       N=N+1
C       M=M+1
C       STVG(N)=GS(1)
C       STEG(M)=GS(1)
C       ELZ(M)=EW(1)
C       TEST=.TRUE.
C   319 IF(SLOPE.EQ.0)GO TO 320
C       IF(HBW(1).EQ.3)GO TO 325
C       X=(3-HBW(I))/SLOPE+GS(I)
C       IF(X.LE.GS(I).OR.X.GT.GS(I+1))GO TO 330
C       N=N+1
C       M=M+1
C       STVG(N)=X
C       STEG(M)=X
C       ELZ(M)=2.1+((SA(I,4)+SA(I+1,4))/2.0)
C       TEST=.TRUE.
C   320 IF(HBW(I).NE.3.AND.HBW(I+1).NE.3)GO TO 325
C       N=N+1
C       STVG(N)=GS(I+1)
C       TEST=.TRUE.
C   325 IF(TEST.AND.SLOPE.GT.0)VZNE(N)=BLEE
C       IF(TEST.AND.SLOPE.LE.0)VZNE(N)=WIND
C   330 CONTINUE
C       IF(N.EQ.0)GO TO 336
C C
C C
C C     LIST LOCATIONS OF V ZONE GUTTERS AND V ZONES
C       WRITE(6,900)
C       WRITE(6,940)
C       DO 335 I=1,N
C       WRITE(6,905)STVG(I),VZNE(I),WARD
C   335 CONTINUE
C C
C C
C C     FIND ELEVATION GUTTERS AT PLACES WHERE WAVE ELEVATION IS
C C AN ODD MULTIPLE OF .5 FEET
C C
C   336 DO 370 I=1,NFOM1
C       BIG=AMAX1(EW(I),EW(I+1))
C       SMALL=AMIN1(EW(I),EW(I+1))
C       ITRNK=INT(SMALL)
C       TST=SMALL-ITRNK
C       IF(TST.LT..5)GTST=FLOAT(ITRNK)+.5
C       IF(TST.GT..5)GTST=FLOAT(ITRNK)+1.5
C       IF(TST.EQ..5)GTST=SMALL
C   340 IF(GTST.GT.BIG)GO TO 370
C       TEST=.FALSE.
C       SLOPE=(EW(I+1)-EW(I))/(GS(I+1)-GS(I))
C       IF(SLOPE.EQ.0)GO TO 370
C       M=M+1
C       STEG(M)=(GTST-EW(I))/SLOPE+GS(I)
C       ELZ(M)=GTST
C       GTST=GTST+1.0
C       GO TO 340
C   370 CONTINUE
C C
C C      AT LEAST TWO GUTTERS ARE NEEDED
C       M=M+1
C       STEG(M)=GS(1)
C       ELZ(M)=EW(1)
C       M=M+1
C       STEG(M)=GS(NFO)
C       ELZ(M)=EW(NFO)
C C
C C
C C     SAVE LOCATION OF GUTTERS IN ORIGINAL ORDER
C       DO 382 I=1,M
C       SAVE(I)=STEG(I)
C   382 CONTINUE
C C
C C
C C     SORT GUTTERS BY INCREASING STATIONS
C       MM1=M-1
C       DO 386 J=1,M
C       DO 384 I=1,MM1
C       SMALL=AMIN1(STEG(I),STEG(I+1))
C       BIG=AMAX1(STEG(I),STEG(I+1))
C       STEG(I)=SMALL
C       STEG(I+1)=BIG
C   384 CONTINUE
C   386 CONTINUE
C C
C C
C C     FIND THE ELEVATIONS ASSOCIATED WITH EACH OF THE GUTTERS
C       DO 390 J=1,M
C       DO 388 I=1,M
C       IF(SAVE(I).EQ.STEG(J))NS=I
C   388 CONTINUE
C       SELZ(J)=ELZ(NS)
C   390 CONTINUE
C C
C C
C C      PRINT HEADING FOR PART6
C       WRITE(6,910)
C       WRITE(6,915)
C C
C C
C C      FLAG GUTTERS LOCATED IN AREAS ABOVE SURGE FOR LATER ELIMINATION
C       DO 398 I1=1,NFO
C       DO 396 I2=1,M
C       IF(SA(I1,5).NE.AS)GO TO 396
C       IF(STEG(I2).GT.SA(I1,1).AND.STEG(I2).LT.SA(I1,2))STEG(I2)=-10.0
C   396 CONTINUE
C   398 CONTINUE
C C
C C
C C      FLAG GUTTERS THAT ARE DUPLICATES FOR LATER ELIMINATION
C       DO 410 I=1,MM1
C       IF(STEG(M-I+1).EQ.STEG(M-I))STEG(M-I+1)=-10
C   410 CONTINUE
C C
C C
C C      DETERMINE THE FETCH OR OBSTRUCTION ASSOCIATED WITH EACH GUTTER
C       DO 418 J=1,M
C       NSE(J)=0
C       DO 417 I=1,NFOM1
C       IF(STEG(J).GE.GS(I).AND.STEG(J).LT.GS(I+1))NSE(J)=I
C   417 CONTINUE
C   418 CONTINUE
C       IF(STEG(M).EQ.GS(NFO))NSE(M)=NFOM1
C C
C C
C C     FIND THE AREAS OVER WHICH THE WEIGHTED AVERAGE CALCULATIONS
C C     ARE TO BE MADE FOR A ZONE NUMBER DETERMINATIONS
C C
C       K=0
C       IF(N.NE.0)GO TO 425
C       IF(HBW(1).GT.3.0)GO TO 445
C       K=1
C       SBP(K)=GS(1)
C       SEP(K)=GS(NFO)
C       GO TO 445
C   425 IF(VZNE(1).EQ.WIND)GO TO 430
C       K=1
C       SBP(K)=GS(1)
C       SEP(K)=STVG(1)
C   430 DO 440 I=1,N
C       IF(VZNE(I).EQ.BLEE)GO TO 440
C       K=K+1
C       SBP(K)=STVG(I)
C       IF(I.EQ.N)SEP(K)=GS(NFO)
C       IF(I.EQ.N)GO TO 440
C       SEP(K)=STVG(I+1)
C   440 CONTINUE
C C
C C
C C      DETERMINE THE ZONE DESIGNATION AND FLOOD HAZARD FACTOR FOR EACH ZONE
C C      AND PRINT THE RESULTS AS THEY ARE DETERMINED
C C
C   445 WRITE(6,920)GS(1),EW(1)
C       DO 500 I=1,MM1
C       IF(STEG(I).EQ.-10)GO TO 500
C       INDEX=I+1
C   450 IF(INDEX.GT.M)GO TO 500
C       IF(INDEX.EQ.M.AND.STEG(INDEX).EQ.-10)GO TO 500
C       IF(STEG(INDEX).EQ.-10)INDEX=INDEX+1
C       IF(STEG(INDEX).EQ.-10)GO TO 450
C       INDX=NSE(I)+1
C       IF(SA(INDX,5).EQ.AS.AND.SA(INDX,1).EQ.STEG(I))WRITE(6,920)
C      1STEG(INDEX),SELZ(INDEX)
C       IF(SA(INDX,5).EQ.AS.AND.SA(INDX,1).EQ.STEG(I))GO TO 500
C C
C C G&O 3/87 COMMENTTED OUT
C C
C C G&O 3/87 END COMMENTED OUT
C C
C       AZONE=.FALSE.
C       VZONE=.FALSE.
C C
C C G&O 3/87 INSERT
C C
C       IF(K.EQ.0)GO TO 460
C C
C C G&O 3/87 END INSERT
C C
C       DO 455 J=1,K
C       IF(STEG(I).GE.SBP(J).AND.STEG(I).LT.SEP(J))AZONE=.TRUE.
C       IF(STEG(I).GE.SBP(J).AND.STEG(I).LT.SEP(J))INDX=J
C   455 CONTINUE
C       IF(AZONE)GO TO 462
C   460 VZONE=.TRUE.
C       TSG1=SA(NSE(I),3)+SA(NSE(I)+1,3)
C       TSG2=SA(NSE(INDEX),3)+SA(NSE(INDEX)+1,3)
C       HSG1=SA(NSE(I),4)+SA(NSE(I)+1,4)
C       HSG2=SA(NSE(INDEX),4)+SA(NSE(INDEX)+1,4)
C       TSG=(TSG1+TSG2)/4.0
C       HSG=(HSG1+HSG2)/4.0
C       DIFF=1.55*(HSG-TSG)
C       GO TO 470
C   462 BP=SBP(INDX)
C       EP=SEP(INDX)
C       START=BP
C       STOP=EP
C       IF(NAP.EQ.0)GO TO 468
C       DO 464 J=1,NAP
C       IF(AP(J).GT.BP.AND.AP(J).LE.STEG(I))START=AP(J)
C   464 CONTINUE
C       J=NAP
C   465 IF(AP(J).GE.STEG(INDEX).AND.AP(J).LT.EP)GO TO 466
C       IF(J.EQ.1)GO TO 468
C       J=J-1
C       GO TO 465
C   466 STOP=AP(J)
C   468 CALL AVG(START,STOP,AER,ATS)
C       DIFF=AER-ATS
C   470 BP=STEG(I)
C       EP=STEG(INDEX)
C       CALL AVG(BP,EP,AER,ATS)
C       ITRNK=INT(AER)
C       TST=AER-ITRNK
C       IF(TST.LT..5)IELZ=ITRNK
C       IF(TST.GE..5)IELZ=ITRNK+1
C       IF(DIFF.GE.0.AND.DIFF.LT..75)INSZ=1
C       BEG=.75
C       DO 480 I1=2,19
C       END=BEG+.5
C       IF(DIFF.GE.BEG.AND.DIFF.LT.END)INSZ=I1
C       BEG=BEG+.5
C   480 CONTINUE
C       IF(DIFF.GE.9.75.AND.DIFF.LT.10.5)INSZ=20
C       BEG=10.5
C       DO 490 I1=21,30
C       END=BEG+1.0
C       IF(DIFF.GE.BEG.AND.DIFF.LT.END)INSZ=I1
C       BEG=BEG+1.0
C   490 CONTINUE
C       IF(DIFF.GE.20.5)INSZ=30
C       IF(INSZ.LE.20)IFHF=5*INSZ
C       IF(INSZ.GT.20)IFHF=100+(10*(INSZ-20))
C       IF(AZONE)WRITE(6,925)INSZ,IELZ,IFHF
C       IF(VZONE)WRITE(6,927)INSZ,IELZ,IFHF
C       WRITE(6,920)STEG(INDEX),SELZ(INDEX)
C   500 CONTINUE
C       WRITE(6,980)
C C     CHECK FOR NON-BLANK TITLE CARD OF NEXT DATA SET
C   505 READ(10,805)(TITLE(I),I=1,80)
C       TEST=.TRUE.
C       DO 510 I=1,80
C       IF(TITLE(I).NE.BLANK)TEST=.FALSE.
C   510 CONTINUE
C       IF(TEST)GO TO 1010
C C     IF THE TITLE CARD IS NOT BLANK READ IN THE NEXT TRANSECT
C       GO TO 4
C   780 FORMAT(5X,46H GROUND ELEVATION GREATER THAN SURGE ELEVATION,1X,
C      124HENCOUNTERED. JOB DUMPED.)
C   790 FORMAT(5X,42H AVERAGE DEPTH LESS THAN OR EQUAL TO ZERO.,1X,
C      111HJOB DUMPED.)
C   805 FORMAT(80A1)
C   810 FORMAT(A2,F6.0,9F8.0)
C   815 FORMAT(10X,A2,10F11.3)
C   820 FORMAT(10X,39HTHE ABOVE CARD CONTAINS ILLEGAL DATA IN,1X,
C      120HTHE FIRST 2 COLUMNS.)
C C
C C G&O MAY 89
C C
C C     THE DATE IN THE LAST PART OF THE
C C     HEADER WAS MODIFIED
C C
C C 830 FORMAT(1H1,///,30X,29H WAVE HEIGHT COMPUTATIONS FOR,1X,
C C    153HFLOOD INSURANCE STUDIES (VERSION 3.0, SEPTEMBER 1988) )
C C
C   830 FORMAT(1H1,///,30X,29H WAVE HEIGHT COMPUTATIONS FOR,1X,
C      1  'FLOOD INSURANCE STUDIES (VERSION 3.0, 9_88)' )
C C
C C END G&O MAY 89
C C
C   835 FORMAT(30X,80A1)
C   840 FORMAT(///,60X,12H PART1 INPUT,/)
C   860 FORMAT(5X,40HTRANSMITTED WAVE HEIGHT AT LAST FETCH OR,1X,
C      113HOBSTRUCTION =F5.2,
C      119H WHICH EXCEEDS 0.5.)
C   870 FORMAT(///,48X,34H PART2 WAVE HEIGHTS AND ELEVATIONS)
C   880 FORMAT(/,42X,10HLOCATION  ,6X,11HWAVE HEIGHT,2X,
C      114HWAVE ELEVATION)
C   885 FORMAT(///,50X,31HPART4 LOCATION OF SURGE CHANGES)
C   890 FORMAT(/,40X,A2,F11.2,2F13.2)
C   895 FORMAT(///,40X,44HPART3 LOCATION OF AREAS ABOVE 100-YEAR SURGE)
C   900 FORMAT(///,55X,26HPART5  LOCATION OF V ZONES)
C   905 FORMAT(/,45X,F15.2,15X,2A4)
C   910 FORMAT(///,51X,34HPART6 NUMBERED A ZONES AND V ZONES)
C   915 FORMAT(/,40X,17HSTATION OF GUTTER,2X,9HELEVATION,2X,
C      116HZONE DESIGNATION,3X,3HFHF,/)
C   920 FORMAT(/,35X,F16.2,F15.2,/)
C   925 FORMAT(74X,1HA,I2,2X,3HEL=,I2,5X,I3)
C   927 FORMAT(74X,1HV,I2,2X,3HEL=,I2,5X,I3)
C   940 FORMAT(/,45X,17HSTATION OF GUTTER,10X,
C      116HLOCATION OF ZONE)
C   950 FORMAT(/,45X,7HBETWEEN,F10.2,1X,3HAND,F10.2)
C   960 FORMAT(/,35X,F11.2,10X,F11.2,10X,F11.2)
C   970 FORMAT(/,40X,46HNO AREAS ABOVE 100-YEAR SURGE IN THIS TRANSECT)
C   975 FORMAT(/,50X,33HNO SURGE CHANGES IN THIS TRANSECT)
C   980 FORMAT(//,50X,34HZONE TERMINATED AT END OF TRANSECT)
C   985 FORMAT(/,40X,7HSTATION,10X,13H10-YEAR SURGE,10X,14H100-YEAR SURGE)
C   990 FORMAT(A2,78A1)
C   995 FORMAT(/,10X,38HARRAY DIMENSIONS EXCEEDED. JOB DUMPED.)
C C     IN CASE OF ERROR SKIP TO NEXT TRANSECT
C  1000 READ(10,990)TOF,(TITLE(I),I=1,78)
C       IF(TOF.NE.ET)GO TO 1000
C       GO TO 505
C 1010  CLOSE(5)
C       CLOSE(6)
C       CLOSE(7)
C       CLOSE(8,STATUS='DELETE')
C       CLOSE(9,STATUS='DELETE')
C       CLOSE(10,STATUS='DELETE')
C       STOP
C       END
C       SUBROUTINE FETCH(WPI,TEST,WPT,W)
C C
C C     THIS SUBROUTINE COMPUTES THE WAVE HEIGHTS AND ELEVATIONS FOR
C C     INLAND AND OVERWATER FETCHES AND STORES THE RESULTS FOR FURTHER
C C     ANALYSIS BY THE REST OF THE PROGRAM.  WAVE HEIGHTS AND ELEVATIONS
C C     ARE COMPUTED USING THE CONSERVATION OF WAVE ACTION EQUATION WITH A
C C     VARIABLE GRID SPACING TO PERMIT ACCURATE  LINEAR INTERPOLATION OF
C C     WAVE HEIGHTS AND
C C     ELEVATIONS FOR DETERMINING FLOOD INSURANCE DATA. THE CONSERVATION
C C     OF ACTION EQUATION IS IDENTICAL TO THE ONE USED FOR MARSH GRASS
C C     CALCULATION EXCEPT THAT THE PLANT ENERGY DISSIPATION IS ZERO.
C C               THE SPECTRAL PEAK WAVE PERIOD IS CALCULATED USING A
C C               DIFFERENTIAL FORM OF THE 1984 SPM WAVE PERIOD GROWTH
C C               EQUATIONS. THIS FORM IS EQUIVALENT TO THE CONSERVATION
C C               OF WAVES EQUATION. THE NET WIND ENERGY INPUT FUNCTION
C C               FOR THE WAVE ACTION EQUATION IS BASED ON THE 1984 SPM
C C               WAVE GROWTH EQUATIONS. THE SHOALING EFFECT IS INCLUDED
C C               IN THE WAVE ACTION EQUATION.
C C
C C G&O 2/87
C         LOGICAL TEST
C C
C         REAL NUTAVG
C C G&O 2/87 END
C C
C       DIMENSION PARAM(10),FFL(10),GFL(10),GFF(10),FFF(10),HBW(500)
C C
C       DIMENSION AP(500),SA(500,5),GS(500),EW(500),STEG(500),ELZ(500)
C C
C       COMMON /FONLY/FFL,FFF,GFL,GFF
C C
C       COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
C      1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
C C
C C G&O 2/87
C         COMMON / BTSLOP / GSLB, GSLE
C C G&O 2/87 END
C C
C C
C CG&O SEPT 88
C C
C       DIMENSION SPWP(500)
C C
C       COMMON/ARRAY1/ SPWP
C C
C C END G&O SEPT 88
C C
C       EPSHB = 1.0E-5
C       FO= 'OF'
C       FI= 'IF'
C       DELTA1=0.0
C       DELTA2=0.0
C       DELTA3=0.0
C       STOF=TOF
C C
C C               RETRIEVE DATA FROM ARRAY PARAM
C C
C       ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       SETN=PARAM(3)
C       SEN=PARAM(4)
C C
C C G&O 2/87
C         ABGF = PARAM(10)
C C G&O END
C C
C C
C C               SET TOF PARAMETER
C C
C         IF( TOF .EQ. FI ) TOF= 1.0
C         IF( TOF .EQ. FO ) TOF= 2.0
C C
C C**  THE BOTTOM SLOPE AT END OF TRANSECT SEGMENT,GSLE, AND BOTTOM
C C**  SLOPE AT BEGINNING OF SEGMENT, GSLB, HAVE BEEN SET PRIOR TO
C C**  ENTERING THIS SUBROUTINE
C C
C C     CHECK FOR INVALID DATA
C       IF(ESFO.GT.BSFO)GO TO 10
C       IF( W .EQ. 60. ) WRITE(6,500)
C       IF( W .EQ. 80. ) WRITE(6,500)
C       TEST=.TRUE.
C  10     CONTINUE
C C
C       IF(TEST)GO TO 90
C C
C C     SET DEFAULT FOR WF1
C       IF(WF1.EQ.0)WF1=1
C C
C C     SET DEFAULT SURGE VALUES
C       IF(SETN.EQ.0)SETN=SET
C       IF(SEN.EQ.0)SEN=SE
C C
C C
C C     CHECK FOR ZERO WAVE PERIOD
C    90 IF(WPI.GT.0)GO TO 95
C       WRITE(6,600)
C       TEST=.TRUE.
C C
C C     RETURN IF ERROR FLAG IS SET
C    95 IF(.NOT.TEST)GO TO 100
C       WRITE(6,580)
C       REWIND 8
C       REWIND 9
C       RETURN
C   100 CONTINUE
C C
C C     SET MINIMUM WAVE PERIOD TO .1 SECONDS
C       IF(WPI.LT..1)WPI=.1
C C
C C G&O 2/87
C C
C C**  EVALUATE VARIOUS CONSTANTS NEEDED FOR EVALUATION
C C
C C    W = WINDSPEED IN STATUTE MILES PER HOUR. IT IS READ IN AS ONE OF
C C    THE SUBROUTINE ARGUMENTS.
C C
C         CA = (5.28)*(.589)/3.6
C C
C         UA = CA*(W**1.23)
C C
C         ATS = 7.54
C C
C         SIGT = .0379
C C
C         G = 32.2
C C
C C G&O SEPT 88   FOR PC VERSION
C C
C       CRAV=((1.357E-3)*G)**.8557
C C
C C END G&O SEPT 88 FOR PC VERSION
C C
C         AH = 0.283
C C
C         GAMH = 0.53
C C
C         SIGH = .00565
C C
C         GAMT = 0.833
C C
C         PI = 3.1415926536
C C
C         CTAU = ((ATS*SIGT)**3)*UA/(G*G)
C C
C         CRSTR = AH*UA*UA/G
C C
C         CWPF = ATS*UA/G
C C
C         CNUT = (SIGT**3)/(SIGH*SIGH)
C C
C         CBETH = GAMH*((G/(UA*UA))**0.75)
C C
C         CBETT = GAMT*((G/(UA*UA))**0.375)
C C
C         PI2 = 2*PI
C C
C         PID2 = PI * 0.5
C C
C         CLO = G/PI2
C C
C         PI4 = 4*PI
C C
C         CAAVG = ((SIGH*AH)**2)*(UA*UA)/G
C C
C         CBAVG = (SIGH**2)*G/(UA*UA)
C C
C         CPAVG = ((SIGT*ATS)**2)/PI4
C C
C         CCAVG = 1./(3.*PI*SQRT(2.0))
C C
C         C1D3 =1./3.
C         CFNUT =  ( CBETH/(CBETT**2) )**2
C C G&O 2/87 END
C C
C C     SOLVE DIFFERENTIAL EQUATION
C C
C C     DETERMINE DELTA X
C       DX=25
C       X=ESFO-BSFO
C       IF(X.LT.500)DX=X/20.0
C C
C C     EVALUATE COMMON FACTORS OUTSIDE THE LOOP
C       DTS=DX*(SETN-SA(NFO,3))/X
C       DS=DX*(SEN-SA(NFO,4))/X
C       DG=DX*(EEFO-BEFO)/X
C C G&O 2/87
C         DGSL=DX*(GSLE-GSLB)/X
C C G&O 2/87 END
C       SIG=.0125
C       GOU2=.00415806
C       OOM=2.38095
C C     PI=3.14159
C C     G=32.2
C         C1LOG= ALOG10(2.0)
C         C2LOG= .394528 * C1LOG
C       DSOOM=.68057
C C
C C     INITIALIZE VARIABLES
C       XSUM=0
C       XOLD=0
C       TSOLD=SA(NFO,3)
C       SOLD=SA(NFO,4)
C       GOLD=BEFO
C C
C C G&O 2/87
C       GSLOLD=GSLB
C       WPOLD=WPI
C       DOLD=SOLD-GOLD
C       DOLDSTR=AMAX1(0.01,SOLD-GOLD)
C         IPASS = 0
C         TDX = AMIN1( 2*DX, X )
C C G&O 2/87 END
C C
C       YNEW=0
C C
C C     CONVERT CONTROLLING WAVE HEIGHT TO
C C     ZERO MOMENT WAVE HEIGHT
C C
C C G&O MAY 89
C C
C C G&O SEPT 88
C C
C C END G&O SEPT 88
C C
C C     THE ORIGINAL PARTIAL IMPLEMENTATION
C C     OF THE THOMPSON-VINCENT PROCEDURE TO
C C     CALCULATE HM0 IS REINSTALLED BELOW
C C
C       YOLD = HM0( WHI, SOLD-BEFO , WPI )
C C
C C END G&O MAY 89
C C
C C     CHECK FOR EXIT CONDITION
C C
C C G&O COMMENT OUT 2/87
C C END G&O COMMENT OUT
C C
C C G&O 2/87
C  110    CONTINUE
C C
C         XNEW = XOLD + TDX
C C G&O 2/87 END
C C
C       IF(XNEW.GT.X)GO TO 135
C C
C C G&O 2/87
C         IF( XNEW .EQ. X ) IPASS = 1
C C G&O 2/87 END
C C
C C     DETERMINE COEFFFICIENTS
C       TSAVG=TSOLD+DTS
C       SAVG=SOLD+DS
C       GAVG=GOLD+DG
C       DAVG=SAVG-GAVG
C CG&O 2/87
C       DAVGSTR=AMAX1(0.01,DAVG)
C       GSLAVG=GSLOLD+DGSL
C       GSLNEW=GSLAVG+DGSL
C       DXN=2.*DX
C       DNEW=DAVG+(DS-DG)
C       DNEWSTR=AMAX1(0.01,DNEW)
C C
C         TSNEW = TSAVG + DTS
C         SNEW  = SAVG + DS
C         GNEW  = GAVG + DG
C C
C C
C C               CALCULATE COEFFICIENTS PREPARATORY TO CALCULATING WPNEW
C C
C         BETHAVG = TANH(CBETH*(DAVGSTR**0.75))
C C
C         BETTAVG = TANH(CBETT*(DAVGSTR**0.375))
C         IF(BETTAVG.GT.0.1)THEN
C         FNUT = ( BETHAVG/(BETTAVG**2) )**2
C         ELSE
C         FNUT = CFNUT
C         ENDIF
C C
C         BETTOLD = TANH(CBETT*(DOLDSTR**0.375))
C         WPFOLD = CWPF*BETTOLD
C C
C C
C         NUTAVG = CNUT*(BETTAVG)*FNUT
C C
C         RSTRAVG =  ( CRSTR*BETHAVG )**2
C C
C         ROLD = YOLD*YOLD
C C       RAT1 = AMIN1((ROLD/RSTRAVG),1.0)
C C
C         RAT2 = ROLD/RSTRAVG
C         RAT1= AMIN1(RAT2,1.0)
C         FTAVG = (1.-RAT1)**NUTAVG
C C
C         DLTAOLD=1
C         IF((RAT2.GE.1) .OR. (WPOLD.GE.WPFOLD)) DLTAOLD=0.0
C C
C         IF(RAT2. LE. 1.0) THEN
C           DLTAPLD = 1.0
C         ELSE
C           DLTAPLD = 1.0/RAT2
C         ENDIF
C C
C         IF( RAT2 .LT. 1.0 ) THEN
C                 DLTAPPD = 1.0
C         ELSE
C                 DLTAPPD = 0.0
C         ENDIF
C C
C         DELTAU = DXN*CTAU*FTAVG*DLTAOLD
C C
C         TAUOLD = WPOLD**3
C C
C         TAUNEW = TAUOLD+DELTAU
C C
C C       CALCULATE SPECTRAL PEAK WAVE PERIOD AT END OF GRID CELL, WPNEW
C C
C         WPNEW = TAUNEW**C1D3
C C
C C               CALCULATE ADDITIONAL FACTORS PREPARATORY TO CALCULATING
C C               THE NEW HM0, YNEW
C C
C C               RESET DLTAOLD TO 1 AND SET DLTAPLD AND DLTAPPD TO 1
C C
C         DLTAOLD = 1.0
C         DLTAPLD = 1.0
C         DLTAPPD = 1.0
C C
C C               CALCULATE OTHER FACTORS
C C
C         BAVG = CBAVG / (BETHAVG**2)
C C
C         WLOOLD = CLO*WPOLD*WPOLD
C         WLOOLD = AMAX1(0.1,WLOOLD)
C C
C         WLONEW = CLO*WPNEW*WPNEW
C         WLONEW = AMAX1(0.1,WLONEW)
C C
C         CDNEW = DNEWSTR/WLONEW
C C
C         CDOLD = DOLDSTR/WLOOLD
C C
C C   WLOLD IS THE SPECTRAL PEAK WAVE LENGTH AT THE BEGINNING OF THE
C C   SEGMENT
C C
C         WLOLD = WLOOLD*SQRT(TANH(PI2*CDOLD))
C         WLOLD = AMAX1(0.1,WLOLD)
C C
C C   WLNEW IS THE SPECTRAL PEAK WAVLENGTH AT THE END OF THE SEGMENT
C C
C         WLNEW = WLONEW*SQRT(TANH(PI2*CDNEW))
C         WLNEW = AMAX1(0.1,WLNEW)
C         WLI=WLNEW
C C
C         SLOLD = PI4*DOLDSTR/WLOLD
C         SLOLD = AMAX1(0.01,SLOLD)
C C
C         SLNEW = PI4*DNEWSTR/WLNEW
C         SLNEW = AMAX1(0.01,SLNEW)
C C
C         IF(SLOLD.GT.0.04)THEN
C         FLOLD = SLOLD/SINH(AMIN1(50.0,SLOLD))
C         ELSE
C         FLOLD = 1.0
C         ENDIF
C C
C         IF(SLNEW.GT.0.04)THEN
C         FLNEW = SLNEW/SINH(AMIN1(50.0,SLNEW))
C         ELSE
C         FLNEW = 1.0
C         ENDIF
C C
C C   CGTOLD IS THE PRODUCT OF THE SPECTRAL PEAK PERIOD AND WAVE GROUP
C C   VELOCITY AT THE BEGINNING OF THE SEGMENT
C C
C C   CGTNEW IS THE PRODUCT AT THE END OF THE GRID
C C
C         CGTOLD = 0.5*WLOLD*(1.0+FLOLD)
C C
C         CGTNEW = 0.5*WLNEW*(1.0+FLNEW)
C C
C C               CALCULATE VARIOUS FACTORS AT THE MIDPOINT OF THE
C C               GRID CELL. THESE ARE DESIGNATED BY AN "AVG" AT THE
C C               END.
C C
C         WLOAVG = 0.5*CLO*((WPOLD**2)+(WPNEW**2))
C         WLOAVG = AMAX1(0.1,WLOAVG)
C C
C         CDAVG = DAVGSTR/WLOAVG
C C
C         DPAVG = PI2 * CDAVG
C         SDPAVG = AMIN1( 1.E9 , SINH( AMIN1(50.0,DPAVG) ) )
C         CDPAVG = AMIN1( 1.E9 , COSH( AMIN1(50.0,DPAVG) ) )
C C
C         FDAVG = SQRT(TANH(PI2*CDAVG))
C C
C         WLAVG = WLOAVG*FDAVG
C         WLAVG = AMAX1(0.1,WLAVG)
C C
C         SLAVG = PI4*DAVGSTR/WLAVG
C         SLAVG = AMAX1( 0.01 , SLAVG )
C C
C         SSLAVG = AMIN1( 1.E9 , SINH(AMIN1(50.0,SLAVG) ) )
C         CSLAVG = AMIN1( 1.E9 , COSH(AMIN1(50.0,SLAVG) ) )
C C
C         IF(SLAVG.GT.0.04)THEN
C         FLAVG = SLAVG/SSLAVG
C         ELSE
C         FLAVG = 1.0
C         ENDIF
C C
C         IF( SLAVG .GT. 0.04 ) THEN
C                 FL1AVG = (SSLAVG - (SLAVG*CSLAVG) ) / (SSLAVG**2)
C                 FL5AVG = 1.0 + ( (FLAVG**2)*CSLAVG )
C         ELSE
C                 FL1AVG = 0.0
C                 FL5AVG = 2.0
C         ENDIF
C C
C         IF( DPAVG .GT. 0.04 ) THEN
C         T2AVG = SQRT((WLOAVG*CDAVG)/(SDPAVG*(CDPAVG**3)))
C         ELSE
C                 T2AVG = SQRT( WLOAVG/PI2 )
C         ENDIF
C C
C         T4AVG = PI2 * FL1AVG
C         T5AVG = PID2 * FL5AVG * T2AVG
C C
C         CGTAVG = 0.5*WLAVG*(1.+FLAVG)
C C
C         IF( DPAVG .GT. 0.04 ) THEN
C                 T78AVG = ( SQRT(DAVGSTR) )/CGTAVG
C         ELSE
C                 T78AVG = 1./SQRT( PI2*WLOAVG )
C         ENDIF
C C
C         T7AVG = 2. * T4AVG * T78AVG
C         T8AVG = T5AVG * T78AVG
C C
C         AAVG = CAAVG
C C
C C   WPAVG IS THE SPECTRAL PEAK PERIOD AT THE MIDPOINT OF THE SEGMENT
C C
C         WPAVG = 0.5*(WPOLD+WPNEW)
C C
C C   CAPGAM IS CAPITAL GAMMA, THE PLANT PARAMETER FACTOR MULTIPLIES
C C   HM0**3 IN THE EXPRESSION FOR THE WAVE ENERGY DISSIPATION DUE TO
C C   MARSH GRASS
C C
C C               ZERO OUT CAPGAM AND CAVG SINCE THIS SUBROUTINE DOES
C C               NOT HANDLE MARSH PLANTS
C C
C         CAPGAM = 0.0
C C
C         CAVG =   0.0
C C
C         BPAVG = ( BAVG + (CAVG*YOLD) ) * DXN
C C
C         P = -BPAVG
C C
C         Q2A = AAVG * DXN
C C
C         EFAVG = EXP(P)
C C
C         IF( ABS(P) .GT. 0.001 ) THEN
C                 Q3 = ( 1.-EFAVG )/BPAVG
C         ELSE
C                 Q3 = 1.0
C         ENDIF
C C
C         Q27 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DAVGSTR) ) )
C         Q17 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DOLDSTR) ) )
C C
C         Q28 = (DAVGSTR/DNEWSTR)**T8AVG
C         Q18 = (DOLDSTR/DNEWSTR)**T8AVG
C C
C C               CALCULATE RNEW AND YNEW AT END OF GRID CELL
C C
C         RNEW = (ROLD*Q18*Q17*EFAVG) + (Q2A*Q28*Q27*Q3)
C         YNEW = SQRT(RNEW)
C C
C C   YNEW IS THE HM0 AT END OF GRID CELL
C C
C       WPI=WPNEW
C C
C CG&O 2/87 END
C C
C CG&O 2/87 COMMENTED OUT  *****
C C
C C G&O 2/87 END COMMENTING OUT******************************
C C
C C               CONVERT ZERO MOMENT WAVE HEIGHT YNEW TO SIGNIFICANT
C C               WAVE HEIGHT HS
C C
C         WLISTR = AMAX1( 0.1 , WLI )
C C
C         EPP=YNEW/(4*WLISTR*.002)
C         EPP = AMAX1( 1.0E-4 , EPP )
C C
C         WPISTR = AMAX1( 0.1 , WPI )
C C
C C G&O 2/87 COMMENTED OUT
C C G&O 2/87 END COMMENTED OUT
C C
C       DD=DNEWSTR/(G*(WPISTR**2))
C C
C C
C C     THE ORIGINAL PARTIAL IMPLEMENTATION
C C     OF THE THOMPSON-VINCENT PROCEDURE
C C     TO CALCULATE HM0 IS REINSTALLED BELOW
C C
C       DC=5.5722E-5
C       PART1=.9+(.42707*ALOG10(DD/DC))
C       IF(EPP.LE.2)PHI=PART1-(1.411296*ALOG10(EPP))
C       IF(EPP.GT.2)PHI=PART1-C2LOG-(1.016768*ALOG10(EPP))
C C
C C     D0=1.357E-3
C C
C C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
C C
C       TMP1 = CRAV * (WPISTR**1.7114)
C       TMP  = TMP1 / (DNEWSTR**.8557)
C       RAV = 1.477 + .477 * (TMP - 1.0)
C C
C       IF(RAV.GT.1.7)RAV=1.7
C       IF( RAV .LT. 1.0 ) RAV= 1.0
C C
C       IF(PHI.LT.1)PHI=1
C       IF(PHI.GT.RAV)PHI=RAV
C C
C C END G&O MAY 89
C C
C       HS=PHI*YNEW
C C
C C     CONVERT SIGNIFICANT WAVE HEIGHT TO
C C     CONTROLLING WAVE HEIGHT WHT
C       WHT=1.6*HS
C C
C C G&O 2/87
C C
C C               IF THE CONTROLLING WAVE BREAKS, COMPUTE THE EQUIV-
C C               ALENT ZERO MOMENT WAVE HEIGHT.
C C
C         HBM = SHBM( WPNEW, GSLNEW , DNEWSTR )
C C
C C G&O SEPT 88
C C
C C     THE STATEMENT BELOW IS COMMENTED OUT AND
C C     CORRECTED
C C
C   IF( WHT .GE. (HBM-EPSHB)) THEN
C C
C C END G&O SEPT 88
C C
C                 WHT = HBM
C                 YNEW = HM0( WHT, DNEWSTR , WPI )
C         ENDIF
C C
C  115    CONTINUE
C C
C C               STORE RESULTS AT 100 FT. INTERVALS OR GREATER OR
C C               AT END OF TRANSECT SEGMENT
C C
C         XSUM = XSUM + TDX
C C
C       IF(XSUM.LT.100)GO TO 120
C C G&O 2/87 END
C C
C C     INCREMENT ARRAY SUBSCRIPT AND CHECK AGAINST
C C     ARRAY DIMENSION
C       NFO=NFO+1
C       IF(NFO.GT.500)WRITE(6,995)
C       IF(NFO.GT.500)STOP
C C
C C     COMPUTE NEW GROUND STATION,WAVE HEIGHT, AND
C C     WAVE ELEVATION AND STORE RESULTS
C       GS(NFO)=BSFO+XNEW
C C
C CG&O 2/87
C       HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
C       WHM=HBM
C C
C       IF(WHT.GT.WHM)WHT=WHM
C       HBW(NFO)=WHT
C C
C C G&O 2/87
C       STMP=GNEW+DNEW
C       EW(NFO)=.7*HBW(NFO)+STMP
C C G&O 2/87 END
C C
C C G&O SEPT 88
C C
C       SPWP(NFO) = WPNEW
C C
C C END G&O SEPT 88
C C
C C
C       NFOM1=NFO-1
C       SA(NFO,1)=GS(NFOM1)
C       SA(NFO,2)=GS(NFO)
C       SA(NFO,3)=TSNEW
C       SA(NFO,4)=SNEW
C C
C C G&O 2/87
C C     SA(NFO,5)=1
C C
C         IF( GS(NFO) .EQ. ESFO ) THEN
C                 SA( NFO,5 ) = STOF
C         ELSE
C                 SA( NFO,5 ) = TOF
C         ENDIF
C C G&O 2/87 END
C C
C       XSUM=0
C C
C C G&O 2/87 COMMENTED OUT
C C G&O 2/87 END COMMENTED OUT
C C
C   120 CONTINUE
C C
C C G&O 2/87
C C
C C               IF IPASS .EQ. 1, THEN THIS IS LAST PASS THROUGH THE
C C               LOOP. EXIT LOOP
C C
C         IF( IPASS .EQ. 1 ) GO TO 135
C C
C C G&O 2/87 END
C C
C C               ADJUST STEP SIZE
C C
C       YTEST=ABS(YNEW-YOLD)
C C
C C G&O 2/87
C         TDXMAX = X - XNEW
C         DXMAX  = 0.5 * TDXMAX
C C G&O 2/87 END
C C
C       IF( YTEST .GT. .05 ) GO TO 125
C C
C C G&O 2/87
C C     DX=2*DX
C C
C         DXOLD = DX
C         DXNEW = AMIN1( 2.*DX ,DXMAX )
C         RATX  = 0.5 * DXNEW/DXOLD
C         DX    = DXNEW
C         TDX   = AMIN1( 2.*DX, TDXMAX)
C C
C C
C       DTS=2*DTS*RATX
C       DS=2*DS*RATX
C       DG=2*DG*RATX
C       DGSL=2.*DGSL*RATX
C C G&O 2/87 END
C C
C       GO TO 130
C C
C C G&O 2/87
C   125 IF( YTEST .LT. 0.1 ) GO TO 1000
C       IF( DX    .LT. 5.0 ) GO TO 1000
C C
C C     DX=.5*DX
C C
C         DXOLD = DX
C         DXNEW = AMIN1( 0.5*DX,DXMAX )
C         RATX =  2. * DXNEW/DXOLD
C         DX   = DXNEW
C         TDX  = AMIN1( 2.*DX,TDXMAX )
C C
C       DTS=.5*DTS*RATX
C       DS=.5*DS*RATX
C       DG=.5*DG*RATX
C       DGSL=0.5*DGSL*RATX
C C
C       GO TO 130
C C
C  1000   CONTINUE
C C
C         DXOLD = DX
C         DXNEW = AMIN1( DX,DXMAX )
C         RATX  = DXNEW/DXOLD
C         DX    = DXNEW
C         TDX   = AMIN1( 2.*DX,TDXMAX )
C C
C       DTS=DTS*RATX
C       DS=DS*RATX
C       DG=DG*RATX
C       DGSL=DGSL*RATX
C C G&O 2/87 END
C C
C C     UPDATE RECURSIVE VARIABLES AND LOOP BACK
C   130 XOLD=XNEW
C       YOLD=YNEW
C       TSOLD=TSNEW
C       SOLD=SNEW
C       GOLD=GNEW
C C
C C G&O 2/87
C       GSLOLD=GSLNEW
C       WPOLD=WPNEW
C       DOLD=DNEW
C       DOLDSTR=AMAX1(0.01,DOLD)
C C G&O 2/87 END
C C
C       GO TO 110
C C
C C               STORE FINAL VALUE IF IT HAS NOT ALREADY BEEN STORED
C C
C   135 IF(GS(NFO).EQ.ESFO)GO TO 140
C       NFO=NFO+1
C       GS(NFO)=ESFO
C C
C C G&O 2/87
C       HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
C       WHM=HBM
C       WHT=AMIN1(WHT,WHM)
C C G&O 2/87 END
C C
C       HBW(NFO)=AMIN1(WHT,WHM)
C       STMP=GNEW+DNEW
C       EW(NFO)=.7*HBW(NFO)+STMP
C C
C C G&O SEPT 88
C C
C       SPWP(NFO) = WPNEW
C C
C C END G&O SEPT 88
C C
C       SA(NFO,1)=XOLD
C       SA(NFO,2)=ESFO
C       SA(NFO,3)=SETN
C       SA(NFO,4)=SEN
C C
C C G&O 2/87
C C
C         SA( NFO,5 ) = STOF
C C
C  140    CONTINUE
C C G&O 2/87 END
C C
C C               INSERT ABGF IF REQUIRED
C C
C       IF(ABGF.NE.1)GO TO 150
C       NAP=NAP+1
C       AP(NAP)=ESFO
C       M=M+1
C       STEG(M)=GS(NFO)
C       ELZ(M)=EW(NFO)
C C
C C     GET READY FOR NEXT FETCH OR OBSTRUCTION AND RETURN
C   150 BSFO=ESFO
C       BEFO=EEFO
C C
C C G&O 2/87   **  COMMENTTED OUT AND INSERT ***
C       WPT=WPNEW
C C G&O 2/87   **  END OF COMMENTTED OUT AND INSERT ***
C       RETURN
C   500 FORMAT(/,10X,34HINVALID DATA IN FIELD 1 OF IF CARD)
C   520 FORMAT(/,10X,34HINVALID DATA IN FIELD 1 OF OF CARD)
C   580 FORMAT(/,10X,11HJOB DUMPED.)
C   600 FORMAT(/,10X,'WAVE PERIOD LESS THAN OR EQUAL TO ZERO',/
C      !         10X,'IN SUBROUTINE FETCH.ABORT RUN')
C   995 FORMAT(/,10X,38HARRAY DIMENSIONS EXCEEDED. JOB DUMPED.)
C       END
C       SUBROUTINE VEG(WPI,TEST,WPT,W)
C C     THIS SUBROUTINE READS MG CARDS ASSOCIATED WITH
C C     MARSH GRASS OR OTHER PLANT COMMUNITIES AND DETERMINES
C C     WAVE HEIGHTS AND ELEVATIONS.
C C
C C               THIS VERSION OF VEG SOLVES THE WAVE ACTION EQUATION
C C               WITH SHOALING EFFECTS. THE NET WIND ENERGY INPUT
C C               FUNCTION IS BASED ON AN APPROXIMATE FORM OF THE 1984
C C               SPM WAVE GROWTH EXPRESSIONS. THE SPECTRAL PEAK WAVE
C C               PERIOD IS COMPUTED USING AN APPROXIMATE FORM OF 1984
C C               SPM WAVE PERIOD GROWTH EXPRESSIONS IN DIFFERENTIAL
C C               FORM. THE WAVE PERIOD APPROACH IS TANTAMOUNT TO USING
C C               THE CONSERVATION OF WAVES EQUATION IN DIFFERENTIAL FORM
C C
C       LOGICAL TEST
C C
C C G&O 2/87
C         REAL NUTAVG
C C G&O 2/87 END
C C
C       DIMENSION CDE(10),FCOV(10),HBI(10),PPSF(10),SDB(10),
C      1SDM(10),SDT(10),TYPE(10),FAR(10),DEF1(10,8),DEF2(10,8),DEF(10,8)
C C
C       DIMENSION PARAM(10),HBW(500),AP(500),
C      1STEG(500),ELZ(500),GS(500),EW(500),SA(500,5)
C C
C       COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
C      1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
C C
C       COMMON /PP/NPLTS,TYPE,CDE,FCOV,HBI,PPSF,SDB,SDM,SDT,FAR
C CG&O 2/87
C       COMMON /BTSLOP/GSLB,GSLE
C CG&O 2/87 END
C C
C C
C CG&O SEPT 88
C C
C       DIMENSION SPWP(500)
C C
C       COMMON/ARRAY1/ SPWP
C C
C C END G&O SEPT 88
C C
C C     RETRIEVE DATA FROM ARRAY PARAM
C C
C       EPSHB = 1.0E-5
C C
C       ESFO=PARAM(1)
C       EEFO=PARAM(2)
C       REG1=PARAM(3)
C       WF1=PARAM(4)
C       REG2=PARAM(5)
C       NPLTS=PARAM(6)
C       SETN=PARAM(7)
C       SEN=PARAM(8)
C       ABGF=PARAM(10)
C C G&O 2/87
C C
C C               SET STOF AND RESET TOF
C C
C         STOF = TOF
C         TOF = 1.0
C C
C C END G&O 2/87
C C
C C**  THE BOTTOM SLOPE AT END OF TRANSECT SEGMENT,GSLE, AND BOTTOM
C C**  SLOPE AT BEGINNING OF SEGMENT, GSLB, HAVE BEEN SET PRIOR TO
C C**  ENTERING THIS SUBROUTINE
C C
C C     CHECK FOR INVALID DATA
C       IF(ESFO.GT.BSFO)GO TO 10
C       WRITE(6,500)
C       TEST=.TRUE.
C    10 IF(REG1.LE.8.AND.REG2.LE.8)GO TO 20
C       WRITE(6,520)
C       TEST=.TRUE.
C    20 IF(REG1.EQ.INT(REG1).AND.REG2.EQ.INT(REG2))GO TO 25
C       WRITE(6,520)
C       TEST=.TRUE.
C    25 IF(REG1.GE.1.AND.REG2.GE.0)GO TO 30
C       WRITE(6,520)
C       TEST=.TRUE.
C    30 IF(WF1.LE.1.AND.WF1.GE.0)GO TO 40
C       WRITE(6,530)
C       TEST=.TRUE.
C    40 IF(NPLTS.LE.10.AND.NPLTS.GT.0)GO TO 60
C       WRITE(6,540)
C       TEST=.TRUE.
C    60 CONTINUE
C       IF(TEST)GO TO 90
C C
C C     SET DEFAULT FOR WF1
C       IF(WF1.EQ.0)WF1=1
C C
C C     SET DEFAULT SURGE VALUES
C       IF(SETN.EQ.0)SETN=SET
C       IF(SEN.EQ.0)SEN=SE
C C
C C     READ MG CARDS
C       DO 80 I=1,NPLTS
C       READ(10,560)TOF, PARAM(1),(PARAM(J),J=2,10)
C       IF(TOF.EQ. 'MG')GO TO 70
C       TEST=.TRUE.
C       WRITE(6,570)
C       BACKSPACE 5
C       GO TO 90
C    70 WRITE(6,590)TOF,PARAM(1),(PARAM(J),J=2,10)
C       WRITE(8,590)TOF,PARAM(1),(PARAM(J),J=2,10)
C       TYPE(I)=PARAM(1)
C       CDE(I)=PARAM(2)
C       FCOV(I)=PARAM(3)
C       HBI(I)=PARAM(4)
C       PPSF(I)=PARAM(5)
C       SDB(I)=PARAM(6)/12.0
C       SDM(I)=PARAM(7)/12.0
C       SDT(I)=PARAM(8)/12.0
C       FAR(I)=PARAM(9)
C       IF(FCOV(I).LE.NPLTS)GO TO 80
C       TEST=.TRUE.
C       WRITE(6,545)
C 80    CONTINUE
C C
C C     LOOK UP DEFAULT PLANT PARAMETERS
C       IF(REG2.NE.0)GO TO 85
C       CALL LOOKUP(DEF,REG1,TEST)
C       GO TO 90
C    85 CALL LOOKUP(DEF1,REG1,TEST)
C       CALL LOOKUP(DEF2,REG2,TEST)
C C
C C     COMPUTE WEIGHTED AVERAGE
C       CALL WAVG(DEF1,DEF2,DEF,WF1,REG1,REG2,NPLTS,TYPE,TEST)
C C
C C     CHECK FOR ZERO WAVE PERIOD
C    90 IF(WPI.GT.0)GO TO 95
C       WRITE(6,600)
C       TEST=.TRUE.
C C
C C     RETURN IF ERROR FLAG IS SET
C    95 IF(.NOT.TEST)GO TO 100
C       WRITE(6,580)
C       REWIND 8
C       REWIND 9
C       RETURN
C   100 CONTINUE
C C
C C     WRITE PLANT PARAMETERS TO SCRATCH FILE
C       DO 105 I=1,NPLTS
C       WRITE(9,610)TYPE(I),(DEF(I,J),J=1,8)
C   105 CONTINUE
C C
C C     SET MINIMUM WAVE PERIOD TO .1 SECONDS
C       IF(WPI.LT..1)WPI=.1
C C
C C G&O 2/87
C C
C C**  EVALUATE VARIOUS CONSTANTS NEEDED FOR EVALUATION
C C
C C    W = WINDSPEED IN STATUTE MILES PER HOUR. IT IS READ IN AS ONE OF
C C    THE SUBROUTINE ARGUMENTS.
C C
C         CA = (5.28)*(.589)/3.6
C C
C         UA = CA*(W**1.23)
C C
C         ATS = 7.54
C C
C         SIGT = .0379
C C
C         G = 32.2
C C
C C G&O SEPT 88   FOR PC VERSION
C C
C       CRAV=((1.357E-3)*G)**.8557
C C
C C END G&O SEPT 88 FOR PC VERSION
C C
C         AH = 0.283
C C
C         GAMH = 0.53
C C
C         SIGH = .00565
C C
C         GAMT = 0.833
C C
C         PI = 3.1415926536
C C
C C
C         CTAU = ((ATS*SIGT)**3)*UA/(G*G)
C C
C         CRSTR = AH*UA*UA/G
C C
C         CWPF = ATS*UA/G
C C
C         CNUT = (SIGT**3)/(SIGH*SIGH)
C C
C         CBETH = GAMH*((G/(UA*UA))**0.75)
C C
C         CBETT = GAMT*((G/(UA*UA))**0.375)
C C
C         PI2 = 2*PI
C C
C         PID2 = PI * 0.5
C C
C         CLO = G/PI2
C C
C         PI4 = 4*PI
C C
C         CAAVG = ((SIGH*AH)**2)*(UA*UA)/G
C C
C         CBAVG = (SIGH**2)*G/(UA*UA)
C C
C         CPAVG = ((SIGT*ATS)**2)/PI4
C C
C         CCAVG = 1./(3.*PI*SQRT(2.0))
C C
C         C1D3 =1./3.
C         CFNUT =  ( CBETH/(CBETT**2) )**2
C C G&O 2/87 END
C C
C C
C C     SOLVE DIFFERENTIAL EQUATION
C C
C C G&O SEPT 88
C C                       CALCULATE INITIAL DELTA X. NOTE THAT THIS
C C                       INITIAL DELTA X STARTS OFF 5 TIMES SMALLER FOR
C C                       VH CARDS THAN IF OR OF CARDS. COMMENT OUT
C C                       STATEMENTS WHICH WERE ORIGINALLY USED TO
C C                       SET INITIAL DELTA X AND REPLACE WITH REVISED
C C                       STATEMENTS
C C
C C     DETERMINE DELTA X
C C     DX=25
C       DX=5
C       X=ESFO-BSFO
C C     IF(X.LT.500)DX=X/20.0
C       IF(X.LT.100)DX=X/20.0
C C
C C G&O END SEPT 88
C C
C C     EVALUATE COMMON FACTORS OUTSIDE THE LOOP
C       DTS=DX*(SETN-SA(NFO,3))/X
C       DS=DX*(SEN-SA(NFO,4))/X
C       DG=DX*(EEFO-BEFO)/X
C C G&O 2/87
C         DGSL=DX*(GSLE-GSLB)/X
C C G&O 2/87 END
C       SIG=.0125
C       GOU2=.00415806
C       OOM=2.38095
C C     PI=3.14159
C C     G=32.2
C         C1LOG= ALOG10(2.0)
C         C2LOG= .394528 * C1LOG
C       DSOOM=.68057
C C
C C     INITIALIZE VARIABLES
C       XSUM=0
C       XOLD=0
C       TSOLD=SA(NFO,3)
C       SOLD=SA(NFO,4)
C       GOLD=BEFO
C C
C C G&O 2/87
C       GSLOLD=GSLB
C       WPOLD=WPI
C       DOLD=SOLD-GOLD
C       DOLDSTR=AMAX1(0.01,SOLD-GOLD)
C         IPASS = 0
C         TDX = AMIN1( 2*DX, X )
C C G&O 2/87 END
C C
C       YNEW=0
C C
C C     CONVERT CONTROLLING WAVE HEIGHT TO
C C     ZERO MOMENT WAVE HEIGHT
C C
C C
C C G&O MAY 89
C C
C C
C C     THE ORIGINAL PARTIAL IMPLEMENTATION
C C     OF THE THOMPSON-VINCENT PROCEDURE
C C     TO CALCULATE HM0 IS REINSTALLED BELOW
C C
C       YOLD = HM0( WHI, SOLD-BEFO , WPI )
C C
C C END G&O MAY 89
C C
C C     CHECK FOR EXIT CONDITION
C C
C C G&O COMMENT OUT 2/87
C C END G&O COMMENT OUT
C C
C C G&O 2/87
C  110    CONTINUE
C C
C         XNEW = XOLD + TDX
C C G&O 2/87 END
C C
C       IF(XNEW.GT.X)GO TO 135
C C
C C G&O 2/87
C         IF( XNEW .EQ. X ) IPASS = 1
C C G&O 2/87 END
C C
C C     DETERMINE COEFFFICIENTS
C       TSAVG=TSOLD+DTS
C       SAVG=SOLD+DS
C       GAVG=GOLD+DG
C       DAVG=SAVG-GAVG
C CG&O 2/87
C       DAVGSTR=AMAX1(0.01,DAVG)
C       GSLAVG=GSLOLD+DGSL
C       GSLNEW=GSLAVG+DGSL
C       DXN=2.*DX
C       DNEW=DAVG+(DS-DG)
C       DNEWSTR=AMAX1(0.01,DNEW)
C C
C         TSNEW = TSAVG + DTS
C         SNEW  = SAVG + DS
C         GNEW  = GAVG + DG
C C
C C               CALCULATE COEFFICIENTS PREPARATORY TO CALCULATING WPNEW
C C
C         BETHAVG = TANH(CBETH*(DAVGSTR**0.75))
C C
C         BETTAVG = TANH(CBETT*(DAVGSTR**0.375))
C         IF(BETTAVG.GT.0.1)THEN
C         FNUT = ( BETHAVG/(BETTAVG**2) )**2
C         ELSE
C         FNUT = CFNUT
C         ENDIF
C C
C         BETTOLD = TANH(CBETT*(DOLDSTR**0.375))
C         WPFOLD = CWPF*BETTOLD
C C
C C
C         NUTAVG = CNUT*(BETTAVG)*FNUT
C C
C         RSTRAVG =  ( CRSTR*BETHAVG )**2
C C
C         ROLD = YOLD*YOLD
C C       RAT1 = AMIN1((ROLD/RSTRAVG),1.0)
C C
C         RAT2 = ROLD/RSTRAVG
C         RAT1= AMIN1(RAT2,1.0)
C         FTAVG = (1.-RAT1)**NUTAVG
C C
C         DLTAOLD=1
C         IF((RAT2.GE.1) .OR. (WPOLD.GE.WPFOLD)) DLTAOLD=0.0
C C
C         IF(RAT2. LE. 1.0) THEN
C           DLTAPLD = 1.0
C         ELSE
C           DLTAPLD = 1.0/RAT2
C         ENDIF
C C
C         IF( RAT2 .LT. 1.0 ) THEN
C                 DLTAPPD = 1.0
C         ELSE
C                 DLTAPPD = 0.0
C         ENDIF
C C
C         DELTAU = DXN*CTAU*FTAVG*DLTAOLD
C C
C         TAUOLD = WPOLD**3
C C
C         TAUNEW = TAUOLD+DELTAU
C C
C C       CALCULATE SPECTRAL PEAK WAVE PERIOD AT END OF GRID CELL, WPNEW
C C
C         WPNEW = TAUNEW**C1D3
C C
C C               CALCULATE ADDITIONAL FACTORS PREPARATORY TO CALCULATING
C C               THE NEW HM0, YNEW
C C
C C               RESET DLTAOLD TO 1 AND SET DLTAPLD AND DLTAPPD TO 1
C C
C         DLTAOLD = 1.0
C         DLTAPLD = 1.0
C         DLTAPPD = 1.0
C C
C C               CALCULATE OTHER FACTORS
C C
C         BAVG = CBAVG / (BETHAVG**2)
C C
C         WLOOLD = CLO*WPOLD*WPOLD
C         WLOOLD = AMAX1(0.1,WLOOLD)
C C
C         WLONEW = CLO*WPNEW*WPNEW
C         WLONEW = AMAX1(0.1,WLONEW)
C C
C         CDNEW = DNEWSTR/WLONEW
C C
C         CDOLD = DOLDSTR/WLOOLD
C C
C C   WLOLD IS THE SPECTRAL PEAK WAVE LENGTH AT THE BEGINNING OF THE
C C   SEGMENT
C C
C         WLOLD = WLOOLD*SQRT(TANH(PI2*CDOLD))
C         WLOLD = AMAX1(0.1,WLOLD)
C C
C C   WLNEW IS THE SPECTRAL PEAK WAVLENGTH AT THE END OF THE SEGMENT
C C
C         WLNEW = WLONEW*SQRT(TANH(PI2*CDNEW))
C         WLNEW = AMAX1(0.1,WLNEW)
C         WLI=WLNEW
C C
C         SLOLD = PI4*DOLDSTR/WLOLD
C         SLOLD = AMAX1(0.01,SLOLD)
C C
C         SLNEW = PI4*DNEWSTR/WLNEW
C         SLNEW = AMAX1(0.01,SLNEW)
C C
C         IF(SLOLD.GT.0.04)THEN
C         FLOLD = SLOLD/SINH(AMIN1(50.0,SLOLD))
C         ELSE
C         FLOLD = 1.0
C         ENDIF
C C
C         IF(SLNEW.GT.0.04)THEN
C         FLNEW = SLNEW/SINH(AMIN1(50.0,SLNEW))
C         ELSE
C         FLNEW = 1.0
C         ENDIF
C C
C C   CGTOLD IS THE PRODUCT OF THE SPECTRAL PEAK PERIOD AND WAVE GROUP
C C   VELOCITY AT THE BEGINNING OF THE SEGMENT
C C
C C   CGTNEW IS THE PRODUCT AT THE END OF THE GRID
C C
C         CGTOLD = 0.5*WLOLD*(1.0+FLOLD)
C C
C         CGTNEW = 0.5*WLNEW*(1.0+FLNEW)
C C
C C               CALCULATE VARIOUS FACTORS AT THE MIDPOINT OF THE
C C               GRID CELL. THESE ARE DESIGNATED BY AN "AVG" AT THE
C C               END.
C C
C         WLOAVG = 0.5*CLO*((WPOLD**2)+(WPNEW**2))
C         WLOAVG = AMAX1(0.1,WLOAVG)
C C
C         CDAVG = DAVGSTR/WLOAVG
C C
C         DPAVG = PI2 * CDAVG
C         SDPAVG = AMIN1( 1.E9 ,  SINH( AMIN1(50.0,DPAVG) ) )
C         CDPAVG = AMIN1( 1.E9 ,  COSH( AMIN1(50.0,DPAVG) ) )
C C
C         FDAVG = SQRT(TANH(PI2*CDAVG))
C C
C         WLAVG = WLOAVG*FDAVG
C         WLAVG = AMAX1(0.1,WLAVG)
C C
C         SLAVG = PI4*DAVGSTR/WLAVG
C         SLAVG = AMAX1( 0.01 , SLAVG )
C C
C         SSLAVG = SINH(AMIN1(50.0,SLAVG))
C         CSLAVG = COSH(AMIN1(50.0,SLAVG))
C C
C         IF(SLAVG.GT.0.04)THEN
C         FLAVG = SLAVG/SSLAVG
C         ELSE
C         FLAVG = 1.0
C         ENDIF
C C
C         IF( SLAVG .GT. 0.04 ) THEN
C                 FL1AVG = (SSLAVG - (SLAVG*CSLAVG) ) / (SSLAVG**2)
C                 FL5AVG = 1.0 + ( (FLAVG**2)*CSLAVG )
C         ELSE
C                 FL1AVG = 0.0
C                 FL5AVG = 2.0
C         ENDIF
C C
C         IF( DPAVG .GT. 0.04 ) THEN
C         T2AVG = SQRT((WLOAVG*CDAVG)/(SDPAVG*(CDPAVG**3)))
C         ELSE
C                 T2AVG = SQRT( WLOAVG/PI2 )
C         ENDIF
C C
C         T4AVG = PI2 * FL1AVG
C         T5AVG = PID2 * FL5AVG * T2AVG
C C
C         CGTAVG = 0.5*WLAVG*(1.+FLAVG)
C C
C         IF( DPAVG .GT. 0.04 ) THEN
C                 T78AVG = ( SQRT(DAVGSTR) )/CGTAVG
C         ELSE
C                 T78AVG = 1./SQRT( PI2*WLOAVG )
C         ENDIF
C C
C         T7AVG = 2. * T4AVG * T78AVG
C         T8AVG = T5AVG * T78AVG
C C
C         AAVG = CAAVG
C C
C C   WPAVG IS THE SPECTRAL PEAK PERIOD AT THE MIDPOINT OF THE SEGMENT
C C
C         WPAVG = 0.5*(WPOLD+WPNEW)
C C
C C   CAPGAM IS CAPITAL GAMMA, THE PLANT PARAMETER FACTOR MULTIPLIES
C C   HM0**3 IN THE EXPRESSION FOR THE WAVE ENERGY DISSIPATION DUE TO
C C   MARSH GRASS
C C
C CG&O END
C C
C         CAPGAM = APP(DEF,DAVGSTR,NPLTS,WPAVG,WLAVG)
C C
C         CAVG = CCAVG*CAPGAM*(WPOLD+WPNEW)/CGTAVG
C C
C         BPAVG = ( BAVG + (CAVG*YOLD) ) * DXN
C C
C         P = -BPAVG
C C
C         Q2A = AAVG * DXN
C C
C         EFAVG = EXP(P)
C C
C         IF( ABS(P) .GT. 0.001 ) THEN
C                 Q3 = ( 1.-EFAVG )/BPAVG
C         ELSE
C                 Q3 = 1.0
C         ENDIF
C C
C         Q27 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DAVGSTR) ) )
C         Q17 = EXP( -T7AVG*( SQRT(DNEWSTR) - SQRT(DOLDSTR) ) )
C C
C         Q28 = (DAVGSTR/DNEWSTR)**T8AVG
C         Q18 = (DOLDSTR/DNEWSTR)**T8AVG
C C
C C               CALCULATE RNEW AND YNEW AT END OF GRID CELL
C C
C         RNEW = (ROLD*Q18*Q17*EFAVG) + (Q2A*Q28*Q27*Q3)
C         YNEW = SQRT(RNEW)
C C
C C   YNEW IS THE HM0 AT END OF GRID CELL
C C
C       WPI=WPNEW
C CG&O 2/87 END
C C
C C
C CG&O 2/87 COMMENTED OUT  *****
C C G&O 2/87 END COMMENTING OUT******************************
C C
C C               CONVERT ZERO MOMENT WAVE HEIGHT YNEW TO SIGNIFICANT
C C               WAVE HEIGHT HS
C C
C         WLISTR = AMAX1( 0.1 , WLI )
C C
C C
C         EPP=YNEW/(4*WLISTR*.002)
C         EPP = AMAX1( 1.0E-4 , EPP )
C C
C         WPISTR = AMAX1( 0.1 , WPI )
C C
C C G&O 2/87 COMMENTED OUT
C C G&O 2/87 END COMMENTED OUT
C C
C       DD=DNEWSTR/(G*(WPISTR**2))
C C
C C G&O MAY 89
C C
C C
C C     THE ORIGINAL PARTIAL IMPLEMENTATION
C C     OF THE THOMPSON-VINCENT PROCEDURE
C C     TO CALCULATE HM0 IS REINSTALLED BELOW
C C
C       DC=5.5722E-5
C       PART1=.9+(.42707*ALOG10(DD/DC))
C       IF(EPP.LE.2)PHI=PART1-(1.411296*ALOG10(EPP))
C       IF(EPP.GT.2)PHI=PART1-C2LOG-(1.016768*ALOG10(EPP))
C C
C C     D0=1.357E-3
C C
C C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
C C
C       TMP1 = CRAV * (WPISTR**1.7114)
C       TMP  = TMP1 / (DNEWSTR**.8557)
C       RAV = 1.477 + .477 * (TMP - 1.0)
C C
C       IF(RAV.GT.1.7)RAV=1.7
C       IF( RAV .LT. 1.0 ) RAV= 1.0
C C
C       IF(PHI.LT.1)PHI=1
C       IF(PHI.GT.RAV)PHI=RAV
C C
C C END G&O MAY 89
C C
C C
C       HS=PHI*YNEW
C C
C C     CONVERT SIGNIFICANT WAVE HEIGHT TO
C C     CONTROLLING WAVE HEIGHT WHT
C       WHT=1.6*HS
C C
C C G&O 2/87
C C
C C               IF THE CONTROLLING WAVE BREAKS, COMPUTE THE EQUIV-
C C               ALENT ZERO MOMENT WAVE HEIGHT.
C C
C         HBM = SHBM( WPNEW, GSLNEW , DNEWSTR )
C C
C C G&O SEPT 88
C C
C C     THE STATEMENT BELOW IS COMMENTED OUT AND
C C     CORRECTED
C C
C   IF( WHT .GE. (HBM-EPSHB)) THEN
C C
C C END G&O SEPT 88
C C
C                 WHT = HBM
C                 YNEW = HM0( WHT, DNEWSTR , WPI )
C         ENDIF
C C
C  115    CONTINUE
C C
C C               STORE RESULTS AT 100 FT. INTERVALS OR GREATER OR
C C               AT END OF TRANSECT SEGMENT
C C
C         XSUM = XSUM + TDX
C C
C       IF(XSUM.LT.100)GO TO 120
C C G&O 2/87 END
C C
C C     INCREMENT ARRAY SUBSCRIPT AND CHECK AGAINST
C C     ARRAY DIMENSION
C       NFO=NFO+1
C       IF(NFO.GT.500)WRITE(6,995)
C       IF(NFO.GT.500)STOP
C C
C C     COMPUTE NEW GROUND STATION,WAVE HEIGHT, AND
C C     WAVE ELEVATION AND STORE RESULTS
C       GS(NFO)=BSFO+XNEW
C C
C CG&O 2/87
C       HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
C       WHM=HBM
C CG&O 2/87 END
C C
C       IF(WHT.GT.WHM)WHT=WHM
C       HBW(NFO)=WHT
C C
C C G&O 2/87
C       STMP=GNEW+DNEW
C       EW(NFO)=.7*HBW(NFO)+STMP
C C G&O 2/87 END
C C
C C G&O SEPT 88
C C
C       SPWP(NFO) = WPNEW
C C
C C END G&O SEPT 88
C C
C C
C       NFOM1=NFO-1
C       SA(NFO,1)=GS(NFOM1)
C       SA(NFO,2)=GS(NFO)
C       SA(NFO,3)=TSNEW
C       SA(NFO,4)=SNEW
C C
C C G&O 2/87
C C     SA(NFO,5)=1
C C
C         IF( GS(NFO) .EQ. ESFO ) THEN
C                 SA( NFO,5 ) = STOF
C         ELSE
C                 SA( NFO,5 ) = 1.0
C         ENDIF
C C G&O 2/87 END
C C
C       XSUM=0
C C
C C G&O 2/87 COMMENTED OUT
C C G&O 2/87 END COMMENTED OUT
C C
C   120 CONTINUE
C C
C C G&O 2/87
C C
C C               IF IPASS .EQ. 1, THEN THIS IS LAST PASS THROUGH THE
C C               LOOP. EXIT LOOP
C C
C         IF( IPASS .EQ. 1 ) GO TO 135
C C
C C G&O 2/87 END
C C
C C               ADJUST STEP SIZE
C C
C       YTEST=ABS(YNEW-YOLD)
C C
C C G&O 2/87
C         TDXMAX = X - XNEW
C         DXMAX  = 0.5 * TDXMAX
C C G&O 2/87 END
C C
C       IF( YTEST .GT. .05 ) GO TO 125
C C
C C G&O 2/87
C C     DX=2*DX
C C
C         DXOLD = DX
C         DXNEW = AMIN1( 2.*DX ,DXMAX )
C         RATX  = 0.5 * DXNEW/DXOLD
C         DX    = DXNEW
C         TDX   = AMIN1( 2.*DX, TDXMAX)
C C
C C
C       DTS=2*DTS*RATX
C       DS=2*DS*RATX
C       DG=2*DG*RATX
C       DGSL=2.*DGSL*RATX
C C G&O 2/87 END
C C
C       GO TO 130
C C
C C G&O 2/87
C   125 IF( YTEST .LT. 0.1 ) GO TO 1000
C       IF( DX    .LT. 5.0 ) GO TO 1000
C C
C C     DX=.5*DX
C C
C         DXOLD = DX
C         DXNEW = AMIN1( 0.5*DX,DXMAX )
C         RATX =  2. * DXNEW/DXOLD
C         DX   = DXNEW
C         TDX  = AMIN1( 2.*DX,TDXMAX )
C C
C       DTS=.5*DTS*RATX
C       DS=.5*DS*RATX
C       DG=.5*DG*RATX
C       DGSL=0.5*DGSL*RATX
C C
C       GO TO 130
C C
C  1000   CONTINUE
C C
C         DXOLD = DX
C         DXNEW = AMIN1( DX,DXMAX )
C         RATX  = DXNEW/DXOLD
C         DX    = DXNEW
C         TDX   = AMIN1( 2.*DX,TDXMAX )
C C
C       DTS=DTS*RATX
C       DS=DS*RATX
C       DG=DG*RATX
C       DGSL=DGSL*RATX
C C G&O 2/87 END
C C
C C     UPDATE RECURSIVE VARIABLES AND LOOP BACK
C   130 XOLD=XNEW
C       YOLD=YNEW
C       TSOLD=TSNEW
C       SOLD=SNEW
C       GOLD=GNEW
C C
C C G&O 2/87
C       GSLOLD=GSLNEW
C       WPOLD=WPNEW
C       DOLD=DNEW
C       DOLDSTR=AMAX1(0.01,DOLD)
C C G&O 2/87 END
C C
C       GO TO 110
C C
C C               STORE FINAL VALUE IF IT HAS NOT ALREADY BEEN STORED
C C
C   135 IF(GS(NFO).EQ.ESFO)GO TO 140
C       NFO=NFO+1
C       GS(NFO)=ESFO
C C
C C G&O 2/87
C       HBM=SHBM(WPNEW,GSLNEW,DNEWSTR)
C       WHM=HBM
C       WHT=AMIN1(WHT,WHM)
C C G&O 2/87 END
C C
C       HBW(NFO)=AMIN1(WHT,WHM)
C       STMP=GNEW+DNEW
C       EW(NFO)=.7*HBW(NFO)+STMP
C C
C C G&O SEPT 88
C C
C       SPWP(NFO) = WPNEW
C C
C C G&O END SEPT 88
C C
C       SA(NFO,1)=XOLD
C       SA(NFO,2)=ESFO
C       SA(NFO,3)=SETN
C       SA(NFO,4)=SEN
C C
C C G&O 2/87
C C 140 SA(NFO,5)=2HVH
C C
C         SA( NFO,5 ) = 2HVH
C C
C  140    CONTINUE
C C G&O 2/87 END
C C
C C               INSERT ABGF IF REQUIRED
C C
C       IF(ABGF.NE.1)GO TO 150
C       NAP=NAP+1
C       AP(NAP)=ESFO
C       M=M+1
C       STEG(M)=GS(NFO)
C       ELZ(M)=EW(NFO)
C C
C C     GET READY FOR NEXT FETCH OR OBSTRUCTION AND RETURN
C   150 BSFO=ESFO
C       BEFO=EEFO
C C
C C G&O 2/87   **  COMMENTTED OUT AND INSERT ***
C       WPT=WPNEW
C C G&O 2/87   **  END OF COMMENTTED OUT AND INSERT ***
C       RETURN
C   500 FORMAT(/,10X,34HINVALID DATA IN FIELD 1 OF VH CARD)
C   520 FORMAT(/,10X,45HINVALID DATA IN FIELD 3 OR FIELD 5 OF VH CARD)
C   530 FORMAT(/,10X,34HINVALID DATA IN FIELD 4 OF VH CARD)
C   540 FORMAT(/,10X,34HINVALID DATA IN FIELD 6 OF VH CARD)
C   545 FORMAT(/,10X,34HINVALID DATA IN FILED 3 OF MG CARD)
C   560 FORMAT(A2,2X,A4,9F8.0)
C   570 FORMAT(/,10X,
C      154HMISSING MG CARD OR INCORECT DATA IN FIELD 6 OF VH CARD)
C   580 FORMAT(/,10X,11HJOB DUMPED.)
C   590 FORMAT(10X,A2,7X,A4,9F11.3)
C   600 FORMAT(/,10X,'WAVE PERIOD LESS THAN OR EQUAL TO ZERO',/
C      !         10X,'IN SUBROUTINE VEG.  ABORT RUN')
C   610 FORMAT(A4,8F16.8)
C   995 FORMAT(/,10X,38HARRAY DIMENSIONS EXCEEDED. JOB DUMPED.)
C       END
C C
C C G&O 2/87  **   INSERT  **
C C
C       FUNCTION SHBM(WPI,SLOPE,DNEW)
C C
C C     WRITTEN    FEBRUARY 1987 BY:
C C
C C                  GREENHORNE AND O'MARA, INC.
C C                  GREENBELT, MARYLAND
C C
C C     BASED ON IMPROVED BREAKING WAVE HEIGHT EQUATION SUPPLIED
C C     BY DR. BARRY E. HERCHENRODER OF THE SAME FIRM.
C C
C C**   THIS FUNCTION SUBROUTINE CALAULATES THE UPDATED MAXIMUM
C C**   CONTROLLING BREAKING WAVE HEIGHT TAKING INTO ACCOUNT
C C**   THE EFFECT OF BOTTOM SLOPE AND PEAK WAVE PERIOD.
C C**   EQUATIONS 2-92 THROUGH 2-94 IN THE 1984 SHORE
C C**   PROTECTION MANUAL (CERC, 1984) ARE USED. IT IS ASSUMED
C C**   THAT THE BREAKING WAVE HEIGHT REFERRED TO IN THESE
C C**   EQUATIONS IS THE 1% WAVEHEIGHT AND CAN THEREFORE BE
C C**   EQUATED WITH FEMA'S CONTROLLING WAVE HEIGHT. THIS
C C**   ASSUMPTION IS BACKED UP BY CALCULATIONS PERFORMED
C C**   USING THORNTON AND GUZA'S DATA (JGR,1983) THAT SHOW
C C**   THAT HRMS=0.42*(STILLWATER DEPTH) DERIVED BY THESE
C C**   AUTHORS IS A DIRECT CONSEQUENCE OF USING THE BREAKING
C C**   LAW IN THIS ROUTINE, AN OBSERVED BOTTOM SLOPE OF ZERO,
C C**   AND A RATIO OF 1% WAVE HEIGHT TO SIGNIFICANT WAVE
C C**   HEIGHT IN THE INNER SURF ZONE OF 1.3.
C C
C C**    WPI:  SPECTRAL PEAK WAVE PERIOD AT END OF TRANSECT
C C            SEGMENT OR AT END OF GRID CELL WITHIN A TRANSECT
C C            SEGMENT.
C C**  SLOPE:  BOTTOM SLOPE AT END OF TRANSECT SEGMENT OR AT
C C            END OF GRID CELL WITHIN A TRANSECT SEGMENT
C C**   DNEW:  100 YEAR STILL WATER DEPTH AT END OF TRANSECT
C C            SEGMENT OR AT END OF GRID CELL WITHIN A TRANSECT
C C            SEGMENT.
C C
C C***********************************************************************
C C
C C         REVISED IN JUNE AND JULY, 1987 TO RESTORE THE ORIGINAL 0.78
C C         BREAKING CRITERIA PER INSTRUCTION BY THE FEDERAL
C C         EMERGENCY MANAGEMENT AGENCY
C C
C C***********************************************************************
C C
C C     SLOPE=ABS(SLOPE)
C C     AP=1.-EXP(-19.5*SLOPE)
C C     BP=1.-EXP(-19.0*SLOPE)
C C     AP=1.-0.5*AP
C C     WPI=AMAX1(0.1,WPI)
C C     BP=1.+1.36*BP*DNEW/(WPI**2)
C C     GAMA=0.78/(AP*BP)
C C     GAMMA = AMAX1( 0.78,GAMA )
C C
C C  THE FOLLOWING TWO LINES WERE ADDED TO ELIMINATE ERROR MESSAGE
C C  4202 ON FORTRAN 4.0 COMPILER. JRH - 7/20/87
C       AAA=SLOPE
C       BBB=WPI
C C
C       GAMMA=0.78
C C
C C G&O MAY 89
C C
C C     REVISED MAY 1989 BY DR. BARRY E.
C C     HERCHENRODER OF GREENHORNE & O'MARA TO
C C     INCORPORATED A MICHE-TYPE EXPRESSION FOR THE
C C     MAXIMUM CONTROLLING BREAKING WAVE HEIGHT
C C     SHBM.
C C
C C     THE EXPRESSION FOR SHBM IS GIVEN BY:
C C
C C     SHBM = CPL * TANH((GAMMA*DNEW)/CPL )
C C
C C     WHERE
C C
C C     CPL = (CGAMMA/7) * WLNEW
C C
C C     AND  CGAMMA IS AN ORDER 1 CONSTANT (AT
C C     PRESENT SET TO 1.0), GAMMA IS THE BREAKING
C C     INDEX, DNEW IS THE STILLWATER DEPTH (IN-
C C     CLUDING WAVE SETUP), AND WLNEW IS THE
C C     SPECTRAL PEAK WAVELENGTH.
C C
C C     THIS EXPRESSION IS A SLIGHTLY MODIFIED FORM
C C     OF THE CRITERION USED BY BATTJES AND STIVE
C C     IN THEIR PAPER "CALIBRATION AND VERIFICATION
C C     OF A DISSIPATION MODEL FOR RANDOM BREAKING
C C     WAVES", PP. 649-660 IN THE 1984 COASTAL
C C     ENGINEERING CONFERENCE PROCEEDINGS.
C C
C C     THE REVISED BREAKING WAVE HEIGHT EXPRES-
C C     SION WILL ALLOW WHAFIS TO CALCULATE MORE
C C     ACCURATE BREAKING CONTROLLING WAVE HEIGHTS
C C     IN ALL DEPTHS OF WATER. IN PARTICULAR, IT WILL
C C     PREVENT THE WAVE SLOPE FROM GETTING LARGER
C C     THAN OBSERVATIONS IN DEEP AND INTERMEDIATE
C C     DEPTHS OF WATER BY 'CLIPPING' THE WAVE HEIGHT
C C     SO THAT THE LOCAL WAVE SLOPE NEVER GETS
C C     LARGER THAN
C C
C C     (CGAMMA/7) * TANH((GAMMA*DNEW)/CPL )
C C
C C     NOW CALCULATE THE WAVELENGTH WLNEW
C C     ASSOCIATED WITH THE SPECTRAL PEAK
C C     WAVE PERIOD WPI AND THE STILLWATER
C C     DEPTH DNEW.
C C
C         G = 32.2
C C
C         PI = 3.1415926536
C C
C         PI2 = 2*PI
C C
C   CGAMMA = 1.0
C   CP     = CGAMMA/7.0
C C
C         CLO = G/PI2
C C
C   WPNEW = WPI
C       DNEWSTR=AMAX1(0.01,DNEW)
C C
C         WLONEW = CLO*WPNEW*WPNEW
C         WLONEW = AMAX1(0.01,WLONEW)
C C
C         CDNEW = DNEWSTR/WLONEW
C C
C C   WLNEW IS THE SPECTRAL PEAK WAVLENGTH
C C
C         WLNEW = WLONEW*SQRT(TANH(PI2*CDNEW))
C         WLNEW = AMAX1(0.1,WLNEW)
C C
C C     CALCULATE THE BREAKING CONTROLLING
C C     WAVE HEIGHT SHBM USING A MODIFIED
C C     FORM OF THE MICHE-TYPE BREAKING CRITERION
C C     USED BY BATTJES AND STIVE
C C
C   CPL   = CP * WLNEW
C   GAMD  = GAMMA * DNEWSTR
C C
C   SHBM  = CPL * TANH( GAMD/CPL )
C C
C C     SHBM=GAMMA*DNEW
C C
C C END G&O MAY 89
C C
C       SHBM=AMAX1(0.0,SHBM)
C       RETURN
C       END
C       FUNCTION HIN(WHI,AFL,W,D,WPT)
C C
C C   THIS FUNCTION COMPUTES THE TRANSMITTED CONTROLING WAVE HEIGHT
C C   "HIN" FROM THE INCIDENT CONTROLING WAVE HEIGHT "WHI", FETCH
C C   LENGTH "AFL", 10M 10MINUTE WIND SPEED "W", 100 YEAR STILLWATER
C C   DEPTH "D", AND TRANSMITTED WAVE PERIOD "WPT".  THE 1984 SPM EQUA-
C C   TIONS ARE USED TO CALCULATE HM0, THE THOMPSON-VINCENT CURVES (IN
C C   PARAMETERIZED FORM) ARE USED TO CALCULATE THE SIGNIFICANT WAVE
C C   HEIGHT HS FROM HM0, AND THE CONTROLLING WAVE HEIGHT IS 1.6 TIMES
C C   HS.
C C
C       PI=3.1415926536
C       G=32.2
C C
C C G&O SEPT 88   FOR PC VERSION
C C
C       CRAV=((1.357E-3)*G)**.8557
C C
C C END G&O SEPT 88 FOR PC VERSION
C C
C C
C         WPTSTR = AMAX1( .01 , WPT )
C         DSTR   = AMAX1( .01 , D   )
C C
C C   IT IS ASSUMED THAT W IS INPUT AS UNADJUSTED WINDSPEED IN
C C   FEET PER SECOND
C C
C C   CALCULATE U, THE ADJUSTED WINDSPEED IN FEET PER SECOND
C C
C       CA=(3.6/5.28)**0.23
C       U=0.589*CA*(W**1.23)
C C
C C               CONVERT WHI TO ZERO MOMENT WAVEHEIGHT YI
C C
C C
C C G&O MAY 89
C C
C C     THE ORIGINAL PARTIAL IMPLEMENTATION
C C     OF THE THOMPSON-VINCENT PROCEDURE
C C     TO CALCULATE HM0  IS REINSTALLED BELOW
C C
C   HBM  = SHBM( WPTSTR, 0.0, DSTR )
C   WHII = AMIN1( WHI, HBM )
C C
C         YI  = HM0( WHII, DSTR, WPTSTR )
C C
C C END G&O MAY 89
C C
C C
C C   IT IS ALSO ASSUMED THAT AFL (FETCH DISTANCE), WHI (THE INCIDENT
C C   WAVELENGTH), AND D (THE STILLWATER DEPTH) ARE IN FEET
C C
C C     COMPUTE COMMON FACTORS
C       ALPHA=(.283/G)*U*U
C       BETA=TANH(.53*((G*D/(U**2))**.75))
C       X=YI/(ALPHA*BETA)
C C
C C     CHECK TO SEE IF MAXIMUM WAVE HEIGHT HAS BEEN ACHIEVED
C       IF(X.LT.1)GO TO 20
C       YNEW = YI
C       GO TO 100
C C
C C     COMPUTE EQUIVELENT FETCH LENGTH CORRESPONDING TO INCIDENT
C C     WAVE HEIGHT
C C
C    20 CONTINUE
C       TANHI=.5*LOG((1+X)/(1-X))
C       EFL=(((BETA/.00565)*TANHI)**2)*(U**2)/G
C C
C C      COMPUTE TOTAL FETCH LENGTH
C       F=EFL+AFL
C C
C C     COMPUTE TRANSMITTED WAVE HEIGHT HM0
C       YNEW=ALPHA*BETA*TANH((.00565/BETA)*SQRT((G*F/(U**2))))
C C
C  100    CONTINUE
C C
C C   CALCULATE THE WAVELENGTH WLNEW PREPARATORY TO CALCULATING HS
C C
C       PI2=2.*PI
C       WLONEW=(G/PI2)*WPTSTR*WPTSTR
C       WLONEW=AMAX1(0.1,WLONEW)
C C
C       DNEWSTR=AMAX1(0.01,D)
C       CDNEW=DNEWSTR/WLONEW
C       WLNEW=WLONEW*SQRT(TANH(PI2*CDNEW))
C         WLNEW = AMAX1( 0.01 , WLNEW )
C C
C C   CALCULATE REMAINING PARAMETERS
C C
C       WPI = WPTSTR
C       WLI=WLNEW
C       C2LOG=.394528*ALOG10(2.0)
C C
C C   CALCULATE HS AND CONTROLLING WAVE HEIGHT WHT
C C
C       EPP=YNEW/(4*WLI*.002)
C         EPP = AMAX1( 1.0E-4 , EPP )
C C
C       DD=DNEWSTR/(G*(WPI**2))
C C
C C G&O MAY 89
C C
C C
C C     THE ORIGINAL PARTIAL IMPLEMENTATION
C C     OF THE THOMPSON-VINCENT PROCEDURE
C C     TO CALCULATE HM0 IS REINSTALLED BELOW
C C
C       DC=5.5722E-5
C       PART1=.9+(.42707*ALOG10(DD/DC))
C       IF(EPP.LE.2)PHI=PART1-(1.411296*ALOG10(EPP))
C       IF(EPP.GT.2)PHI=PART1-C2LOG-(1.016768*ALOG10(EPP))
C C
C C     D0=1.357E-3
C C
C C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
C C
C       TMP1 = CRAV * (WPISTR**1.7114)
C       TMP  = TMP1 / (DNEWSTR**.8557)
C       RAV = 1.477 + .477 * (TMP - 1.0)
C C
C       IF(RAV.GT.1.7)RAV=1.7
C       IF( RAV .LT. 1.0 ) RAV= 1.0
C C
C       IF(PHI.LT.1)PHI=1
C       IF(PHI.GT.RAV)PHI=RAV
C C
C C END G&O MAY 89
C C
C C
C       HS=PHI*YNEW
C C
C C     CONVERT SIGNIFICANT WAVE HEIGHT TO
C C     CONTROLLING WAVE HEIGHT
C C
C       WHT=1.6*HS
C C
C C G&O SEPT 88
C C                         IF THE CONTROLLING WAVE HEIGHT WHT BREAKS
C C                         RESET IT TO THE BREAKING WAVE HEIGHT
C C
C C G&O MAY 89
C C
C C     CHANGE THE BREAKING WAVE CALC SO THAT
C C     IT USES SHBM
C C
C   HBM = SHBM( WPTSTR, 0.0, DSTR )
C C
C C END G&O MAY 89
C C
C       WHT = AMIN1( WHT,HBM)
C C
C C G&O END SEPT 88
C C
C       HIN=WHT
C C
C       RETURN
C C
C C G&O 2/87 END INSERT
C C
C       END
C       SUBROUTINE AVG(BP,EP,AER,ATS)
C C     THIS SUBROUTINE DETERMINES THE WEIGHTED AVERAGE 10 YEAR SURGE
C C     ELEVATION (ATS) AND WEIGHTED AVERAGE 100 YEAR WAVE ELEVATION (AER)
C C     GIVEN THE BEGIN POINT (BP) AND END POINT (EP) OVER WHICH THE
C C     AVERAGE IS TO BE TAKEN.
C       DIMENSION PARAM(10),HBW(500),STEG(500),ELZ(500),
C      1GS(500),EW(500),SA(500,5),AP(500)
C       COMMON /AONLY/NFOM1
C       COMMON /AFGV/TOF,PARAM,BSFO,BEFO,WHI,WHT,NFO,
C      1HBW,AP,SET,SE,STEG,ELZ,GS,EW,SA,M,NAP
C       AS= 'AS'
C       WT=0
C       ICPS=0
C       ICPE=0
C       DO 10 I=1,NFOM1
C       IF(BP.GE.GS(I).AND.BP.LT.GS(I+1))ICPS=I+1
C       IF(EP.GT.GS(I).AND.EP.LE.GS(I+1))ICPE=I
C    10 CONTINUE
C       A1=0
C       A2=0
C       ICPEM1=ICPE-1
C       IF(ICPEM1.LE.ICPS)GO TO 25
C       DO 20 I=ICPS,ICPEM1
C       IF(SA(I+1,5).EQ.AS)GO TO 20
C       HGHT1=SA(I,3)+SA(I+1,3)
C       HGHT2=EW(I)+EW(I+1)
C       WIDTH=GS(I+1)-GS(I)
C       WT=WT+WIDTH
C       A1=A1+(HGHT1*WIDTH/2.0)
C       A2=A2+(HGHT2*WIDTH/2.0)
C    20 CONTINUE
C    25 IF(ICPS.EQ.ICPEM1)GO TO 30
C       IF(ICPS.EQ.ICPE)GO TO 40
C       IF(ICPS.GT.ICPE)GO TO 50
C       GO TO 60
C    30 IF(SA(ICPE,5).EQ.AS)GO TO 60
C       HGHT1=SA(ICPS,3)+SA(ICPE,3)
C       HGHT2=EW(ICPS)+EW(ICPE)
C       WIDTH=GS(ICPE)-GS(ICPS)
C       WT=WIDTH
C       A1=HGHT1*WIDTH/2.0
C       A2=HGHT2*WIDTH/2.0
C       GO TO 60
C    40 SLOPE1=(EW(ICPE)-EW(ICPEM1))/(GS(ICPE)-GS(ICPEM1))
C       SLOPE2=(EW(ICPE+1)-EW(ICPE))/(GS(ICPE+1)-GS(ICPE))
C       Y1=SLOPE1*(BP-GS(ICPEM1))+EW(ICPEM1)
C       Y2=SLOPE2*(EP-GS(ICPE))+EW(ICPE)
C       Y3=SA(ICPEM1,3)+SA(ICPE,3)
C       Y4=SA(ICPE,3)+SA(ICPE+1,3)
C       WIDTH1=GS(ICPE)-BP
C       WIDTH2=EP-GS(ICPE)
C       WT=WIDTH1+WIDTH2
C       A1=(((Y3*WIDTH1)+(Y4*WIDTH2)))/2.0
C       A2=((Y1+EW(ICPE))*WIDTH1+((Y2+EW(ICPE))*WIDTH2))/2.0
C       GO TO 70
C    50 X=((BP+EP)/2.0)-GS(ICPE)
C       SLOPE=(EW(ICPS)-EW(ICPE))/(GS(ICPS)-GS(ICPE))
C       Y1=(SA(ICPS,3)+SA(ICPE,3))/2.0
C       Y2=SLOPE*X+EW(ICPE)
C       WIDTH=EP-BP
C       WT=WIDTH
C       A1=Y1*WIDTH
C       A2=Y2*WIDTH
C       GO TO 70
C    60 SLOPE1=(EW(ICPS)-EW(ICPS-1))/(GS(ICPS)-GS(ICPS-1))
C       SLOPE2=(EW(ICPE+1)-EW(ICPE))/(GS(ICPE+1)-GS(ICPE))
C       Y1=SLOPE1*(BP-GS(ICPS-1))+EW(ICPS-1)
C       Y2=SLOPE2*(EP-GS(ICPE))+EW(ICPE)
C       Y3=(SA(ICPS-1,3)+SA(ICPS,3))/2.0
C       Y4=(SA(ICPE+1,3)+SA(ICPE,3))/2.0
C       WIDTH1=GS(ICPS)-BP
C       WIDTH2=EP-GS(ICPE)
C       A1=A1+(Y3*WIDTH1+(Y4*WIDTH2))
C       A2=A2+((Y1+EW(ICPS))*WIDTH1/2.0)+((Y2+EW(ICPE))*WIDTH2/2.0)
C       WT=WT+WIDTH1+WIDTH2
C    70 ATS=A1/WT
C       AER=A2/WT
C       RETURN
C       END
C       SUBROUTINE READIN
C C     THIS SUBROUTINE READS IN TABULAR DATA ON MARSH GRASS
C       DIMENSION HDN(8,8,7),PPSD(8,3),PLTYP(8)
C       COMMON /PPT/HDN,PPSD,PLTYP
C C
C C       REWIND UNIT 7, THE UNIT WITH THE MARSH GRASS DATA
C C
C         REWIND(7)
C C
C C     READ IN DATA FOR HEIGHT,DIAMETER,AND NUMBER DENSITY
C       DO 20 I=1,7
C       DO 20 J=1,8
C       READ(7,500)(HDN(I,J,K),K=1,7)
C    20 CONTINUE
C C
C C     NO MARSH GRASS IN REGION 8
C       DO 30 I=1,8
C       DO 30 J=1,7
C       HDN(8,I,J)=0
C    30 CONTINUE
C C
C C     READ IN DATA ON PLANT PARAMETERS THAT ARE SPECIES DEPENDENT
C       DO 40 I=1,8
C       READ(7,510)(PPSD(I,J),J=1,3)
C    40 CONTINUE
C C
C C     READ IN MARSH GRASS PLANT TYPES
C       READ(7,520)(PLTYP(I),I=1,8)
C C
C C     RETURN TO MAIN PROGRAM
C       RETURN
C   500 FORMAT(7F8.0)
C   510 FORMAT(3F8.0)
C   520 FORMAT(8(4X,A4))
C       END
C       FUNCTION APP(DEF,D,NPLTS,WPI,WL)
C C     THIS FUNCTION COMPUTES THE AVERAGE PLANT PARAMETER
C C     WHICH IS RELATED TO THE NET DRAG FORCE FOR ALL PLANT
C C     TYPES PRESENT FOR A GIVEN DEPTH
C C
C       DIMENSION DEF(10,8)
C       PI=3.14159
C       G2=1036.84
C       G=32.2
C C
C C     DETERMINE PLANT PARAMETERS
C       APP=0
C       DO 60 I=1,NPLTS
C C
C C     UNLOAD DEF ARRAY
C       CDE=DEF(I,1)
C       FCOV=DEF(I,2)
C       HBI=DEF(I,3)
C       PPSF=DEF(I,4)
C       SDB=DEF(I,5)
C       SDM=DEF(I,6)
C       SDT=DEF(I,7)
C       FAR=DEF(I,8)
C C
C C     COMPUTE NON DEPTH DEPENDENT QUANTITIES
C       ABMS=(SDB+SDM)*HBI*.25
C       AAMS=(SDM+SDT)*HBI*.25
C       TAS=ABMS+AAMS
C       ACPL=(2/PI)*FAR*TAS
C C
C C     COMPUTE FACTOR WHICH ADJUSTS FOR THE EFFECTS
C C     OF WAVE PERIOD
C       HF=.5*HBI
C       IF(HF.GT.D)HF=D
C       IF(D/WL.LT..04)GO TO 5
C       IF(D/WL.GT..5)GO TO 10
C       WPF=G2*((WPI/WL)*COSH(2*PI*HF/WL)/COSH(2*PI*D/WL))**3
C       GO TO 15
C     5 WPF=SQRT(G/D)
C       GO TO 15
C    10 Z=HF-D
C       WPF=(8/G)*((PI/WPI)*EXP(2*PI*Z/WL))**3
C C
C C     COMPUTE FRONTAL AREA BELOW THE WATER SURFACE
C C     FOR EACH PLANT TYPE AND COMBINE WITH OTHER
C C     PLANT PARAMETERS
C    15 IF(HBI.NE.0)GO TO 20
C       AT=0
C       GO TO 50
C    20 IF(D.GT..5*HBI)GO TO 25
C       SDI=SDB+((SDM-SDB)/(.5*HBI))
C       A1=(SDB+SDI)*.5*D
C       A2=ACPL*(D/HBI)
C       AT=A1+A2
C       GO TO 50
C    25 IF(D.GT.HBI)GO TO 30
C       SDI=SDM+(((SDT-SDM)/(HBI*.5))*(D-(HBI*.5)))
C       A1=(SDM+SDI)*.5*(D-(.5*HBI))
C       A2=ACPL*(D/HBI)
C       AT=ABMS+A1+A2
C       GO TO 50
C    30 AT=TAS+ACPL
C    50 APP=APP+(FCOV*PPSF*CDE*AT)*WPF
C    60 CONTINUE
C       RETURN
C       END
C       SUBROUTINE ECHO
C C     THIS SUBROUTINE PRODUCES AN ANOTATED INPUT LISTING
C C
C       DIMENSION PARAM(10)
C       DATA EI,BU,DU,VE,FI,FO,AS,VH,GM,ET /2HIE,2HBU,2HDU,
C      12HVE,2HIF,2HOF,2HAS,2HVH,2HMG,2HET/
C C
C C     REWIND SCRATCH FILES AND ADVANCE TO TOP OF PAGE
C       REWIND 8
C       REWIND 9
C       WRITE(6,730)
C C
C C     READ CARD AND BRANCH TO APPROPRIATE PROGRAM SEGMENT
C    10 READ(8,505)TOF,(PARAM(I),I=1,10)
C       IF(TOF.EQ.EI)GO TO 50
C       IF(TOF.EQ.BU)GO TO 100
C       IF(TOF.EQ.DU)GO TO 150
C       IF(TOF.EQ.VE)GO TO 200
C       IF(TOF.EQ.FI)GO TO 250
C       IF(TOF.EQ.FO)GO TO 250
C       IF(TOF.EQ.AS)GO TO 250
C       IF(TOF.EQ.VH)GO TO 300
C       IF(TOF.EQ.ET)GO TO 350
C C
C C     PRINT INITIAL ELEVATIONS HEADINGS AND DATA
C    50 WRITE(6,530)
C       WRITE(6,540)
C       WRITE(6,500)TOF,(PARAM(I),I=1,10)
C       GO TO 10
C C
C C     PRINT BUILDING HEADINGS AND DATA
C   100 WRITE(6,550)
C       WRITE(6,560)
C       WRITE(6,500)TOF,(PARAM(I),I=1,10)
C       GO TO 10
C C
C C     PRINT DUNE HEADINGS AND DATA
C   150 WRITE(6,565)
C       WRITE(6,570)
C       WRITE(6,500)TOF,(PARAM(I),I=1,10)
C       GO TO 10
C C
C C     PRINT VEGETATION HEADINGS AND DATA
C   200 WRITE(6,580)
C       WRITE(6,590)
C       WRITE(6,500)TOF,(PARAM(I),I=1,10)
C       GO TO 10
C C
C C     PRINT FETCH OR ABOVE SURGE HEADINGS AND DATA
C   250 WRITE(6,600)
C       WRITE(6,610)
C       WRITE(6,500)TOF,(PARAM(I),I=1,10)
C       GO TO 10
C C
C C     PRINT SPECIAL VEGETATION HEADINGS AND DATA
C   300 WRITE(6,640)
C       WRITE(6,650)
C       WRITE(6,500)TOF,(PARAM(I),I=1,10)
C       NPLTS=PARAM(6)
C       DO 310 J=1,NPLTS
C       READ(8,515)TOF, PARAM(1),(PARAM(I),I=2,10)
C       WRITE(6,660)
C       WRITE(6,670)
C       WRITE(6,510)TOF,PARAM(1),(PARAM(I),I=2,10)
C   310 CONTINUE
C C
C C     PRINT PLANT PARAMETERS INCLUDING DEFAULTS
C       WRITE(6,700)
C       DO 330 I=1,NPLTS
C       WRITE(6,660)
C       WRITE(6,670)
C       READ(9,680)TYPE,(PARAM(J),J=1,8)
C       PARAM(5)=PARAM(5)*12
C       PARAM(6)=PARAM(6)*12
C       PARAM(7)=PARAM(7)*12
C       WRITE(6,520)TYPE,(PARAM(J),J=1,8)
C   330 CONTINUE
C       WRITE(6,710)
C       GO TO 10
C C
C C     PRINT END OF TRANSECT MESSAGE AND EXPLANATORY NOTE
C   350 WRITE(6,720)
C       WRITE(6,740)
C       WRITE(6,750)
C C
C C     REWIND SCRATCH FILES, ADVANCE PAGE, AND RETURN
C       REWIND 8
C       REWIND 9
C       WRITE(6,730)
C       RETURN
C   500 FORMAT(2X,A2,10F11.3)
C   505 FORMAT(10X,A2,10F11.3)
C   510 FORMAT(2X,A2,7X,A4,9F11.3)
C   515 FORMAT(10X,A2,7X,A4,9F11.3)
C   520 FORMAT(11X,A4,9F11.3)
C   530 FORMAT(//,T13,3HEND,T24,3HEND,T33,5HFETCH,T39,10HSURGE ELEV,
C      1T50,10HSURGE ELEV,T64,7HINITIAL,T75,7HINITIAL,
C      2T98,6HBOTTOM,T108,7HAVERAGE)
C   540 FORMAT(T9,7HSTATION,T18,9HELEVATION,T32,6HLENGTH,T42,7H10-YEAR,
C      1T52,8H100-YEAR,T61,11HWAVE HEIGHT,T74,9HW. PERIOD,
C      1T99,5HSLOPE,T108,7HA-ZONES)
C   550 FORMAT(//,T13,3HEND,T24,3HEND,T28,10HOPEN SPACE,T43,6HNO. OF,T51,
C      19HNEW SURGE,T62,9HNEW SURGE,T98,6HBOTTOM,T108,7HAVERAGE)
C   560 FORMAT(T9,7HSTATION,T18,9HELEVATION,T33,5HRATIO,T45,4HROWS,T53,
C      17H10-YEAR,T63,8H100-YEAR,T99,5HSLOPE,T108,7HA-ZONES)
C   565 FORMAT(//,T6,10HDUNE CREST,T17,10HDUNE CREST,T31,7HDUNE OR,T40,
C      19HNEW SURGE,T51,9HNEW SURGE,T98,6HBOTTOM,T108,7HAVERAGE)
C   570 FORMAT(T9,7HSTATION,T18,9HELEVATION,T31,7HSEAWALL,T42,
C      17H10-YEAR,T52,8H100-YEAR,T99,5HSLOPE,T108,7HA-ZONES)
C   580 FORMAT(//,T13,3HEND,T24,3HEND,T31,7HAVERAGE,T42,7HAVERAGE,T53,
C      17HAVERAGE,T67,4HDRAG,T73,9HNEW SURGE,T84,9HNEW SURGE,
C      1T98,6HBOTTOM,T108,7HAVERAGE)
C   590 FORMAT(T9,7HSTATION,T18,9HELEVATION,T30,8HDIAMETER,T43,6HHEIGHT,
C      1T53,7HSPACING,T65,6HCOEFF.,T75,7H10-YEAR,T85,8H100-YEAR,
C      1T99,5HSLOPE,T108,7HA-ZONES)
C   600 FORMAT(//,T13,3HEND,T24,3HEND,T29,9HNEW SURGE,T40,9HNEW SURGE,
C      1T98,6HBOTTOM,T108,7HAVERAGE)
C   610 FORMAT(T9,7HSTATION,T18,9HELEVATION,T31,7H10-YEAR,T41,8H100-YEAR,
C      1T99,5HSLOPE,T108,7HA-ZONES)
C   640 FORMAT(//,T13,3HEND,T24,3HEND,T41,8HREGION 1,T65,6HNO. OF,T73,
C      19HNEW SURGE,T84,9HNEW SURGE,T98,6HBOTTOM,T108,7HAVERAGE)
C   650 FORMAT(T9,7HSTATION,T18,9HELEVATION,T30,8HREGION 1,T43,6HWEIGHT,
C      1T52,8HREGION 2,T61,11HPLANT TYPES,T75,7H10-YEAR,T85,8H100-YEAR,
C      1T99,5HSLOPE,T108,7HA-ZONES)
C   660 FORMAT(//,T11,5HPLANT,T23,4HDRAG,T30,8HCOVERAGE,T40,9HAVG. STEM,
C      1T54,6HNUMBERT62,9HBASE STEM,T74,8HMID STEM,T85,8HTOP STEM,
C      1T96,9HLEAF-STEM)
C   670 FORMAT(T12,4HTYPE,T21,6HCOEFF.,T33,5HRATIO,T43,6HHEIGHT,T53,
C      17HDENSITYT63,8HDIAMETER,T74,8HDIAMETER,T85,8HDIAMETER,
C      1T95,10HAREA RATIO)
C   680 FORMAT(A4,8F16.8)
C   700 FORMAT(//,2X,112(1H-),/,T27,31HPLANT CHARACTERISTICS INCLUDING,
C      1 31H VALUES SUPPLIED BY THE PROGRAM)
C   710 FORMAT(//,2X,112(1H-))
C   720 FORMAT(//,2X,48(1H-),15HEND OF TRANSECT,49(1H-))
C   730 FORMAT(1H1)
C   740 FORMAT(//,2X,5HNOTE:)
C   750 FORMAT(/,2X,43HSURGE ELEVATION INCLUDES CONTRIBUTIONS FROM,
C      11X,29HASTRONOMICAL AND STORM TIDES.)
C       END
C       FUNCTION T(WPI,AFL,W,D)
C C
C C     THIS FUNCTION COMPUTES THE TRANSMITTED WAVE PERIOD FROM
C C     THE INCIDENT WAVE PERIOD,FETCH LENGTH,10M. 10MIN. WIND-
C C     SPEED AND 100 YEAR STILLWATER DEPTH.
C       PI=3.14159
C       G=32.2
C       C13=.333333333
C C
C C   IT IS ASSUMED THAT W IS INPUT AS UNADJUSTED WINDSPEED IN
C C   FEET PER SECOND
C C
C C   CALCULATE U, THE ADJUSTED WINDSPEED IN FEET PER SECOND
C C
C       CA=(3.6/5.28)**0.23
C       U=0.589*CA*(W**1.23)
C C
C C  IT IS ALSO ASSUMED THAT AFL, THE FETCH DISTANCE IS IN FEET AND
C C   WPI IS IN SECONDS
C C
C C     COMPUTE COMMON FACTORS
C       ALPHA=(7.54/G)*U
C       BETA=TANH(.833*((G*D/(U**2))**.375))
C       X=WPI/(ALPHA*BETA)
C C
C C     CHECK TO SEE IF MAXIMUM WAVE PERIOD HAS BEEN ACHIEVED
C       IF(X.LT.1)GO TO 20
C       T=WPI
C       GO TO 100
C C
C C     COMPUTE EQUIVELENT FETCH LENGTH CORESPONDING TO INCIDENT
C C     WAVE PERIOD
C    20 TANHI=.5*LOG((1+X)/(1-X))
C       EFL=(((BETA/.0379)*TANHI)**3)*(U**2)/G
C C
C C      COMPUTE TOTAL FETCH LENGTH
C       F=EFL+AFL
C C
C C     COMPUTE TRANSMITTED WAVE PERIOD
C       T=ALPHA*BETA*TANH((.0379/BETA)*((G*F/(U**2))**C13))
C   100 RETURN
C       END
C       SUBROUTINE WAVG(DEF1,DEF2,DEF,WF1,REG1,REG2,NPLTS,TYPE,TEST)
C C     THIS SUBROUTINE COMPUTES THE WEIGHTED AVERAGE VALUE OF PLANT
C C     PARAMETERS COMBINING DATA FOR REGION 1 AND REGION 2
C C
C       LOGICAL TEST
C       DIMENSION DEF1(10,8),DEF2(10,8),DEF(10,8),TYPE(10)
C       IREG1=REG1
C       IREG2=REG2
C C
C C     REPEAT COMPUTATIONS FOR EACH PLANT TYPE
C       DO 90 I=1,NPLTS
C C
C C     FOR STEM PARAMETERS WHICH SHOULD NOT BE ZERO USE RESULTS
C C     FROM THE OTHER REGION
C       DO 20 J=3,7
C       IF(J.EQ.4)GO TO 20
C C
C C     IF PARAMETERS ARE ZERO FOR BOTH REGIONS PRINT ERROR MESSAGE
C       IF(DEF1(I,J).EQ.0.AND.DEF2(I,J).EQ.0)GO TO 10
C C
C C     USE RESULTS FORM THE OTHER REGION
C       IF(DEF1(I,J).EQ.0)DEF1(I,J)=DEF2(I,J)
C       IF(DEF2(I,J).EQ.0)DEF2(I,J)=DEF1(I,J)
C       GO TO 20
C C
C C     SET ERROR FLAG AND PRINT ERROR MESSAGES
C    10 TEST=.TRUE.
C       IF(J.EQ.3)WRITE(6,110)TYPE(I),IREG1,IREG2
C       IF(J.EQ.5)WRITE(6,120)TYPE(I),IREG1,IREG2
C       IF(J.EQ.6)WRITE(6,130)TYPE(I),IREG1,IREG2
C       IF(J.EQ.7)WRITE(6,140)TYPE(I),IREG1,IREG2
C       WRITE(6,100)
C    20 CONTINUE
C C
C C     COMPUTE WEIGHTED AVERAGE
C       DO 90 J=1,8
C       DEF(I,J)=WF1*DEF1(I,J)+(1-WF1)*DEF2(I,J)
C    90 CONTINUE
C       RETURN
C   100 FORMAT(/,10X,19HINVALID INPUT DATA.)
C   110 FORMAT(/,10X,45HHEIGHT BELOW INFLORESENCE = 0 FOR PLANT TYPE ,
C      1A4,10H IN REGION,I2,11H AND REGION,I2)
C   120 FORMAT(/,10X,38HBASE STEM DIAMATER = 0 FOR PLANT TYPE ,
C      1A4,10H IN REGION,I2,11H AND REGION,I2)
C   130 FORMAT(/,10X,37HMID STEM DIAMATER = 0 FOR PLANT TYPE ,
C      1A4,10H IN REGION,I2,11H AND REGION,I2)
C   140 FORMAT(/,10X,37HTOP STEM DIAMATER = 0 FOR PLANT TYPE ,
C      1A4,10H IN REGION,I2,11H AND REGION,I2)
C       END
C C
C C G&O MAY 89
C C
C       FUNCTION HM0(WHI,DNEW,WPI)
C C
C C G&O MAY 89
C C
C C     THIS FUNCTION CONVERTS THE CONTROLLING WAVE HEIGHT, WHI
C C     TO THE ZERO MOMENT WAVE HEIGHT, HM0.
C C
C C G&O MAY 89
C C
C       IF(WHI.EQ.0)HM0=0
C       IF(WHI.EQ.0)RETURN
C C
C C               SET PRELIMINARY CONSTANTS OR FACTORS
C C
C       PI=3.1415926536
C       G=32.2
C C
C C G&O SEPT 88   FOR PC VERSION
C C
C       CRAV=((1.357E-3)*G)**.8557
C C
C C END G&O SEPT 88 FOR PC VERSION
C C
C C
C C G&O 2/87
C         DNEWSTR = AMAX1( 0.01,DNEW )
C         PI2     = 2. * PI
C C G&O 2/87 END
C C
C       HS=WHI/1.6
C         NMAX= 25
C         D0= 1.357E-3
C         DC= 5.5722E-5
C         C1LOG= ALOG10(2.0)
C         C2LOG= .394528 * C1LOG
C         C3LOG= 1.411296 * C1LOG
C C
C C               CP1= 1.0/1.016768
C C
C         CP1= .983508529
C C
C C               CP2= 1.0/1.411296
C C
C         CP2= .708568578
C C
C C               CP3= 10**(-1.0/1.0167683)
C C
C         CP3= .10387032
C C
C C               CP4= 10**(-1.0/1.411296)
C C
C         CP4= .195628183
C C
C C G&O 2/87
C C     DD=DNEW/(G*WPI**2)
C       WL0=5.12*(WPI**2)
C C     WLI=SQRT(2*PI*DNEW*WL0)/(1+1.25*DNEW/WL0)
C         DD = DNEWSTR/(G*WPI*WPI)
C         WL0 = AMAX1( WL0,0.1 )
C         CDNEW = DNEWSTR/WL0
C         WLI   = WL0 * SQRT( TANH( PI2*CDNEW ) )
C C G&O 2/87 END
C C
C         CL1= .008 * WLI
C C
C C               CL2= .016 * WLI
C C
C         CL2= 2. * CL1
C         CL3= 1.25/WLI
C C
C C               EPSP= HS/(.002*4*WLI)
C C
C         EPSP= HS/CL1
C C
C C               CALC RAV AND PHIE
C C
C C G&O SEPT 88 FOR PC VERSION
C C
C C     RAV=1.477+.477*(((D0/DD)**.8557)-1)
C       TMP1 = CRAV * (WPI**1.7114)
C       TMP  = TMP1 / (DNEWSTR**.8557)
C       RAV = 1.477 + .477 * (TMP - 1.0)
C C
C C END G&O SEPT 88 FOR PC VERSION
C C
C       IF(RAV.GT.1.7)RAV=1.7
C       IF(RAV.LT.1)RAV=1
C C
C         PHIE= RAV
C C
C C               CALC DDP,PHIB,AKAPA,AKAPC
C C
C         DDP= DD/DC
C         PART1= .9 + ( .42707*ALOG10(DDP) )
C         PHIB= PART1 - C3LOG
C         AKAPA= .2303028/(DDP**.302608)
C         AKAPC= .170474016/ (DDP**.420026987)
C C
C C               CALC HM0E. THERE ARE 2 CASES
C C
C         IF( PHIB - PHIE ) 30 , 20 , 20
C  20     CONTINUE
C C
C C               PHIB .GE. PHIE
C C
C         HM0E= (CL1/AKAPC) * (10**(-CP1*PHIE))
C         GO TO 40
C C
C  30     CONTINUE
C C
C C               PHIB .LT. PHIE
C C
C         HM0E= (CL1/AKAPA) * (10**(-CP2*PHIE))
C C
C  40     CONTINUE
C C
C C               CALC. HSE
C C
C         HSE= PHIE * HM0E
C C
C C               SET PHID TO 1.0
C C
C         PHID= 1.0
C C
C C               CALC HM0D. THERE ARE 2 CASES
C C
C         IF( PHIB - 1.0 ) 60 , 50 , 50
C  50     CONTINUE
C C
C C               PHIB .GE. 1.0
C C
C         HM0D= (CL1/AKAPC) * CP3
C         GO TO 70
C  60     CONTINUE
C C
C C               PHIB .LT. 1.0
C C
C         HM0D= (CL1/AKAPA) * CP4
C C
C  70     CONTINUE
C C
C C               CALC HSD
C C
C         HSD= HM0D
C C
C C               CALC HM0B AND HSB
C C
C         HM0B= CL2
C         HSB= HM0B * PHIB
C C
C C               CALC HM0 AND EPP. THERE ARE 3 CASES.
C C
C         IF( HS .GE. HSD ) GO TO 220
C         IF( HS .LE. HSE ) GO TO 230
C C
C C               IF WE GET HERE, HSE .LT. HS .LT. HSD. JUMP TO THAT
C C               SECTION
C C
C         GO TO 240
C C
C  220    CONTINUE
C C
C C               CASE 1--HS .GE. HSD. CALC HM0 AND EPP.
C C
C         HM0= HS
C         EPP= HM0/CL1
C         GO TO 320
C C
C  230    CONTINUE
C C
C C               CASE 2--HS .LE. HSE. CALC HM0 AND EPP
C C
C         HM0=HS/PHIE
C         EPP= HM0/CL1
C         GO TO 320
C C
C  240    CONTINUE
C C
C C               CASE 3--HSE .LT. HS .LT. HSD.  CALC HM0 AND EPP. THERE
C C               ARE 3 SUBCASES.
C C
C         IF( HSB - HS ) 80 , 140 , 150
C  80     CONTINUE
C C
C C               SUBCASE 1--HSB .LT. HS
C C
C C               CALC RATSTAR. THERE ARE 2 SUB-SUB-CASES.
C C
C         IF( PHIB - PHIE ) 90 , 100 , 100
C  90     CONTINUE
C C
C C               SUB-SUB-CASE 1--PHIB .LT. PHIE
C C
C         RATSTAR= ( HM0B - HM0D )/( HSB - HSD )
C         GO TO 110
C C
C  100    CONTINUE
C C
C C               SUB-SUB-CASE 2--PHIB .GE. PHIE
C C
C         RATSTAR= ( HM0E - HM0D )/( HSE - HSD )
C  110    CONTINUE
C C
C C               USING RATSTAR, CALC INITIAL APPROX TO HM0, I.E.
C C               HM0INIT
C C
C         HM0INIT= HM0D + ( RATSTAR * ( HS - HSD ) )
C C
C C               CALC INITIAL APPROX TO EPP, I.E. EPPINIT
C C
C         EPPINIT= HM0INIT/CL1
C C
C C               INITIALIZE VARIABLES BEFORE NEWTON ITERATION WHICH
C C               CALCULATES EPP.
C C
C         EPPN= EPPINIT
C C
C C               BEGIN ITERATION
C C
C         DO 120 N = 1 , NMAX
C C
C         PHIC= -1.016768 * ALOG10( AKAPC*EPPN )
C         QC= (EPPN*PHIC) - EPSP
C         DERIVQC= PHIC - .441576731
C         DELEPPN= -QC/DERIVQC
C         EPPNP1= EPPN + DELEPPN
C C
C C               CHECK AND SEE OF CONVERGENCE ACHIEVED.
C C
C         IF( ABS(DELEPPN) .LT. CL3 ) GO TO 130
C C
C C               CONVERGENCE NOT ACHIEVED. RESET EPPN AND TRY AGAIN.
C C
C         EPPN= EPPNP1
C  120    CONTINUE
C C
C C               END OF ITERATION LOOP. IF WE GET HERE, CONVERGENCE
C C               NOT ACHIEVED. USE LATEST VALUE OF EPPNP1.
C C
C  130    CONTINUE
C C
C C               IF WE JUMP HERE OUT OF ITERATION LOOP, THEN CONVERGENCE
C C               HAS BEEN ACHIEVED.
C C
C C               SET EPP AND HM0
C C
C         EPP= EPPNP1
C         HM0= CL1 * EPP
C C
C C               END OF CALC OF HM0 AND EPP FOR SUB-CASE HSB .LT. HS.
C C
C         GO TO 310
C C
C  140    CONTINUE
C C
C C               HSB=HS SUB-CASE
C C
C C               CALC HM0 AND EPP BY DEFINING RELATIONSHIPS FOR THIS
C C               SUB-CASE
C C
C         HM0= CL2
C         EPP= 2.0
C C
C C               END OF CALC OF HM0 FOR HSB=HS SUB-CASE
C C
C         GO TO 310
C C
C  150    CONTINUE
C C
C C               HSB .GT. HS SUB-CASE
C C
C C               CALC RATSTAR. THERE ARE 2 SUB-SUB-CASES.
C C
C         IF( PHIB - PHID ) 160 , 160 , 170
C  160    CONTINUE
C C
C C               PHIB .LE. PHID SUB-SUB-CASE
C C
C         RATSTAR= ( HM0D - HM0E )/( HSD - HSE )
C         GO TO 180
C C
C  170    CONTINUE
C C
C C               PHIB .GT. PHID SUB-SUB-CASE
C C
C         RATSTAR= ( HM0B - HM0E )/( HSB - HSE )
C  180    CONTINUE
C C
C C               USING RATSTAR, CALC INITIAL APPROX TO HM0, I.E.
C C               HM0INIT
C C
C         HM0INIT= HM0E + ( RATSTAR * ( HS - HSE ) )
C C
C C               CALC INITIAL APPROX TO EPP, I.E. EPPINIT
C C
C         EPPINIT= HM0INIT/CL1
C C
C C               INITIALIZE VARIABLES BEFORE NEWTON ITERATION WHICH
C C               CALCULATES EPP.
C C
C         EPPN= EPPINIT
C C
C C               BEGIN ITERATION
C C
C         DO 190 N = 1 , NMAX
C C
C         PHIA= -1.411296 * ALOG10( AKAPA*EPPN )
C         QA= (EPPN*PHIA) - EPSP
C         DERIVQA= PHIA - .612918065
C         DELEPPN= -QA/DERIVQA
C         EPPNP1= EPPN + DELEPPN
C C
C C               CHECK AND SEE OF CONVERGENCE ACHIEVED.
C C
C         IF( ABS(DELEPPN) .LT. CL3 ) GO TO 300
C C
C C               CONVERGENCE NOT ACHIEVED. RESET EPPN AND TRY AGAIN.
C C
C         EPPN= EPPNP1
C  190    CONTINUE
C C
C C               END OF ITERATION LOOP. IF WE GET HERE, CONVERGENCE
C C               NOT ACHIEVED. USE LATEST VALUE OF EPPNP1.
C C
C  300    CONTINUE
C C
C C               IF WE JUMP HERE OUT OF ITERATION LOOP, THEN CONVERGENCE
C C               HAS BEEN ACHIEVED.
C C
C C               SET EPP AND HM0
C C
C         EPP= EPPNP1
C         HM0= CL1 * EPP
C C
C C               END OF CALC OF HM0 AND EPP FOR SUB-CASE HSB .GT. HS.
C C
C  310    CONTINUE
C C
C C               END OF CALC OF HM0 AND EPP FOR CASE
C C               HSE .LT. HS .LT. HSD
C C
C  320    CONTINUE
C C
C C               END OF CALC OF HM0 AND EPP
C         RETURN
C         END
C C
C       SUBROUTINE LOOKUP(DEF,REG,TEST)
C C
C C THIS SUBROUTINE BELONGS TO WHAFIS2.F77
C C
C C MODIFIED ON MAY 1985, BY AMIR RAZAVI PER RKC REQUEST.
C C
C C MODIFICATION WAS MADE TO MATCH W2.F77 OPERATION.
C C
C C THE COMMON STRUCTURE FOR /PP/ AND /PPT/ HAS ADDITIONAL VARIABLES IN
C C W2 PROGRAM.  THOSE VARIABLES ARE NOT USED IN WHAFIS2.F77 AND THEREFORE
C C THE COMMON AREAS ARE NOT MODIFIED.
C C
C C THE MODIFIED LINES HAVE A "CAHR" AT THE BEGINING.
C C THE ADDED BLOCKS ARE IDENTIFIED BY "CAHR START" AND "CAHR END"
C C
C       LOGICAL TEST,TEST1,TEST2
C C     THIS SUBROUTINE LOOKS UP DEFAULT MARSH GRASS PLANT PARAMETERS
C C     FOR A GIVEN REGION AND PLANT TYPE
C       DIMENSION CDE(10),FCOV(10),HBI(10),PPSF(10),SDB(10),
C      1SDM(10),SDT(10),TYPE(10),FAR(10),DEF(10,8)
C       DIMENSION HDN(8,8,7),PPSD(8,3),PLTYP(8)
C       DIMENSION ITYP(10)
C       COMMON /PP/NPLTS,TYPE,CDE,FCOV,HBI,PPSF,SDB,SDM,SDT,FAR
C       COMMON /PPT/HDN,PPSD,PLTYP
C       IREG=REG
C C
C C     SET DEFAULT VALUES FOR EACH PLANT TYPE
C       TEST1=.FALSE.
C C
C CAHR START
C         FCOVCUM=0.0
C CAHR END
C C
C       DO 230 I1=1,NPLTS
C C
C C     INITIALIZE ARRAY DEF
C       DEF(I1,1)=CDE(I1)
C       DEF(I1,2)=FCOV(I1)
C       DEF(I1,3)=HBI(I1)
C       DEF(I1,4)=PPSF(I1)
C       DEF(I1,5)=SDB(I1)
C       DEF(I1,6)=SDM(I1)
C       DEF(I1,7)=SDT(I1)
C       DEF(I1,8)=FAR(I1)
C C
C C     INITIALIZE ERROR FLAG
C       TEST2=.FALSE.
C C
C C     IF FCOV=0 REVISE DEFAULT
C CAHR START
C C       IF(COV(I1).EQ.0)TEST1=.TRUE.
C C
C         IF(FCOV(I1)) 1000, 1010, 1020
C C
C  1000   CONTINUE
C C
C C               FCOV(I) IS NEGATIVE. SET ERROR FLAG AND PRINT
C C               MESSAGE.
C C
C         TEST2=.TRUE.
C         WRITE(6,1005)I
C  1005   FORMAT(/10X,'FCOV WAS FOUND TO BE NEGATIVE FOR PLANT TYPE= ',
C      1  I2)
C         GOTO 1030
C C
C  1010   CONTINUE
C C
C C               FCOV=0. USE DEFAULT FCOV FOR THIS PLANT TYPE.
C C
C         TEST1=.TRUE.
C         NCOV=NCOV+1
C         GOTO 1030
C C
C  1020   CONTINUE
C C
C C               FCOV IS GREATER THAN ZERO
C C
C         FCOVCUM=FCOVCUM+FCOV(I1)
C C
C  1030   CONTINUE
C C
C C       CHECK AND SEE IF PLANT TYPE I1 IS MARSH GRASS. IF IT IS,
C C               CONTINUE ON. IF IT IS NOT, JUMP TO LABEL 225, IE.
C C               RIGHT ABOVE END OF LOOP.
C C
C         DO 1040 I2=1,8
C                 IF(TYPE(I1).EQ.PLTYP(I2)) GOTO 1050
C 1040    CONTINUE
C C
C C               IF WE GET HERE PLANT TYPE IS NOT MARSH GRASS. JUMP TO
C C               END OF LOOP.
C C
C         GOTO 225
C C
C  1050   CONTINUE
C C
C C       IF WE GET HERE, PLANT TYPE IS MARSH GRASS. CONTINUE ON.
C C
C C       NEXT LINE IS FOR DIAGNOSTIC PURPOSES.
C C       WRITE(6,1060)
C C1060   FORMAT(1X/1X,"PLANT TYPE IS RECOGNIZED AS MARSH GRASS",/)
C C
C CAHR END
C C
C CAHR  IF(FCOV(I1).EQ.0)TEST1=.TRUE.
C C
C C     IF CDE=0 REVISE DEFAULT
C       IF(CDE(I1).EQ.0)DEF(I1,1)=.1
C C
C C     RELATE PLANT TYPE TO ARRAY INDEX
C       ITYP(I1)=9
C       DO 20 I2=1,8
C       IF(TYPE(I1).EQ.PLTYP(I2))ITYP(I1)=I2
C    20 CONTINUE
C C
C C     IF SDB=0 REVISE DEFAULT
C       IF(SDB(I1).NE.0)GO TO 120
C       IF(ITYP(I1).LT.9.AND.REG.NE.0)GO TO 90
C       TEST2=.TRUE.
C       GO TO 120
C    90 IF(HBI(I1).NE.0)GO TO 100
C       DEF(I1,5)=HDN(IREG,ITYP(I1),2)
C       GO TO 120
C   100 A=HDN(IREG,ITYP(I1),3)
C       B=HDN(IREG,ITYP(I1),4)
C       DEF(I1,5)=A*HBI(I1)**B
C   120 CONTINUE
C C
C C     IF PPSF=0 REVISE DEFAULT
C       IF(PPSF(I1).NE.0)GO TO 150
C       IF(ITYP(I1).LT.9.AND.REG.NE.0)GO TO 130
C       TEST2=.TRUE.
C       GO TO 150
C   130 IF(HBI(I1).NE.0)GO TO 140
C       DEF(I1,4)=HDN(IREG,ITYP(I1),5)
C       GO TO 150
C   140 A=HDN(IREG,ITYP(I1),6)
C       B=HDN(IREG,ITYP(I1),7)
C       DEF(I1,4)=A*HBI(I1)**B
C   150 CONTINUE
C C
C C     IF HBI=0 REVISE DEFAULT
C       IF(HBI(I1).NE.0)GO TO 160
C       IF(ITYP(I1).LT.9.AND.REG.NE.0)GO TO 155
C       TEST2=.TRUE.
C       GO TO 160
C   155 DEF(I1,3)=HDN(IREG,ITYP(I1),1)
C   160 CONTINUE
C C
C C     IF SDM=0 REVISE DEFAULT
C       IF(SDM(I1).NE.0)GO TO 180
C       IF(ITYP(I1).LT.9)GO TO 170
C       TEST2=.TRUE.
C       GO TO 180
C   170 DEF(I1,6)=DEF(I1,5)*PPSD(ITYP(I1),1)
C   180 CONTINUE
C C
C C     IF SDT=0 REVISE DEFAULT
C       IF(SDT(I1).NE.0)GO TO 200
C       IF(ITYP(I1).LT.9)GO TO 190
C       TEST2=.TRUE.
C       GO TO 200
C   190 DEF(I1,7)=DEF(I1,5)*PPSD(ITYP(I1),2)
C   200 CONTINUE
C C
C C     IF FAR=0 REVISE DEFAULT
C       IF(FAR(I1).NE.0)GO TO 220
C       IF(ITYP(I1).LT.9)GO TO 210
C       TEST2=.TRUE.
C       GO TO 220
C   210 DEF(I1,8)=PPSD(ITYP(I1),3)
C   220 CONTINUE
C CAHR START
C   225   CONTINUE
C CAHR END
C C
C C     PRINT ERROR MESSAGE IF REQUIRED
C       IF(TEST2)WRITE(6,500)TYPE(I1),IREG
C C
C C     SET ERROR FLAG IF REQUIRED
C       IF(TEST2)TEST=.TRUE.
C C
C C     CLOSE OFF MAIN DO LOOP
C   230 CONTINUE
C C
C C     REVISE FCOV IF REQUIRED AND RETURN
C CAHR  IF(.NOT.TEST1)GO TO 250
C       IF(.NOT.TEST1)GO TO 270
C CAHR START
C C
C C       IF WE GET HERE, NCOV SHOULD BE GREATER THAN ZERO.
C C       TEST AND MAKE SURE.
C C
C         IF(NCOV.GT.0)GOTO 2010
C C
C         WRITE(6,2000)
C  2000   FORMAT(/10X,'NCOV IS .LE. ZERO IN SUB. LOOKUP WHEN IT SHOULD'
C      1  ' BE .GT. ZERO. ABORT RUN.')
C         STOP
C C
C  2010   CONTINUE
C         IF(FCOVCUM.GT.0.0)GOTO 250
C C
C C       IF WE GET HERE, ALL PLANTS USE DEFAULT FCOV VALUE.
C C
C         FCOVFLT=1.0/FLOAT(NPLTS)
C C
C CAHR END
C       DO 240 I2=1,NPLTS
C CAHR  DEF(I2,2)=1/FLOAT(NPLTS)
C       DEF(I2,2)=FCOVFLT
C   240 CONTINUE
C CAHR START
C C
C         GOTO 270
C  250    CONTINUE
C C
C C               AT LEAST ONE PLANT SPECIES DOES NOT HAVE A DEFAULT
C C               FCOV VALUE. WE ASSUME MULTIPLE COVERGE SO THAT SUM
C C               OF FCOV FOR SPECIES WITH DEFAULT IS 1.0
C C
C         FCOVFLT=1.0/FLOAT(NCOV)
C C
C         DO 260 I2=1, NPLTS
C                 IF(FCOV(I2).EQ.0.0)DEF(I2,2)=FCOVFLT
C  260    CONTINUE
C  270    CONTINUE
C C
C CAHR END

C CAHR 250 RETURN
C   500 FORMAT(/,10X,41HNO DEFAULT DATA AVAILABLE FOR PLANT TYPE ,A4,
C      110H IN REGION,I2)
C       END
C C
C C**************************
C         SUBROUTINE SCANE
C C****************************************************************
C C
C C     DEVELOPED FEBRUARY 1987 BY
C C
C C                 GREENHORNE AND O'MARA, INC.
C C                 GREENBELT, MARYLAND
C C
C C   THIS SUBROUTINE IS CALLED AT THE BEGINNING OF THE MAIN PROGRAM
C C   TO PERFORM THE STILLWATER ELEVATION INTERPOLATION.
C C
C C   THE INTERPOLATION SCHEME IS PERFORMED WITHIN A TRANSECT SEGMENT
C C   DEFINED AS THE STATIONING INTERVAL OF STILLWATER ELEVATION CHANGES.
C C   THE STILLWATER ELEVATIONS IN THE SEGMENT ARE LINEAR INTERPOLATED
C C   USING TWO GIVEN SURGES AT THE BEGINNING AND THE END OF A SEGMENT.
C C
C C   THE LINEAR INTERPOLATED VALUES AT EACH STATION WITHIN THIS SEGMENT
C C   ARE THEN COMPARED WITH THE CORRESPONDING GROUND ELEVATIONS. IF THE
C C   INTERPOLATED ELEVATIONS ARE ABOVE THE CORRESPONDING GROUND
C C   ELEVATIONS (I.E., NO GROUND CUT OFF), THE INTERPOLATED VALUES
C C   ARE USED AS THE STILLWATER ELEVATIONS FOR THE COMPUTATION OF
C C   THE WAVE HEIGHT.
C C   OTHERWISE, THE STILLWATER ELEVATIONS WILL BE DETERMINED BY
C C   THE CONCEPT SIMILAR TO THE "FLOW OVER A BARRIER" ALGORITHM USED
C C   IN THE FEMA'S SURGE MODEL.
C C
C C   AT THE END OF THIS SUBROUTINE, THE AVG. BOTTOM SLOPE AT EACH STATION
C C   IS COMPUTED AND STORED IN THE NINETH PARAMETER, I.E., IN PARAM(J,9).
C C   THE BOTTOM SLOPE WAS ORIGINALLY DESIGNED TO BE USED IN THE SETTING
C C   THE BREAKING VALUE OF THE FEMA'S CONTROLLING MAIN HEIGHT IN
C C   SUBROUTINE SHBM. AT PRESENT, THE DEPENDENCE OF THE BREAKING WAVE
C C   HEIGHT ON BOTTOM SLOPE IS NOT BEING USED BY FEMA. THEREFORE THE
C C   AT PRESENT, THE BOTTOM SLOPE IS NOT BEING USED IN WHAFIS.
C C
C C*******************************************************************
C C
C         LOGICAL TEST,TEST1
C         DIMENSION TOF(500),PARAM(500,10),TITLE(80),SGOLD(200),
C      A            SGNEW(200),JM(2),ELMX(2)
C C
C       DATA EI,DU,BU,VE,FI,FO,ET/ 'IE','DU','BU','VE','IF','OF','ET'/
C       DATA AS,VH,GM,BLANK/ 'AS','VH','MG',' '/
C C
C       NPLTS=0
C       NVH=0
C       NVH1=0
C       NVH2=0
C C
C    1  READ(5,805)  (TITLE(I),I=1,80)
C       TEST=.TRUE.
C       TEST1=.TRUE.
C       TEST1=.TRUE.
C C
C       DO 510 I=1,80
C       IF(TITLE(I). NE. BLANK) TEST=.FALSE.
C   510 CONTINUE
C C
C       IF(TEST) THEN
C       WRITE(10,805) BLANK
C       REWIND 10
C       RETURN
C       ENDIF
C C
C       WRITE(6,806) (TITLE(I),I=1,80)
C   806 FORMAT(1H1,10X,'***  THE FOLLOWING MESSAGES ARE THE RESULTS ',
C      A       'FROM THE 100-YR ELEVATION INTERPOLATION FOR THE ',
C      B       'TRANSECT:',//,10X,80A1)
C C
C C**   CHECK IF THE FIRST CARD IS EI CARD
C C
C       READ(5,810) TOF(1),(PARAM(1,I),I=1,10)
C       NB=1
C       IF(TOF(1). NE. EI) THEN
C        WRITE(6,820)
C   820  FORMAT(10X,'  THE FIRST CARD IS NOT AN IE CARD, THIS'
C      A ' TRANSECT IS ABORTED.  CONTINUED TO NEXT TRANSECT'/)
C        DO 3 J=1,500
C        READ(5,810) TOF(J)
C        IF(TOF(J).EQ.ET) GO TO 1
C     3  CONTINUE
C       ENDIF
C C
C C**   GIVING INITIAL STATIONING BFO, BED ELEVATION BEL, AND 100-YEAR
C C**   ELEVATION BSEN,
C C
C       BFO=PARAM(1,1)
C       BEL=PARAM(1,2)
C       BSEN=PARAM(1,5)
C       SGOLD(1)=BSEN
C       SGNEW(1)=BSEN
C C
C C**   CHECK IF BED ELEVATION BEL IS GREATER THAN 100-YEAR ELEVATION
C C**   BSEN ON EI CARD
C C
C       IF(BEL. GT. BSEN) THEN
C         WRITE(6,780)
C   780   FORMAT(5X,'GROUND ELEVATION GREATER THAN STILLWATER ELEVATION '
C      A  'ON THE IE CARD. JOB DUMPED.'/)
C         DO 4 J=1,500
C         READ(5,810) TOF(J)
C         IF(TOF(J).EQ.ET) GO TO 1
C     4   CONTINUE
C       ENDIF
C C
C C*********   START SCANNING 100-YR ELE. CHANGES   ********
C C
C C**  ASSUMING THE CURRENT STATION IS THE END STATION OF THE
C C**  INTERPOLATION SEGMENT
C C
C C**  FIRST READ INPUT FROM UNIT N5
C C
C       NFO=1
C     5 NFO = NFO + 1
C       READ(5,810) TOF(NFO),(PARAM(NFO,I),I=1,10)
C C
C C**   SET END SEGMENT STATIONING EFO AND CORRESPONDING BED ELEVATION
C C**   EEL
C C
C       EFO=PARAM(NFO,1)
C       EEL=PARAM(NFO,2)
C C
C C**   BRANCH TO VARIOUS PROGRAM SEGMENT ACCORDING TO CARD TYPE & SET
C C**   THE READ IN 100-YEAR STILLWATER ELEVATION ESEN
C C
C       IF(TOF(NFO).EQ.DU) GO TO  50
C       IF(TOF(NFO).EQ.BU) GO TO 100
C       IF(TOF(NFO).EQ.VE. OR. TOF(NFO).EQ.VH) GO TO 150
C       IF(TOF(NFO).EQ.FI. OR. TOF(NFO).EQ.FO) GO TO 200
C       IF(TOF(NFO).EQ.AS) GO TO 250
C       IF(TOF(NFO).EQ.ET) THEN
C         NE=NFO
C         GO TO 400
C       ENDIF
C C
C C**  DUNE (DU) CARD
C C
C    50 ESEN=PARAM(NFO,5)
C       GO TO 350
C C
C C**  BUILDING (BU) CARD
C C
C   100 ESEN=PARAM(NFO,6)
C       GO TO 350
C C
C C** VEGETATION (VE) OR MARSH GRASH (VH) CARD
C C
C   150 ESEN=PARAM(NFO,8)
C C
C       IF(TOF(NFO).EQ.VE) GO TO 350
C C
C C* FOR VH CARD, READ NPLTS TIMES OF MG CARDS
C C
C       HIGH=AMAX1(BSEN,ESEN)
C       IF(EEL. GT. HIGH)  THEN
C          WRITE(6,781) EFO,TOF(NFO)
C       ENDIF
C C
C       SGOLD(NFO)=ESEN
C       SGNEW(NFO)=ESEN
C C
C       IF(ESEN.EQ.0.) THEN
C         SGOLD(NFO)=SGOLD(NFO-1)
C         SGNEW(NFO)=SGOLD(NFO)
C       ENDIF
C C
C       KPLTS=NPLTS
C C
C       NPLTS=PARAM(NFO,6)
C       DO 155 I=1,NPLTS
C       NFO = NFO + 1
C       READ(5,560) TOF(NFO),(PARAM(NFO,K),K=1,10)
C       SGOLD(NFO)=SGOLD(NFO-1)
C       SGNEW(NFO)=SGOLD(NFO)
C   155 CONTINUE
C C
C       IF(ESEN.NE.0.) THEN
C         NVH=1
C         NE=NFO-NPLTS
C C
C         IF(NE. EQ. 2) THEN
C               NVH1=NE
C               GO TO 400
C         ENDIF
C C
C       ENDIF
C C
C       IF(NVH. EQ. 1) THEN
C         NVH=0
C         NVH2=NFO-NPLTS-KPLTS
C C
C         IF(NVH2. EQ. NVH1+1) THEN
C              NVH1=NE
C              GO TO 400
C         ENDIF
C C
C         NVH1=NE
C C
C       ENDIF
C C
C       IF(ESEN.EQ.0.) GO TO 5
C       GO TO 351
C C
C C**  INLAND FETCH (IF) OR OVER-WATER FETCH (OF) CARD
C C
C   200 ESEN=PARAM(NFO,4)
C       GO TO 350
C C
C C**  ABOVE SURGE (AS) CARD
C C
C   250 ESEN=PARAM(NFO,4)
C C
C C  FOR AS CARD RESET BEGINNING SEGMENT COUNTER
C C
C       NE=NFO
C C
C C**  AND RESET 100-YR ELEVATION
C C
C       IF(ESEN.EQ.0.) THEN
C          SGOLD(NFO)=SGOLD(NFO-1)
C          SGNEW(NFO)=SGOLD(NFO)
C       ELSE
C          SGOLD(NFO)=ESEN
C          SGNEW(NFO)=ESEN
C       ENDIF
C       GO TO 400
C C
C C****************************************************
C C**   SCANNING FOR 100-YR STILLWATER ELEVATION CHANGES   *
C C****************************************************
C C
C C**   FIRST CHECK WHETHER THE GROUND ELEVATION IS GREATER THAN
C C**   THE STILLWATER ELEVATION.  IF IT IS, THEN FLAG THE MESSAGE.
C C
C   350 CONTINUE
C       HIGH=AMAX1(BSEN,ESEN)
C       IF(EEL. GT. HIGH)  THEN
C C
C C   G&O MAY 89
C C
C C   CLARIFY THE INFORMATIONAL MESSAGE BELOW SO THAT
C C   IT CANNOT BE MISINTERPRETED.
C C
C          WRITE(6,781) EFO,TOF(NFO)
C   781    FORMAT(10X,'****  THE STILLWATER ELEVATION (BEFORE',
C      1       ' INTERPOLATION) AT',
C      A       '  STATION=',F8.0,' ,  WHICH IS ON AN ',A2,' CARD,'/,
C      B   10X,' IS LESS THAN THE GROUND ELEVATION.'/
C      C   10X,'THE INTERPOLATION PROCESS WAS CONTINUED.'/)
C C
C    WRITE( 6,1000 )
C  1000  FORMAT( 10X, 'THIS IS ',
C      1   'A WARNING (I.E. INFORMATIONAL) MESSAGE ONLY.'/
C      2   10X,'NO ERROR WAS FOUND BUT THE INPUT LOOKS SUSPICIOUS.'//
C      D    5X,'***  PLEASE DOUBLE-CHECK THE STILLWATER AND GROUND',
C      E       ' ELEVATIONS IN THE VICINITY OF THIS STATION',
C      F       ' !!!!!!'//)
C C
C C   END G&0 MAY 89
C C
C       END IF
C C
C C**   SECOND,  IF THERE IS NO STILLWATER ELEVATION CHANGE, GO TO 5 TO
C C**            READ NEXT CARD.
C C**            IF THE STILLWATER ELEVATION CHANGES, DO INTERPOLATION
C C
C       SGOLD(NFO)=ESEN
C       SGNEW(NFO)=ESEN
C       IF(ESEN.EQ.0.) THEN
C         SGOLD(NFO)=SGOLD(NFO-1)
C         SGNEW(NFO)=SGOLD(NFO)
C         GO TO 5
C       ENDIF
C C
C C******************************************
C C**  PREPARING FOR LINEAR INTERPOLATION   *
C C******************************************
C C
C       NE=NFO
C   351 DX=EFO-BFO
C       DSG=ESEN-BSEN
C       DDSG=DSG/DX
C C
C C****************************
C C**  LINEAR  INTERPOLATION  *
C C****************************
C C
C       NME=NE-1
C       NMB=NB+1
C C
C         IF(NME. LT. NMB) GO TO 400
C C
C       DO 360 J=NMB,NME
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=SGOLD(J)+DDSG*(PARAM(J,1)-BFO)
C       ENDIF
C   360 CONTINUE
C C
C C** CHECK IF THE LINEAR INTERPOLATION LINE CUT OFF ANY
C C** HIGH GROUND BED ELEVATION BELOW FOR STATIONS
C C** BETWEEN  NB  AND  NE
C C
C       NK=0
C       ELMX(1)=0.
C       ELMX(2)=0.
C       TEST1=.TRUE.
C C
C       DO 370 J=NMB,NME
C C
C       IF(TOF(J). EQ. GM) GO TO 370
C       IF(SGNEW(J). GE. PARAM(J,2)) GO TO 365
C C
C       IF(TEST1) THEN
C         NK=NK+1
C         TEST1=.FALSE.
C       ENDIF
C C
C C*  IF THE INTERPOLATION LINE CUTS MORE THAN TWO PORTIONS OF
C C*  HIGH GROUND RIDGE, STOP THIS TRANSECT, GO TO NEXT TRANSECT
C C
C       IF(NK. GT. 2) THEN
C         WRITE(6,899)
C   899   FORMAT(10X,'INTERPOLATION LINE CUTS OFF MORE THAN',
C      A    ' TWO PORTIONS OF HIGH GROUND RIDGE'//,
C      B   10X,'THIS TRANSECT IS ABORTED, RE-ASSIGN 100-YR ',
C      C       'ELEVATIONS AT HIGH GROUND STATIONS'///)
C         DO 363  I = 1, 500
C         READ(5,810) TOF(I)
C         IF(TOF(I). EQ. ET) GO TO 1
C   363   CONTINUE
C       END IF
C C
C       IF(PARAM(J,2). GE. ELMX(NK)) THEN
C         ELMX(NK)=PARAM(J,2)
C         JM(NK)=J
C       ENDIF
C       GO TO 370
C C
C   365 TEST1=.TRUE.
C C
C   370 CONTINUE
C C
C C**  IF THERE IS NO CUT OFF FROM INTERPOLATION LINE THEN
C C**  GO TO WRITE TO SCRATCH FILE SEGMENT
C C
C       IF(NK. EQ. 0) GO TO 400
C C
C C**  IF THE 100-YR ELE. AT STATION NE IS GREATER THAN THE
C C**  100-YR ELE. AT STATION NB, THEN BRANCH TO 600
C C
C       IF(DSG. GT. 0.) GO TO 600
C C
C C**  THE FOLLOWING SEGMENT FOR THE CASE THAT THE 100-YR ELE. AT
C C**  STATION NE IS LESS THAN OR EQUAL TO THE 100-YR ELE. AT
C C**  STATION NB.
C C
C       IF(NK. EQ. 1) GO TO 380
C C
C C**  IF THE HIGHEST GROUND ELEVATIONS OF THE SECOND HUMP IS LOWER
C C**  THAN THE FIRST HIGHEST HUMP GROUND ELEVATION, THEN BRANCH TO
C C**  STATEMENT 390
C C
C       IF(PARAM(JM(2),2). LT. PARAM(JM(1),2)) GO TO 390
C       JM(1)=JM(2)
C C
C C** RESET 100-YR ELE. TO BE THE SAME AS BSEN, THE ELE. AT
C C** THE BEGINING OF THIS INTERPOLATION SEGMENT
C C
C C** FOR STATIONS FROM NMB TO THE HIGHEST BED STATION, JM(1)
C C
C   380 DO 373 J=NMB,JM(1)
C       SGNEW(J)=BSEN
C       IF(TOF(J). EQ. GM) GO TO 373
C C
C C**  IF THE NEW STILLWATER ELEVATION IS STILL LESS THEN THE BED
C C**  ELEVATION, ABORT THIS TRANSECT, GIVING ERROR MESSAGE.
C C
C       IF(SGNEW(J).GE.PARAM(J,2)) GO TO 373
C         WRITE(6,782) PARAM(J,1),TOF(J)
C   782   FORMAT(//10X,'****  UNREASONABLE HIGH GROUND ELEVATION',
C      A   ' AT STATION (',F8.2,' ) WHICH IS ',A2,' CARD.'/,10X,
C      B   'THIS TRANSECT IS ABORTED, CONTINUED TO NEXT TRANSECT'//,
C      C    10X,'***  DOUBLE-CHECK THE STILLWATER AND GROUND ELEVATIONS',
C      D        ' IN THE VICINITY OF THIS STATION.  IF THE GROUND'/,
C      E    15X,' ELEVATIONS ARE CORRECT, EITHER ASSIGN A HIGHER',
C      F        ' STILLWATER ELEVATION OR USE AS CARDS !!!!'//)
C C
C          DO 371 KK=1,500
C          READ(5,810) TOF(KK)
C          IF(TOF(KK).EQ.ET) GO TO 1
C   371    CONTINUE
C C
C   373 CONTINUE
C C
C C**  FOR THE REST STATIONS AFTER JM(1) TO THE END STATION OF
C C**  THIS SEGMENT, THE 100-YR ELE. WILL BE THE BED ELEVATION,
C C**  PARAM(J,2), PLUS THE WATER DEPTH, D, SITTING ON THE HIGHEST
C C**  BED ELEVATION STATION
C C**  UNTIL THE 100-YR ELE. AT THE END STATION OF THIS SEGMENT
C C**  IS MET
C C
C       D=SGNEW(JM(1))-PARAM(JM(1),2)
C       JMB=JM(1)+1
C C
C       DO 375 J=JMB,NME
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=AMAX1(PARAM(J,2)+D,ESEN)
C       ENDIF
C   375 CONTINUE
C C
C       GO TO 400
C C
C   390 CONTINUE
C C
C C**  THE FOLLOWING PROGRAM SEGMENT IS FOR THE CASE THAT THE
C C**  INTERPOLATION LINE CUTS BED ELEVATIONS TWO PORTIONS IN
C C**  THIS TRANSECT SEGMENT, AND THE HIGHER BED ELEVATION
C C**  STATION IS BEFORE THE OTHER ONE, I.E., THE BED ELE. AT
C C**  JM(1) IS GREATER THAN THE BED ELE. AT JM(2)
C C
C C**  FIRST RESET THE 100-YR ELE. FOR STATIONS BEFORE JM(1)
C C
C       DO 393 J=NMB,JM(1)
C       SGNEW(J)=BSEN
C       IF(SGNEW(J).GE.PARAM(J,2)) GO TO 393
C         WRITE(6,782) PARAM(J,1),TOF(J)
C   393 CONTINUE
C C
C C**  THEN LINEAR INTERPOLATION 100-YR ELE. FROM JM(1)+1 TO
C C**  THE END STATION, NE, OF THIS INTERPOLATION SEGMENT
C C
C       D=SGNEW(JM(1))-PARAM(JM(1),2)
C       DX=EFO-PARAM(JM(1),1)
C       DDSG=(ESEN-BSEN)/DX
C C
C       JMB=JM(1)+1
C       DO 395 J=JMB, NME
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=SGOLD(J)+DDSG*(PARAM(J,1)-PARAM(JM(1),1))
C       ENDIF
C   395 CONTINUE
C C
C C**  SET THE 100-YR ELE. AT STATIONS BETWEEN STATION JM(1)
C C**  AND NE AS THE MAXIMUM OF: SECOND INTERPOLATION VALUE,
C C**  THE BED ELEVATIONS PLUS THE WATER DEPTH AT JM(1),
C C**  AND THE 100-YR ELE. AT THE END STATION OF THIS SEGMENT
C C
C       DO 397 J=JMB,NME
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=AMAX1(SGNEW(J),PARAM(J,2)+D,ESEN)
C       ENDIF
C   397 CONTINUE
C C
C       GO TO 400
C C
C C**********  END OF INTERPOLATION FOR DSG IS LESS THAN ZERO CASE
C C
C   600 CONTINUE
C C
C C***  THE FOLLOWING PROGRAM SEGMENT IS FOR THE CASE OF 100-YR ELE.
C C***  AT NE IS GREATER THAN THE 100-YR ELE. AT NB.  AND THERE IS AT
C C***  LEAST ONE CUT OFF PORTION FROM THE LINEAR INTERPOLATION LINE.
C C
C       IF(NK. EQ. 1) GO TO 605
C C
C       IF(PARAM(JM(1),2). LT. PARAM(JM(2),2)) GO TO 620
C C
C   605 CONTINUE
C C
C C**  RESET 100-YR ELE. TO BE THE SAME AS ESEN, THE ELE. AT THE END
C C**  OF THIS INTERPOLATION SEGMENT, I.E., AT STATION NE.
C C
C       DO 610 J=JM(1),NME
C       SGNEW(J)=ESEN
C   610 CONTINUE
C C
C C**  FOR THE REST OF STATIONS FROM NMB (I.E., NB+1) TO JM(1)-1 OF
C C**  THIS SEGMENT, THE 100-YR ELE. WILL BE THE GROUND ELEVATION,
C C**  PARAM(JP,2), PLUS THE WATER DEPTH, D, SITTING ON THE HIGHEST
C C**  GROUND ELEVATION STATION JM(1), UNTIL THE BSEN IS MET.
C C
C       D=SGNEW(JM(1))-PARAM(JM(1),2)
C C
C       JP=JM(1)-1
C       DO 615 J = NMB, JP
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=AMAX1(PARAM(J,2)+D,BSEN)
C       ENDIF
C   615 CONTINUE
C C
C       GO TO 400
C C
C   620 CONTINUE
C C
C C**  THE FOLLOWING PROGRAM SEGMENT IS FOR THE CASE THAT THE
C C**  INTERPOLATION LINE CUTS BED ELEVATIONS TWO PORTIONS IN
C C**  THIS TRANSECT SEGMENT, AND THE HIGHER BED ELEVATION
C C**  STATION IS AFTER THE OTHER ONE, I.E., THE BED ELE. AT
C C**  JM(1) IS LOWER THAN THE BED ELE. AT JM(2).
C C
C       DO 630 J=JM(2),NME
C       SGNEW(J)=ESEN
C   630 CONTINUE
C C
C C**  THEN LINEAR INTERPOLATION 100-YR ELE. FOR STATIONS BETWEEN
C C**  NB AND JM(2)
C C
C       D=SGNEW(JM(2))-PARAM(JM(2),2)
C       DX=PARAM(JM(2),1)-BFO
C       DDSG=(ESEN-BSEN)/DX
C C
C       JP=JM(2)-1
C       DO 635 J = NMB, JP
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=ESEN+DDSG*(PARAM(J,1)-PARAM(JM(2),1))
C       ENDIF
C   635 CONTINUE
C C
C C**  SET THE 100-YR ELE. AT STATIONS BETWEEN STATIONS NB AND
C C**  JM(2) AS THE MAXIMUM OF: SECOND INTERPOLATION VALUE (SGNEW),
C C**  THE BED ELEVATION PLUS THE WATER DEPTH AT JM(2) (D), AND
C C**  THE 100-YR ELE. AT THE BEGINNING STATION OF THIS SEGMENT
C C**  BSEN (=SGNEW(NB)).
C C
C       JP=JM(2)-1
C       DO 645 J = NMB, JP
C       IF(TOF(J). EQ. GM) THEN
C         SGNEW(J)=SGNEW(J-1)
C       ELSE
C         SGNEW(J)=AMAX1(SGNEW(J),PARAM(J,2)+D,BSEN)
C       ENDIF
C   645 CONTINUE
C C
C C******   END OF DSG GREATER THAN ZERO CASE   *****
C C
C C*********************************************************
C C***********     END  OF  INTERPOLATION  PROCESS    ******
C C*********************************************************
C C
C C****  STORING NEW 100-YR ELE. TO THE CORRESPONDING FILED PARAMETER
C C
C   400 IF(NB. NE. 1) GO TO 402
C       WRITE(10,805) (TITLE(I),I=1,80)
C C     WRITE(10,815) TOF(1),(PARAM(1,I),I=1,10)
C   402 CONTINUE
C C
C       J=NB
C   410 J=J+1
C       IF(TOF(J). EQ. GM) GO TO 410
C       IF(TOF(J). EQ. DU) GO TO 450
C       IF(TOF(J). EQ. BU) GO TO 460
C       IF(TOF(J). EQ. VE. OR. TOF(J). EQ. VH) GO TO 470
C       IF(TOF(J). EQ. FI. OR. TOF(J). EQ. FO) GO TO 480
C       IF(TOF(J). EQ. AS) GO TO 480
C       GO TO 490
C C
C C**  DUNE (DU) CARD
C C
C   450 PARAM(J,5)=SGNEW(J)
C       GO TO 490
C C
C C**  BUILDING (BU) CARD
C C
C   460 PARAM(J,6)=SGNEW(J)
C       GO TO 490
C C
C C** VEGETATION (VE) OR MARSH GRASH (VH) CARD
C C
C   470 PARAM(J,8)=SGNEW(J)
C       GO TO 490
C C
C C** INLAND FETCH (IF) OR OVER-WATER FETCH (OF) CARD
C C
C   480 PARAM(J,4)=SGNEW(J)
C C
C   490 IF(TOF(J). EQ. ET) GO TO 700
C C
C       IF(J. EQ. NE) THEN
C         BSEN=SGNEW(J)
C         BFO=PARAM(J,1)
C         NB=NE
C         GO TO 5
C       ELSE
C         GO TO 410
C       ENDIF
C C
C C*******************************************************************
C C                                                                  *
C C**   THE FOLLOWING SEGMENT IS FOR COMPUTING THE AVERAGE BOTTOM    *
C C**   SLOPE AT EACH STATION.                                       *
C C                                                                  *
C C**   THE BOTTOM SLOPE IS STORED AS PARAM(J,9) OF EACH STATION     *
C C**   EXCEPT FOR MG CARD                                           *
C C                                                                  *
C C*******************************************************************
C C
C   700 CONTINUE
C C
C C**  STARTING FROM THE FIRST CARD, FISRT COMPUTE THE SLOPE BETWEEN
C C**  STATION J AND J-1.  THE SLOPE FOR IE CARD IS THE SLOPE BETWEEN
C C**  THE IE CARD AND THE SECOND CARD
C C
C       J=2
C C
C       SA=(PARAM(J,2)-PARAM(J-1,2))/(PARAM(J,1)-PARAM(J-1,1))
C C
C       PARAM(J-1,9)=SA
C C
C       JA=J-1
C       JB=J+1
C C
C C**  IF THE NEXT CARD IS AS CARD, THE AVERAGE SLOPE IS THE SLOPE SA
C C
C   705 IF(TOF(JB).EQ.AS) THEN
C         PARAM(J,9)=SA
C         GO TO 720
C       ENDIF
C C
C C**  IF TOF(J) IS VH CARD, SKIP ALL MG CARDS
C C
C       IF(TOF(J). EQ. VH) THEN
C         NPLTS=PARAM(J,6)
C         JB=JB+NPLTS
C       ENDIF
C C
C C**  COMPUTE THE BOTTOM SLOPE BETWEEN THIS STATION, J, AND THE
C C**  NEXT STATION, JB
C C
C C**  HOWEVER,IF THE NEXT STATION IS ET, END OF THE TRANSECT,
C C**  THEN THE AVERAGED SLOPE IS SA
C C
C       IF(TOF(JB). EQ. ET) THEN
C         PARAM(J,9)=SA
C         GO TO 770
C       ENDIF
C C
C       SB=(PARAM(JB,2)-PARAM(J,2))/(PARAM(JB,1)-PARAM(J,1))
C C
C C**  IF TOF(J) IS AS CARD, THE AVERAGE SLOPE OF THIS CARD IS THE
C C**  SLOPE OF SB
C C
C       IF(TOF(J). EQ. AS) THEN
C         PARAM(J,9)=SB
C         GO TO 710
C       ENDIF
C C
C C**  WEIGHT AVERAGED SLOPE FOR THIS STATION FROM SA AND SB
C C
C       SS=(PARAM(J,1)-PARAM(JA,1))*SA + (PARAM(JB,1)-PARAM(J,1))*SB
C       PARAM(J,9)=SS/(PARAM(JB,1)-PARAM(JA,1))
C C
C C**  REPLACE SA WITH SB, AND CONTINUE TO NEXT STATION
C C
C   710 SA=SB
C C
C C**  FOR VH CARD, REARRANGE PREVIOUS AND LATER STATION COUNT
C C
C       IF(TOF(J).EQ. VH) THEN
C         JA=J
C         J=JB
C         JB=J+1
C         GO TO 705
C       ENDIF
C C
C   720 J=J+1
C       JA=J-1
C       JB=J+1
C       GO TO 705
C C
C C******************************************************************
C C                                                                 *
C C**  COMPLETE CALCULATING AVERAGED BOTTOM SLOPE FOR THIS TRANSECT *
C C                                                                 *
C C******************************************************************
C C
C C******************************************************************
C C                                                                 *
C C**  START WRITING TO SCRATCH FILE -- UNIT 10                     *
C C                                                                 *
C C******************************************************************
C C
C   770 CONTINUE
C C
C       DO 775 J=1,500
C C
C       IF(TOF(J).EQ.GM) THEN
C         WRITE(10,565) TOF(J),(PARAM(J,I),I=1,10)
C       ELSE
C C
C           IF(PARAM(J,1). GT. 99999.) THEN
C              ITEMP=IFIX(PARAM(J,1))
C              WRITE(10,816) TOF(J),ITEMP,(PARAM(J,I),I=2,10)
C           ELSE
C              WRITE(10,815) TOF(J),(PARAM(J,I),I=1,10)
C           ENDIF
C C
C       ENDIF
C C
C       IF(TOF(J). EQ. ET) GO TO 1
C   775 CONTINUE
C C
C   560 FORMAT(A2,2X,A4,9F8.0)
C   565 FORMAT(A2,2X,A4,9F8.2)
C   805 FORMAT(80A1)
C   810 FORMAT(A2,F6.0,9F8.0)
C   815 FORMAT(A2,F6.0,7F8.3,F8.4,F8.3)
C   816 FORMAT(A2,I6,  7F8.3,F8.4,F8.3)
C       END

